{"remainingRequest":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/babel-loader/lib/index.js!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/ts-loader/index.js??ref--15-2!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/store/actions.ts","dependencies":[{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/store/actions.ts","mtime":1732636434642},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/babel.config.js","mtime":1732546288000},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js","mtime":1732627998206},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/babel-loader/lib/index.js","mtime":1732627998426},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/ts-loader/index.js","mtime":1732627997224},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js","mtime":1732627997140}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["store","axios","v4","uuidv4","arrayBufferToBase64","base64ToArrayBuffer","openLoading","drawViewChangeLineChart","indexGetData","indexPutData","initIndexDB","get","state","url","data","getBuffer","timeGetCache","Date","getTime","cacheFlag","undefined","flagBuffer","err","console","error","responseType","log","loadViewChangeQueryWSMinMaxMissDataInitData","context","payload","maxLevel","currentTable","controlParams","lineInfo","currentMode","defaultTableMap","customTableMap","Error","startTimeStamp","start_time","endTimeStamp","end_time","timeInterval","interval","mode","width","type","combinedUrl","then","tempRes","viewChangeQueryObj","id","height","x","Math","random","y","timeRange","startTime","endTime","minV","maxV","currentLevel","ceil","log2","isPow","nonUniformColObjs","maxLen","drawer","loadMultiTimeSeriesInitData","realDataRowNum","currentMulitLineClass","currentMultiLineClass","lineClassInfo","allMultiLineClassInfoMap","allCustomMultiLineClassInfoMap","res","commit","className","name","lineAmount","amount","timeIntervalMs","columnInfos","algorithm","pow","minv","maxv","computeLineTransform","line1","dataset1","dataset2","transform_symbol","experiment","Array","from","errorBound","parallel","getAllTables","allTables","map","v","split","tables","getAllFlagsFunc","lineType","isLoading","combinedUrl1","allFlagNames","flagMap","loading","i","length","combinedUrl2","tempFlagInfo","Buffer","close","getAllFlags","catch","currentLineType","flags","getAllMultiLineClassInfo","info","getAllMultiLineClassAndLinesInfo","testCustomDBConn","post","host_name","hostName","user_name","userName","password","possword","db_name","dbName","createCustomDBConn","initOM3DB","clearOM3Table","getAllCustomTables","performTransformForSingeLine","tableName","performTransformForMultiLine","tableNames","multiLineClassName","loadCustomTableAndInfo","customTables","customTableInfo","loadDefaultTableAndInfo","tableInfo"],"sources":["/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/store/actions.ts"],"sourcesContent":["import store, { emitter, getAvgTime, GlobalState, MultiTimeSeriesObj, ViewChangeLineChartObj, ws } from \".\";\nimport { Commit, ActionContext, ActionHandler } from 'vuex'\nimport axios from \"axios\";\n// import { constructMinMaxMissTrendTree, constructTrendTree } from '../helper/wavlet-decoder';\nimport { constructMinMaxMissTrendTree, constructMinMaxMissTrendTreeMulti} from '../helper/wavlet-decoder';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as d3 from \"d3\";\nimport LevelDataManager from \"@/model/level-data-manager\";\nimport  NoUniformColObj  from \"@/model/non-uniform-col-obj\";\nimport { formatToRenderDataForTrend, getGlobalMinMaxInfo } from \"@/helper/format-data\";\nimport md5 from \"md5\"\nimport { arrayBufferToBase64, base64ToArrayBuffer, getLevelData, openLoading } from \"@/helper/util\";\nimport { ElButtonGroup, ElLoading } from 'element-plus'\nimport { drawViewChangeLineChart } from \"@/application/line-interaction\";\nimport { indexGetData, indexPutData, initIndexDB } from \"@/indexdb\";\n\nasync function get(state: GlobalState, url: string) {\n\n    url = 'postgres' + url;\n\n    //const loading = openLoading();\n    const { data } = await axios.get(url);\n    //loading.close();\n    return data;\n}\n\nasync function getBuffer(state: GlobalState, url: string) {\n\n    url = 'postgres' + url;\n    // localStorage.removeItem(url)\n    try {\n        const timeGetCache = new Date().getTime()\n        const cacheFlag = await indexGetData(url)\n\n        if (cacheFlag && cacheFlag !== '' && cacheFlag !== undefined && cacheFlag !== null) {\n            //@ts-ignore\n            const flagBuffer = base64ToArrayBuffer(cacheFlag!);\n            // console.log(url, \"use flag cache:\", flagBuffer.byteLength);\n            return flagBuffer\n        }\n\n    } catch (err) {\n        console.error(err)\n    }\n\n\n    //const loading = openLoading();\n    const { data } = await axios.get(url, { responseType: 'arraybuffer' });\n    if (data) {\n        indexPutData(url, arrayBufferToBase64(data));\n        console.log(url, \" store in indexdb\")\n    }\n    // loading.close();\n    return data;\n}\n\nconst loadViewChangeQueryWSMinMaxMissDataInitData: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { startTime: number, endTime: number, width: number, height: number }) => {\n    let maxLevel = 0\n    const currentTable = context.state.controlParams.currentTable;\n    let lineInfo: any = null\n    if (context.state.controlParams.currentMode === 'Default') {\n        lineInfo = context.state.defaultTableMap.get(currentTable);\n    } else {\n        lineInfo = context.state.customTableMap.get(currentTable);\n    }\n\n    if (lineInfo === undefined) {\n        throw new Error(\"cannot get class info\");\n    }\n    maxLevel = lineInfo['level'];\n    const startTimeStamp = new Date(lineInfo.start_time).getTime();\n    let endTimeStamp = 0\n    if (lineInfo.end_time !== '') {\n        endTimeStamp = new Date(lineInfo.end_time).getTime();\n    }\n    let timeInterval = 0;\n    if (lineInfo.interval !== 0) {\n        timeInterval = lineInfo.interval;\n    }\n    //@ts-ignore\n    let mode = \"single\";\n    let width = 600;\n    let type = null;\n    // const combinedUrl = `/line_chart/getDataForSingleLine?mode=${mode}&width=${width}&table_name=${currentTable}&startTime=${-1}&endTime=${-1}&nteract_type=${type}`;\n    const combinedUrl = `/line_chart/getDataForSingleLine?mode=${mode}&width=${width}&table_name=${currentTable}&startTime=${-1}&endTime=${-1}&nteract_type=${type}`;\n    const data = get(context.state, combinedUrl);\n    data.then(tempRes => {\n        const viewChangeQueryObj: ViewChangeLineChartObj = {\n            id: uuidv4(),\n            width: payload.width,\n            height: payload.height,\n            x: Math.random() * 60,\n            y: Math.random() * 60,\n            // root: trendTree,\n            // data: { powRenderData: [], noPowRenderData: [], minv: minv!, maxv: maxv! },\n            // timeRange: [0, lineInfo['max_len']],\n            // startTime: startTimeStamp,\n            // endTime: endTimeStamp,\n            timeRange: [0, 65536],\n            startTime: 0,\n            endTime: 65536,\n            // algorithm: \"\",\n            // dataManager: null,\n            // params: [0, 0],\n            minV: 0,\n            maxV: 0,\n            currentLevel: Math.ceil(Math.log2(payload.width)),\n            isPow: false,\n            nonUniformColObjs: [],\n            // maxLen: lineInfo['max_len']\n            maxLen: 65536\n        }\n        const drawer = drawViewChangeLineChart(viewChangeQueryObj, null)\n        drawer(tempRes);\n    });\n}\n\nconst loadMultiTimeSeriesInitData: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { width: number, height: number, type: string }) => {\n    const currentLevel = Math.ceil(Math.log2(payload.width));\n    let maxLevel = 0;\n    let realDataRowNum = 65536;\n    const currentMulitLineClass = context.state.controlParams.currentMultiLineClass;\n    let lineClassInfo: any = null\n    if (context.state.controlParams.currentMode === 'Default') {\n        lineClassInfo = context.state.allMultiLineClassInfoMap.get(currentMulitLineClass);\n    } else {\n        lineClassInfo = context.state.allCustomMultiLineClassInfoMap.get(currentMulitLineClass);\n    }\n\n    if (lineClassInfo === undefined) {\n        throw new Error(\"cannot get class info\");\n    }\n    maxLevel = lineClassInfo['level'];\n\n    const combinedUrl = `/line_chart/getDataForMultiLines?width=${2 ** currentLevel}&class_name=${currentMulitLineClass}&mode=${context.state.controlParams.currentMode}`;\n    const data = get(context.state, combinedUrl);\n\n    data.then(res => {\n        const startTimeStamp = new Date(lineClassInfo.start_time).getTime();\n        let endTimeStamp = 0\n        if (lineClassInfo.end_time !== '') {\n            endTimeStamp = new Date(lineClassInfo.end_time).getTime();\n        }\n        let timeInterval = 0;\n        if (lineClassInfo.interval !== 0) {\n            timeInterval = lineClassInfo.interval;\n        }\n        context.commit(\"addMultiTimeSeriesObj\", {\n            className: lineClassInfo.name,\n            lineAmount: lineClassInfo.amount,\n            startTimeStamp: startTimeStamp,\n            endTimeStamp: endTimeStamp,\n            timeIntervalMs: timeInterval,                \n            columnInfos: res, \n            startTime: 0, \n            endTime: realDataRowNum - 1, \n            algorithm: \"multitimeseries\", \n            width: payload.width, \n            height: payload.height, \n            pow: false, \n            minv: 0, \n            maxv: 0, \n            maxLevel\n        })\n    });\n}\n\nconst computeLineTransform: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, line1:any) =>{\n    // const dataset1 = \"om3_multi.mock_mock_guassian_sin1_6ht_om3_6ht\";\n    // const dataset2 = \"om3_multi.mock_mock_guassian_sin2_6ht_om3_6ht\";\n    const dataset1 = line1[0];\n    const dataset2 = line1[1];\n    const transform_symbol = line1[2];\n    let experiment = line1[3];\n    const realDataRowNum = 65536;/////////////修改前131072\n    console.log(\"dataset1 && dataset2:\", dataset1, transform_symbol, Array.from(dataset2));\n    // const payload = {width: 600, height: 600};\n    const payload = line1[4];\n    const errorBound = line1[5];\n    const mode = line1[6];\n    console.log(\"payload:\", payload);\n    const currentLevel = Math.ceil(Math.log2(payload.width));\n    let maxLevel = 0\n    const currentMulitLineClass = context.state.controlParams.currentMultiLineClass;\n    let lineClassInfo: any = null\n    if (context.state.controlParams.currentMode === 'Default') {\n        lineClassInfo = context.state.allMultiLineClassInfoMap.get(currentMulitLineClass);\n    } else {\n        lineClassInfo = context.state.allCustomMultiLineClassInfoMap.get(currentMulitLineClass);\n    }\n    if (lineClassInfo === undefined) {\n        throw new Error(\"cannot get class info\");\n    }\n\n    maxLevel = lineClassInfo['level'];\n    \n    let type = '';\n    experiment = 'case1';\n    let parallel = 0;\n    let startTime = 0;\n    let endTime = 65536;/////////////修改前131072\n    let combinedUrl = '';\n    switch(experiment){\n        case 'om3':\n            combinedUrl = `/line_chart/om3?table_name=${dataset1}&table_name_others=${dataset2}&symbol=${transform_symbol}&mode=${mode}&width=${payload.width}&height=${payload.height}&startTime=${startTime}&endTime=${endTime-1}&interact_type=${type}&experiment=${experiment}&parallel=${parallel}&errorBound=${errorBound}`;\n            break; \n        case 'case1':\n            combinedUrl = `/line_chart/case1?table_name=${dataset1}&table_name_others=${dataset2}&symbol=${transform_symbol}&mode=${mode}&width=${payload.width}&height=${payload.height}&startTime=${startTime}&endTime=${endTime-1}&interact_type=${type}&experiment=${experiment}&parallel=${parallel}&errorBound=${errorBound}`;\n            break;\n        case 'case2':\n            combinedUrl = `/line_chart/case2?table_name=${dataset1}&table_name_others=${dataset2}&symbol=${transform_symbol}&mode=${mode}&width=${payload.width}&height=${payload.height}&startTime=${startTime}&endTime=${endTime}&interact_type=${type}&experiment=${experiment}&parallel=${parallel}&errorBound=${errorBound}`;\n            break;\n        case 'case3':\n            combinedUrl = `/line_chart/case3?table_name=${dataset1}&table_name_others=${dataset2}&symbol=${transform_symbol}&mode=${mode}&width=${payload.width}&height=${payload.height}&startTime=${startTime}&endTime=${endTime}&interact_type=${type}&experiment=${experiment}&parallel=${parallel}&errorBound=${errorBound}`;\n            break;\n    }\n\n    const data = get(context.state, combinedUrl);\n    data.then(tempRes => {\n        console.log(tempRes);\n        if(mode == 'compute'){\n            const viewChangeQueryObj: ViewChangeLineChartObj = {\n                id: uuidv4(),\n                width: payload.width,\n                height: payload.height,\n                x: Math.random() * 60,\n                y: Math.random() * 60,\n                // root: trendTree,\n                // data: { powRenderData: [], noPowRenderData: [], minv: minv!, maxv: maxv! },\n                // timeRange: [0, lineInfo['max_len']],\n                // startTime: startTimeStamp,\n                // endTime: endTimeStamp,\n                timeRange: [startTime, endTime],\n                startTime: startTime,\n                endTime: endTime,\n                // algorithm: \"\",\n                // dataManager: null,\n                // params: [0, 0],\n                minV: tempRes['min_value'][0],\n                maxV: tempRes['max_value'][0],\n                currentLevel: Math.ceil(Math.log2(payload.width)),\n                isPow: false,\n                nonUniformColObjs: [],\n                // maxLen: lineInfo['max_len']\n                maxLen: endTime\n            }\n            const drawer = drawViewChangeLineChart(viewChangeQueryObj, line1)\n            drawer(tempRes['M4_array']);\n        }\n        else{\n            const startTimeStamp = new Date(lineClassInfo.start_time).getTime();\n            let endTimeStamp = 0\n            if (lineClassInfo.end_time !== '') {\n                endTimeStamp = new Date(lineClassInfo.end_time).getTime();\n            }\n            let timeInterval = 0;\n            if (lineClassInfo.interval !== 0) {\n                timeInterval = lineClassInfo.interval;\n            }\n            context.commit(\"addMultiTimeSeriesObj\", {\n                className: lineClassInfo.name,\n                lineAmount: lineClassInfo.amount,\n                startTimeStamp: startTimeStamp,\n                endTimeStamp: endTimeStamp,\n                timeIntervalMs: timeInterval,                \n                columnInfos: tempRes['M4_array'], \n                startTime: 0, \n                endTime: realDataRowNum - 1, \n                algorithm: \"multitimeseries\", \n                width: payload.width, \n                height: payload.height, \n                pow: false, \n                minv: 0,\n                maxv: 0,\n                maxLevel,\n                line1\n            })\n        }\n    });\n}\n\nconst getAllTables: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllTables`;\n    const data = get(context.state, combinedUrl);\n    data.then(res => {\n        const allTables = res.map((v: any) => v['table_fullname'].split(\".\")[1]);\n        context.commit(\"updateAllTables\", { tables: allTables });\n    })\n}\n\nasync function getAllFlagsFunc(context: ActionContext<GlobalState, GlobalState>, lineType: string, isLoading: boolean) {\n\n    const combinedUrl1 = `/line_chart/getAllFlagNames?line_type=${lineType}`;\n    const allFlagNames = await get(context.state, combinedUrl1);\n    const flagMap: any = {}\n\n    let loading = null;\n    if (isLoading) {\n        loading = openLoading(\"Loading Order Coefficients. First load may take a long time, Please Wait!\")\n    }\n    for (let i = 0; i < allFlagNames['data'].length; i++) {\n        const combinedUrl2 = `/line_chart/getSingleFlag?name=${allFlagNames['data'][i]}&line_type=${lineType}`\n        const tempFlagInfo = await getBuffer(context.state, combinedUrl2);\n        //@ts-ignore\n        flagMap[allFlagNames['data'][i].split(\".\")[0]] = Buffer.from(tempFlagInfo)\n    }\n    if (loading) {\n        loading.close()\n    }\n\n    return flagMap;\n}\n\nconst getAllFlags: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    initIndexDB().then(() => {\n        console.log(\"indexdb init success\");\n    }).catch(() => {\n        console.error(\"indexdb init error\");\n    })\n    const lineType = store.state.controlParams.currentLineType\n    getAllFlagsFunc(context, lineType, true).then(res => {\n        context.commit(\"updateAllFlags\", { flags: res });\n        getAllFlagsFunc(context, \"Multi\", false).then(res => {\n            context.commit(\"updateAllFlags\", { flags: res });\n        })\n    })\n\n\n}\n\nconst getAllMultiLineClassInfo: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllMultiLineClassInfo?mode=${store.state.controlParams.currentMode}`;\n    const data = get(context.state, combinedUrl);\n    data.then(res => {\n        // console.log(\"getAllMultiLineClassInfo\", res);\n        context.commit(\"updateMultiLineClassInfo\", { info: res });\n    });\n}\n\nconst getAllMultiLineClassAndLinesInfo: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllMultiLineClassAndLinesInfo?mode=${store.state.controlParams.currentMode}`;\n    const data = get(context.state, combinedUrl);\n    data.then(res => {\n        // console.log(\"getAllMultiLineClassAndLinesInfo\", res);\n        context.commit(\"updateMultiLineClassAndLinesInfo\", { info: res });\n    });\n}\n\nconst testCustomDBConn: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { hostName: string, possword: string, dbName: string, userName: string }) => {\n    return axios.post(\"postgres/line_chart/testDBConnection\", {\n        host_name: payload.hostName,\n        user_name: payload.userName,\n        password: payload.possword,\n        db_name: payload.dbName,\n    })\n}\n\nconst createCustomDBConn: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { hostName: string, possword: string, dbName: string, userName: string }) => {\n    return axios.post(\"postgres/line_chart/createCustomDBConn\", {\n        host_name: payload.hostName,\n        user_name: payload.userName,\n        password: payload.possword,\n        db_name: payload.dbName,\n    })\n}\nconst initOM3DB: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { hostName: string, possword: string, dbName: string, userName: string }) => {\n    return get(context.state, \"/line_chart/initOM3DBEnv\")\n}\nconst clearOM3Table: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { hostName: string, possword: string, dbName: string, userName: string }) => {\n    return get(context.state, \"/line_chart/clearOM3Table\")\n}\n\nconst getAllCustomTables: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllCustomTables`;\n    return get(context.state, combinedUrl);\n}\n\nconst performTransformForSingeLine: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { startTime: string, endTime: string, tableName: string }) => {\n    const combinedUrl = `/line_chart/performTransformForSingeLine?start_time=${payload.startTime}&end_time=${payload.endTime}&table_name=${payload.tableName}`;\n    return get(context.state, combinedUrl);\n}\nconst performTransformForMultiLine: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>, payload: { startTime: string, endTime: string, tableNames: Array<string>, multiLineClassName: string }) => {\n    const combinedUrl = `/line_chart/performTransformForMultiLine?start_time=${payload.startTime}&end_time=${payload.endTime}&table_name=${payload.tableNames}&line_class=${payload.multiLineClassName}`;\n    return get(context.state, combinedUrl);\n}\n\nconst loadCustomTableAndInfo: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllCustomTableAndInfo?mode=${context.state.controlParams.currentMode}`;\n    get(context.state, combinedUrl).then((res) => {\n        if (res['code'] === 200) {\n            context.commit(\"updateCustomTableAndInfo\", { customTables: res['data']['table_name'], customTableInfo: res['data']['table_info'] })\n        } else {\n            console.log(res['msg'])\n        }\n    })\n}\n\nconst loadDefaultTableAndInfo: ActionHandler<GlobalState, GlobalState> = (context: ActionContext<GlobalState, GlobalState>) => {\n    const combinedUrl = `/line_chart/getAllDefaultTableAndInfo?mode=${context.state.controlParams.currentMode}`;\n    get(context.state, combinedUrl).then((res) => {\n        if (res['code'] === 200) {\n            context.commit(\"updateDefaultTableAndInfo\", { tables: res['data']['table_name'], tableInfo: res['data']['table_info'] })\n        } else {\n\n            console.log(res['msg'])\n        }\n    })\n}\n\n\n\nexport {\n    getAllTables,\n    getAllCustomTables,\n    getAllFlags,\n    loadMultiTimeSeriesInitData,\n    loadViewChangeQueryWSMinMaxMissDataInitData,//final method\n    getAllMultiLineClassInfo,\n    getAllMultiLineClassAndLinesInfo,\n    testCustomDBConn,\n    createCustomDBConn,\n    initOM3DB,\n    clearOM3Table,\n    performTransformForSingeLine,\n    loadCustomTableAndInfo,\n    performTransformForMultiLine,\n    loadDefaultTableAndInfo,\n    computeLineTransform,\n}\n\n\n\n"],"mappings":"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","ignoreList":[]}]}