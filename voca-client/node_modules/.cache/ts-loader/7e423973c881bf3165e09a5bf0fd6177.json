{"remainingRequest":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/babel-loader/lib/index.js!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/ts-loader/index.js??ref--15-2!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/model/level-data-manager.ts","dependencies":[{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/model/level-data-manager.ts","mtime":1732546288000},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/babel.config.js","mtime":1732546288000},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js","mtime":1732627998206},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/babel-loader/lib/index.js","mtime":1732627998426},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/ts-loader/index.js","mtime":1732627997224},{"path":"/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js","mtime":1732627997140}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["LevelIndexObj","axios","TrendTree","store","pushTimeArray","canCut","computeLosedDataRange","computeLosedDataRangeV1","computeTimeSE","UniformGapObj","loadDataForRangeLevel","batchLoadDataForRangeLevelRawMinMax","batchLoadDataForRangeLevel","batchLoadDataForRangeLevel1","batchLoadDataForRangeLevel2MinMaxMiss","batchLoadDataForRangeLevel1MinMaxMiss","batchLoadDataForRangeLevel1WS","Cache","getFlag","get","url","data","allTimes","allSumTimes","LevelDataManager","constructor","levelIndexObjs","dataName","maxLevel","state","controlParams","tableMaxLevel","realDataRowNum","isShow","columnInfos","curNodeNum","dataCache","Array","cacheMap","Map","cacheHead","cacheTail","maxCacheNodeNum","lruCache","initCache","deleteQueue","isIntering","isEvicting","getDataMockServer","info","internalLevel","level","outterLevel","nextLevel","Error","width","Math","ceil","log2","offset","end","start","focusPoint","nextStart","nextEnd","getData","noRet","lastFullLevel","i","floor","isFull","losedDataInfo","checkLoadedDataInSingalLevel","l","extraDataLevel","curExtraLevel","fakeRowNum","lastIndex","getDataByIndex","getDataMinMaxMiss","processLosedDataInfo","j","length","tempInfo","push","getDataRawMinMax","getDataV1","hasData","hasDataForRange","has","losedRange","range","losedDataOtherLevel","levelHasData","forEach","unshift","getLoadedData","checkMonotonicity","nonUniformColObjs","preIndexArray","needLoadDifNodes","first","yArray","minV","maxV","last","pL","pTRange","pTimeS","index","pTimeE","k","b","mergeLast","mergeFirst","splice","constructTreeForBatchLoad1","difVals","count","levelRange","startNode","getTreeNodeStartIndex","p","newTreeNode","_p","difference","dif","yArray1","yArray2","firstNode","secondNode","nextSibling","_p2","console","log","previousSibling","addLoadedDataRange","constructTreeForBatchLoad","nodeNum","_p3","set","_p4","viewChangeInteraction","currentLevel","timeRange","yScale","needLoadDifNode","colIndex","firstNodes","firtIndexTimeRange","getIndexTime","loadedDataRange","lastIndexTimeRange","startT","endT","type","isContain","currentLevelLosedRange","countNum","tempNeedLoadDifNodes","tempQue","v","_leftChild","_rightChild","preColIndex","con1","addLastVal","forceMerge","addFirstVal","viewChangeInteraction1","sumTime","reduce","pre","cur","startTime","Date","getTime","checkLoadedDataInSingalLevelV1","gap","endTime","options","max","maxSize","sizeCalculation","value","key","dispose","reason","disposeAfter","ttl","allowStale","updateAgeOnGet","updateAgeOnHas","evictTreeNode","setInterval","curNode","delete","deleteNodeWhithChild","curLS","curRS","curLLoadedRange","curFirstNodes","newFirstNodes","newLoadDataRanges","curRange0","curP","updateMaxCacheSize","size","lruCacheDelete","needDeleteNum","levelObj","computePowCon","gapNeedNodes","times","timeNum","groups","groupIdx","group","secGroup","levelTime","columnGapArray","columnGap","group1","group2","updateLeftMinMax","updateRighetMinMax","con","isFinish","isCut","colGap","isOk","lastLevelUpdateMinMax","updateTwoNode","canUseT","endV","tOne","startV","bfsSearchTree","viewChangeInteraction1WS","props","tagName","random","leftHas","rightHas","rootT","viewChangeInteractionFinal","includes","split","currentFlagInfo","allFlags","undefined","isMissContain","containColumnRange","nodeType","nodeFlag1","nodeFlag2","checkIsMis","viewChangeInteractionFinal1","drawer","loadedDataSize","gapFlag","progressive","viewTransformFinal","otherDataManager","transform_symbol","currentFlagInfo2","dataNames","needLoadDifNode2","fill","map","count_obj","total_time","firstIndexTimeRange","p2","resChild","p2_temp","slice","containColumnRange2","start_t","computeTransform","end_t","tempNeedLoadDifNodes2","tempQue2","tempQue3","array","maxL","maxR","maxValue","Infinity","minValue","finalValue","addMax","min","addMin","subMax","subMin","multiMax","multiMin","divMax","divMin","abs","myDict","a"],"sources":["/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/Users/huangshuo/Desktop/cxsj/om3-extend/om3-client/src/model/level-data-manager.ts"],"sourcesContent":["import LevelIndexObj from \"./level-index-obj\";\nimport axios from \"axios\";\nimport TrendTree from \"@/helper/tend-query-tree\";\nimport store, { pushTimeArray } from \"@/store\";\nimport * as d3 from 'd3';\nimport { canCut, checkSetType, computeLosedDataRange, computeLosedDataRangeV1, computeTimeSE, deleteSavedNodeIndex, computeSemanticColumn, convertWaveletToRawTableName, computeLosedDataRangeV1ForRawMinMax, computeTimeSE1 } from \"@/helper/util\";\nimport  NoUniformColObj  from \"./non-uniform-col-obj\";\nimport { UniformGapObj } from \"./uniform-gap-obj\";\n// import { loadDataForRangeLevel, batchLoadDataForRangeLevelRawMinMax, batchLoadDataForRangeLevel, batchLoadDataForRangeLevel1, batchLoadDataForRangeLevel2MinMaxMiss, batchLoadDataForRangeLevel1MinMaxMiss, batchLoadDataForRangeLevel1WS, batchLoadDataForRangeLevelForMinMaxMiss } from \"../api/build_tree\"\nimport { loadDataForRangeLevel, batchLoadDataForRangeLevelRawMinMax, batchLoadDataForRangeLevel, batchLoadDataForRangeLevel1, batchLoadDataForRangeLevel2MinMaxMiss, batchLoadDataForRangeLevel1MinMaxMiss, batchLoadDataForRangeLevel1WS, batchLoadDataForRangeLevelForMinMaxMiss } from \"../api/build_tree\"\nimport { constructMinMaxMissTrendTree, constructMinMaxMissTrendTreeMulti, constructMinMaxMissTrendTreeForGetChildTree} from '../helper/wavlet-decoder';\n\nimport Cache from \"lru-cache\"\nimport { getFlag } from \"@/global_state/state\";\nimport { START_LOCATION } from \"vue-router\";\n\nasync function get(url: string) {\n\n    url = 'postgres' + url;\n\n    //const loading = openLoading();\n    const { data } = await axios.get(url);\n    //loading.close();\n    return data;\n}\n\nlet allTimes: any = []\nlet allSumTimes: any = []\n\nexport default class LevelDataManager {\n    levelIndexObjs: Array<LevelIndexObj>\n    maxLevel: number\n    realDataRowNum: number\n    dataName: string\n    md5Num?: number\n    isShow: boolean\n    columnInfos: Array<NoUniformColObj> | null\n    curNodeNum: number\n    dataCache: Array<TrendTree>\n    cacheMap: Map<number, TrendTree>\n    cacheHead: TrendTree | null\n    cacheTail: TrendTree | null\n    maxCacheNodeNum: number\n    lruCache: any\n    deleteQueue: Array<TrendTree>\n    isIntering: boolean\n    isEvicting: boolean\n    constructor(levelIndexObjs: Array<LevelIndexObj>, dataName: string, maxLevel?: number) {\n        this.levelIndexObjs = levelIndexObjs;\n        this.maxLevel = maxLevel ? maxLevel : store.state.controlParams.tableMaxLevel;\n        this.realDataRowNum = 2 ** (maxLevel ? maxLevel : store.state.controlParams.tableMaxLevel);\n        this.dataName = dataName;\n        this.isShow = true;\n        this.columnInfos = null;\n        this.curNodeNum = 0;\n        this.dataCache = new Array<TrendTree>();\n        this.cacheMap = new Map<number, TrendTree>();\n        this.cacheHead = null;\n        this.cacheTail = null;\n        this.maxCacheNodeNum = 100000\n        this.lruCache = null;\n        this.initCache();\n        this.deleteQueue = [];\n        this.isIntering = false;\n        this.isEvicting = false\n    }\n\n\n    async getDataMockServer(info: { level: number, start: number, end: number, offset: number, width: number }) {\n        const internalLevel = this.maxLevel - info.level;\n        const outterLevel = info.level;\n        const nextLevel = internalLevel;\n        if (nextLevel < 1) {\n            throw new Error(\"level out of range\")\n        }\n        const width = 2 ** Math.ceil(Math.log2(info.width));\n        let offset = info.offset\n\n        let end = info.end;\n        let start = info.start;\n        let focusPoint = start + offset;\n        let nextStart = focusPoint - width / 4;\n        let nextEnd = focusPoint + width / 4;\n\n\n        if (nextStart <= start) {\n            nextStart = start;\n            nextEnd = start + width / 2 - 1;\n        }\n        if (nextEnd >= end) {\n            nextEnd = end;\n            nextStart = end - width / 2 + 1;\n        }\n        const data = await this.getData(outterLevel + 1, nextStart * 2, nextStart * 2 + width - 1);\n        return [[offset, 2 * nextStart], data];\n    }\n    async getData(level: number, start: number, end: number, noRet?: boolean) {\n        if (level > this.maxLevel) {\n            return []\n        }\n        let lastFullLevel = 2;\n        let nextStart = start;\n        let nextEnd = end;\n        for (let i = level - 1; i > 1; i--) {\n            nextStart = Math.floor(nextStart / 2);\n            nextEnd = Math.floor(nextEnd / 2);\n            if (this.levelIndexObjs[i] && this.levelIndexObjs[i].isFull) {\n                lastFullLevel = i;\n                break;\n            }\n        }\n        for (let i = lastFullLevel + 1; i <= level; i++) {\n            nextStart = nextStart * 2;\n            nextEnd = nextEnd * 2 + 1;\n            const losedDataInfo = this.checkLoadedDataInSingalLevel([[i, nextStart, nextEnd]]);\n            //debugger\n            await batchLoadDataForRangeLevel(losedDataInfo, this);\n        }\n        if (this.levelIndexObjs[level]) {\n            //更新缓存\n            // this.updateDataCacheForRange(level, start, end)\n            if (noRet) {\n                return { data: [], start: 0, end: 0, l: 0 }\n            } else {\n                if (this.dataName === 'sensor8') {\n                    const extraDataLevel = Math.ceil(Math.log2(2 ** this.maxLevel - this.realDataRowNum));\n                    if (level >= this.maxLevel - extraDataLevel) {\n                        const curExtraLevel = level - (this.maxLevel - extraDataLevel);\n                        const fakeRowNum = 2 ** curExtraLevel;\n                        if (end >= 2 ** level - fakeRowNum) {\n                            end = 2 ** level - fakeRowNum - 1;\n                        }\n                    }\n                    let lastIndex = this.realDataRowNum - 1;\n                    for (let i = this.maxLevel; i >= level; i--) {\n                        lastIndex = Math.floor(lastIndex / 2);\n                    }\n                    if (end < start) {\n                        return [];\n                    }\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                } else {\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                }\n            }\n\n        } else {\n            return { data: [], start: 0, end: 0, l: 0 }\n            //throw new Error(\"cannot get data from data manager\");\n        }\n    }\n    async getDataMinMaxMiss(level: number, start: number, end: number, noRet?: boolean) {\n        if (level > this.maxLevel) {\n            return []\n        }\n        let lastFullLevel = 2;\n        let nextStart = start;\n        let nextEnd = end;\n        for (let i = level - 1; i > 1; i--) {\n            nextStart = Math.floor(nextStart / 2);\n            nextEnd = Math.floor(nextEnd / 2);\n            if (this.levelIndexObjs[i] && this.levelIndexObjs[i].isFull) {\n                lastFullLevel = i;\n                break;\n            }\n        }\n\n        for (let i = lastFullLevel + 1; i <= level; i++) {\n            nextStart = nextStart * 2;\n            nextEnd = nextEnd * 2 + 1;\n            const losedDataInfo = this.checkLoadedDataInSingalLevel([[i, nextStart, nextEnd]]);\n            const processLosedDataInfo = [];\n            for (let j = 0; j < losedDataInfo.length; j++) {\n                const tempInfo = losedDataInfo[j]\n                processLosedDataInfo.push([tempInfo[0] - 1, Math.floor(tempInfo[1] / 2), Math.floor(tempInfo[2] / 2)])\n            }\n\n            await batchLoadDataForRangeLevel2MinMaxMiss(processLosedDataInfo, this);\n        }\n\n        if (this.levelIndexObjs[level]) {\n            //更新缓存\n            // this.updateDataCacheForRange(level, start, end)\n            if (noRet) {\n                return { data: [], start: 0, end: 0, l: 0 }\n            } else {\n                if (this.dataName === 'sensor8') {\n                    const extraDataLevel = Math.ceil(Math.log2(2 ** this.maxLevel - this.realDataRowNum));\n                    if (level >= this.maxLevel - extraDataLevel) {\n                        const curExtraLevel = level - (this.maxLevel - extraDataLevel);\n                        const fakeRowNum = 2 ** curExtraLevel;\n                        if (end >= 2 ** level - fakeRowNum) {\n                            end = 2 ** level - fakeRowNum - 1;\n                        }\n                    }\n                    let lastIndex = this.realDataRowNum - 1;\n                    for (let i = this.maxLevel; i >= level; i--) {\n                        lastIndex = Math.floor(lastIndex / 2);\n                    }\n                    if (end < start) {\n                        return [];\n                    }\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                } else {\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                }\n            }\n\n        } else {\n            return { data: [], start: 0, end: 0, l: 0 }\n            //throw new Error(\"cannot get data from data manager\");\n        }\n    }\n\n    async getDataRawMinMax(level: number, start: number, end: number, noRet?: boolean) {\n        if (level > this.maxLevel) {\n            return []\n        }\n        let lastFullLevel = 2;\n        let nextStart = start;\n        let nextEnd = end;\n        //debugger\n        for (let i = level - 1; i > 1; i--) {\n            nextStart = Math.floor(nextStart / 2);\n            nextEnd = Math.floor(nextEnd / 2);\n            if (this.levelIndexObjs[i] && this.levelIndexObjs[i].isFull) {\n                lastFullLevel = i;\n                break;\n            }\n        }\n        for (let i = lastFullLevel + 1; i <= level; i++) {\n            nextStart = nextStart * 2;\n            nextEnd = nextEnd * 2 + 1;\n            const losedDataInfo = this.checkLoadedDataInSingalLevel([[i, nextStart, nextEnd]]);\n            //debugger\n            await batchLoadDataForRangeLevelRawMinMax(losedDataInfo, this);\n        }\n        if (this.levelIndexObjs[level]) {\n            //更新缓存\n            // this.updateDataCacheForRange(level, start, end)\n            if (noRet) {\n                return { data: [], start: 0, end: 0, l: 0 }\n            } else {\n                if (this.dataName === 'sensor8') {\n                    const extraDataLevel = Math.ceil(Math.log2(2 ** this.maxLevel - this.realDataRowNum));\n                    if (level >= this.maxLevel - extraDataLevel) {\n                        const curExtraLevel = level - (this.maxLevel - extraDataLevel);\n                        const fakeRowNum = 2 ** curExtraLevel;\n                        if (end >= 2 ** level - fakeRowNum) {\n                            end = 2 ** level - fakeRowNum - 1;\n                        }\n                    }\n                    let lastIndex = this.realDataRowNum - 1;\n                    for (let i = this.maxLevel; i >= level; i--) {\n                        lastIndex = Math.floor(lastIndex / 2);\n                    }\n                    if (end < start) {\n                        return [];\n                    }\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                } else {\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                }\n            }\n\n        } else {\n            return { data: [], start: 0, end: 0, l: 0 }\n            //throw new Error(\"cannot get data from data manager\");\n        }\n    }\n    async getDataV1(level: number, start: number, end: number, noRet?: boolean) {\n        if (level > this.maxLevel) {\n            return [];\n        }\n        if (this.levelIndexObjs[level]) {\n\n            const hasData = this.levelIndexObjs[level].hasDataForRange(start, end);\n            if (hasData.has) {\n                return this.levelIndexObjs[level].getDataByIndex(start, end);\n            } else {\n                const losedRange = hasData.range;\n\n                for (let i = 0; i < losedRange.length; i++) {\n                    let l = level - 1;\n                    const losedDataOtherLevel = [];\n                    for (; l >= 0; l--) {\n                        if (this.levelIndexObjs[l].isFull) {\n                            break;\n                        }\n                        const levelHasData = this.levelIndexObjs[l].hasDataForRange(Math.floor(losedRange[i][0] / (2 ** (level - l))), Math.floor(losedRange[i][1] / (2 ** (level - l))));\n                        if (levelHasData.has) {\n                            break;\n                        }\n                        losedDataOtherLevel.push([l, Math.floor(losedRange[i][0] / (2 ** (level - l))), Math.floor(losedRange[i][1] / (2 ** (level - l)))]);\n                    }\n                    await loadDataForRangeLevel(losedDataOtherLevel, this);\n                }\n                losedRange.forEach(range => {\n                    range.unshift(level);\n                });\n                await loadDataForRangeLevel(losedRange, this);\n            }\n        } else {\n            let l = level - 1;\n            const losedDataOtherLevel = [];\n            for (; l >= 0; l--) {\n                if (this.levelIndexObjs[l] && this.levelIndexObjs[l].isFull) {\n                    break;\n                }\n                if (this.levelIndexObjs[l]) {\n                    const levelHasData = this.levelIndexObjs[l].hasDataForRange(Math.floor(start / (2 ** (level - l))), Math.floor(end / (2 ** (level - l))));\n                    if (levelHasData.has) {\n                        break;\n                    }\n                }\n                losedDataOtherLevel.push([l, Math.floor(start / (2 ** (level - l))), Math.floor(end / (2 ** (level - l)))]);\n            }\n            losedDataOtherLevel.unshift([level, start, end]);\n            await loadDataForRangeLevel(losedDataOtherLevel, this);\n        }\n        if (this.levelIndexObjs[level]) {\n            if (noRet) {\n                return []\n            } else {\n                if (this.dataName === 'sensor8') {\n                    const extraDataLevel = Math.ceil(Math.log2(2 ** this.maxLevel - this.realDataRowNum));\n                    if (level >= this.maxLevel - extraDataLevel) {\n                        const curExtraLevel = level - (this.maxLevel - extraDataLevel);\n                        const fakeRowNum = 2 ** curExtraLevel;\n                        if (end >= 2 ** level - fakeRowNum) {\n                            end = 2 ** level - fakeRowNum - 1;\n                        }\n                    }\n                    let lastIndex = this.realDataRowNum - 1;\n                    for (let i = this.maxLevel; i >= level; i--) {\n                        lastIndex = Math.floor(lastIndex / 2);\n                    }\n                    if (end < start) {\n                        return [];\n                    }\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                } else {\n                    return this.levelIndexObjs[level].getDataByIndex(start, end);\n                }\n            }\n        } else {\n            throw new Error(\"cannot get data from data manager\");\n        }\n    }\n    getLoadedData(level: number, start: number, end: number) {\n        if (this.levelIndexObjs[level]) {\n            if (this.dataName === 'sensor8') {\n                const extraDataLevel = Math.ceil(Math.log2(2 ** this.maxLevel - this.realDataRowNum));\n                if (level >= this.maxLevel - extraDataLevel) {\n                    const curExtraLevel = level - (this.maxLevel - extraDataLevel);\n                    const fakeRowNum = 2 ** curExtraLevel;\n                    if (end >= 2 ** level - fakeRowNum) {\n                        end = 2 ** level - fakeRowNum - 1;\n                    }\n                }\n                if (end < start) {\n                    return [];\n                }\n                return this.levelIndexObjs[level].getDataByIndex(start, end);\n            } else {\n                return this.levelIndexObjs[level].getDataByIndex(start, end);\n            }\n\n        } else {\n            throw new Error(\"cannot get data from data manager\");\n        }\n    }\n\n    checkMonotonicity(nonUniformColObjs: Array<NoUniformColObj>, preIndexArray: Array<number>, needLoadDifNodes: Array<TrendTree>) {\n        for (let i = 0; i < needLoadDifNodes.length; i++) {\n            const first = needLoadDifNodes[i].yArray[0];\n            const minV = needLoadDifNodes[i].yArray[1];\n            const maxV = needLoadDifNodes[i].yArray[2];\n            const last = needLoadDifNodes[i].yArray[3];\n            const pL = needLoadDifNodes[i].level;\n            const pTRange = (2 ** this.maxLevel) / (2 ** pL);\n            const pTimeS = needLoadDifNodes[i].index * pTRange;\n            const pTimeE = pTRange + pTimeS - 1;\n            if ((first === minV && last === maxV) || (first === maxV && last === minV)) {\n                const k = (last - first) / (pTimeE - pTimeS);\n                const b = first - k * pTimeS;\n                nonUniformColObjs[preIndexArray[i]].mergeLast(k, b);\n                nonUniformColObjs[preIndexArray[i] + 1].mergeFirst(k, b);\n                preIndexArray.splice(i, 1);\n                needLoadDifNodes.splice(i, 1);\n            }\n        }\n    }\n    constructTreeForBatchLoad1(losedRange: Array<Array<number>>, difVals: Array<{ l: number, i: number, dif: Array<number> }>) {\n        let count = 0;\n        for (let i = 0; i < losedRange.length; i++) {\n            const levelRange = losedRange[i];\n\n            const startNode = this.levelIndexObjs[losedRange[i][0]].getTreeNodeStartIndex(losedRange[i][1]);\n            let p = startNode;\n            const newTreeNode = [];\n            for (let j = losedRange[i][1]; j <= losedRange[i][2]; j++) {\n                if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                    //@ts-ignore\n                    p.difference = difVals[count].dif;\n                    // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                    // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                    // yArray1[0] = p.yArray[0];\n                    // yArray2[0] = p.yArray[0] - p.difference![0];\n                    // yArray1[3] = p.yArray[3] + p.difference![3];\n                    // yArray2[3] = p.yArray[3];\n                    // if (p.difference![1] < 0) {\n                    //     yArray1[1] = p.yArray[1];\n                    //     yArray2[1] = p.yArray[1] - p.difference![1];\n                    // } else {\n                    //     yArray1[1] = p.yArray[1] + p.difference![1];\n                    //     yArray2[1] = p.yArray[1]\n                    // }\n                    // if (p.difference![2] < 0) {\n                    //     yArray1[2] = p.yArray[2] + p.difference![2];\n                    //     yArray2[2] = p.yArray[2];\n                    // } else {\n                    //     yArray1[2] = p.yArray[2];\n                    //     yArray2[2] = p.yArray[2] - p.difference![2];\n                    // }\n                    const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                    const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                    yArray1[0] = p.yArray[0];\n                    yArray2[0] = p.yArray[0] - p.difference![0];\n                    // yArray1[3] = p.yArray[3] + p.difference![3];\n                    // yArray2[3] = p.yArray[3];\n                    yArray1[4] = p.yArray[4] + p.difference![4];\n                    yArray2[4] = p.yArray[4];\n                    if (p.difference![1] < 0) {\n                        yArray1[1] = p.yArray[1];\n                        yArray2[1] = p.yArray[1] - p.difference![1];\n                    } else {\n                        yArray1[1] = p.yArray[1] + p.difference![1];\n                        yArray2[1] = p.yArray[1]\n                    }\n                    if (p.difference![2] < 0) {\n                        yArray1[2] = p.yArray[2] + p.difference![2];\n                        yArray2[2] = p.yArray[2];\n                    } else {\n                        yArray1[2] = p.yArray[2];\n                        yArray2[2] = p.yArray[2] - p.difference![2];\n                    }\n                    if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                        yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                        yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                    }\n                    const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                    const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                    newTreeNode.push(firstNode);\n                    newTreeNode.push(secondNode);\n                    p = p.nextSibling;\n                    count++;\n                    if (p === null || count >= difVals.length) {\n                        break;\n                    }\n\n                } else {\n                    console.log(losedRange[i][0], losedRange[i][1])\n                    console.log(\"lose range:\", losedRange, p, p?.index, j);\n                    console.log(this.levelIndexObjs);\n                    debugger\n                    throw new Error(\"dif not match node\");\n                }\n            }\n            for (let j = 0; j < newTreeNode.length - 1; j++) {\n                newTreeNode[j].nextSibling = newTreeNode[j + 1];\n                newTreeNode[j + 1].previousSibling = newTreeNode[j];\n                if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                    throw new Error(\"sibling index error\");\n                }\n            }\n            if (this.levelIndexObjs[losedRange[i][0] + 1]) {\n                this.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n            } else {\n                this.levelIndexObjs[losedRange[i][0] + 1] = new LevelIndexObj(losedRange[i][0] + 1, false);\n                this.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n            }\n        }\n    }\n    constructTreeForBatchLoad(losedRange: Array<Array<number>>, difVals: Array<{ l: number, i: number, dif: Array<number> }>) {\n        let count = 0;\n        let nodeNum = 0;\n        for (let i = 0; i < losedRange.length; i++) {\n            const levelRange = losedRange[i];\n\n            const startNode = this.levelIndexObjs[losedRange[i][0] - 1].getTreeNodeStartIndex(Math.floor(losedRange[i][1] / 2));\n            let p = startNode;\n            const newTreeNode = [];\n            for (let j = Math.floor(losedRange[i][1] / 2); j <= Math.floor(losedRange[i][2] / 2); j++) {\n                if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                    //@ts-ignore\n                    p.difference = difVals[count].dif;\n                    // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                    // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                    // yArray1[0] = p.yArray[0];\n                    // yArray2[0] = p.yArray[0] - p.difference![0];\n                    // yArray1[3] = p.yArray[3] + p.difference![3];\n                    // yArray2[3] = p.yArray[3];\n                    // if (p.difference![1] < 0) {\n                    //     yArray1[1] = p.yArray[1];\n                    //     yArray2[1] = p.yArray[1] - p.difference![1];\n                    // } else {\n                    //     yArray1[1] = p.yArray[1] + p.difference![1];\n                    //     yArray2[1] = p.yArray[1]\n                    // }\n                    // if (p.difference![2] < 0) {\n                    //     yArray1[2] = p.yArray[2] + p.difference![2];\n                    //     yArray2[2] = p.yArray[2];\n                    // } else {\n                    //     yArray1[2] = p.yArray[2];\n                    //     yArray2[2] = p.yArray[2] - p.difference![2];\n                    // }\n                    const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                    const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                    yArray1[0] = p.yArray[0];\n                    yArray2[0] = p.yArray[0] - p.difference![0];\n                    // yArray1[3] = p.yArray[3] + p.difference![3];\n                    // yArray2[3] = p.yArray[3];\n                    yArray1[4] = p.yArray[4] + p.difference![4];\n                    yArray2[4] = p.yArray[4];\n                    if (p.difference![1] < 0) {\n                        yArray1[1] = p.yArray[1];\n                        yArray2[1] = p.yArray[1] - p.difference![1];\n                    } else {\n                        yArray1[1] = p.yArray[1] + p.difference![1];\n                        yArray2[1] = p.yArray[1]\n                    }\n                    if (p.difference![2] < 0) {\n                        yArray1[2] = p.yArray[2] + p.difference![2];\n                        yArray2[2] = p.yArray[2];\n                    } else {\n                        yArray1[2] = p.yArray[2];\n                        yArray2[2] = p.yArray[2] - p.difference![2];\n                    }\n                    if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                        yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                        yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                    }\n                    const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                    const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                    this.cacheMap.set(firstNode.index, firstNode);\n                    this.cacheMap.set(secondNode.index, secondNode);\n                    nodeNum += 2\n                    newTreeNode.push(firstNode);\n                    newTreeNode.push(secondNode);\n                    p = p.nextSibling;\n                    count++;\n                    if (p === null || count >= difVals.length) {\n                        break;\n                    }\n\n                } else {\n                    console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                    console.log(\"lose range:\", losedRange, p, p?.index, j);\n                    console.log(this.levelIndexObjs);\n                    debugger\n                    throw new Error(\"dif not match node\");\n                }\n            }\n            for (let j = 0; j < newTreeNode.length - 1; j++) {\n                newTreeNode[j].nextSibling = newTreeNode[j + 1];\n                newTreeNode[j + 1].previousSibling = newTreeNode[j];\n                if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                    throw new Error(\"sibling index error\");\n                }\n\n            }\n            if (this.levelIndexObjs[losedRange[i][0]]) {\n                this.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n            } else {\n                this.levelIndexObjs[losedRange[i][0]] = new LevelIndexObj(losedRange[i][0], false);\n                this.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n            }\n        }\n    }\n\n    async viewChangeInteraction(currentLevel: number, width: number, timeRange: Array<number>, yScale: any) {\n        // console.time(\"v_c\")\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel, this.dataName);\n        //drawViewChangeLineChart({ dataManager:this,data: {maxv:0,minv:0,powRenderData:[],noPowRenderData:[]}, startTime: 0, endTime: timeRange[1], algorithm: \"trendtree\", width:width, height: 600 })\n        //context!.commit(\"addViewChangeQueryNoPowLineChartObj\", { dataManager:this,data: nonUniformColObjs, startTime: 0, endTime: timeRange[1], algorithm: \"trendtree\", width:width, height: 600 });\n\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isContain(p);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2) {\n                        needLoadDifNode.push(p);\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        //throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n\n        }\n        //const draw=drawViewChangeLineChart({width:600,height:600,minv:0,maxv:1000,x:10,y:10})\n        //draw(nonUniformColObjs)\n        if (needLoadDifNode.length === 0) {\n            //debugger\n            return nonUniformColObjs;\n        }\n        let losedDataInfo = computeLosedDataRange(needLoadDifNode);\n        if (losedDataInfo.length === 0) {\n            return nonUniformColObjs;\n        }\n        const currentLevelLosedRange = [];\n        for (let j = 0; j < losedDataInfo.length; j++) {\n            const level = losedDataInfo[j][0];\n            const start = losedDataInfo[j][1];\n            const end = losedDataInfo[j][2];\n            if (this.levelIndexObjs[level]) {\n\n                const hasData = this.levelIndexObjs[level].hasDataForRange(start, end);\n                if (!hasData.has) {\n                    const losedRange = hasData.range;\n                    losedRange.forEach(range => {\n                        range.unshift(level);\n                        currentLevelLosedRange.push(range);\n                    });\n                    //debugger\n                }\n            } else {\n                currentLevelLosedRange.push([level, start, end]);\n            }\n        }\n        if (currentLevelLosedRange.length > 0) {\n            await batchLoadDataForRangeLevel(currentLevelLosedRange, this);\n        }\n\n        let countNum = 1\n        while (needLoadDifNode.length > 0) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if (v._leftChild === null || v._rightChild === null) {\n                    debugger\n                    throw new Error(\"cannot find next level node\");\n                }\n                tempQue.push(v._leftChild!);\n                tempQue.push(v._rightChild!);\n            });\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    //break;\n                    throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isContain(tempQue[i]);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n                const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], yScale);\n                if (con1) {\n                    tempNeedLoadDifNodes.splice(i, 1)\n                    preColIndex.splice(i, 1);\n                }\n            }\n            //this.checkMonotonicity(nonUniformColObjs,preColIndex,tempNeedLoadDifNodes);\n            needLoadDifNode = tempNeedLoadDifNodes;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                //console.log(\"last level:\",needLoadDifNode.length);\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n\n                    nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[0]);\n                    nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[0]);\n                    nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[3]);\n                    nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[3]);\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            let losedDataInfo = computeLosedDataRange(needLoadDifNode);\n            const currentLevelLosedRange = [];\n\n            for (let j = 0; j < losedDataInfo.length; j++) {\n                const level = losedDataInfo[j][0]\n                const start = losedDataInfo[j][1]\n                const end = losedDataInfo[j][2];\n                if (this.levelIndexObjs[level]) {\n\n                    const hasData = this.levelIndexObjs[level].hasDataForRange(start, end);\n                    if (!hasData.has) {\n                        const losedRange = hasData.range;\n                        losedRange.forEach(range => {\n                            range.unshift(level);\n                            currentLevelLosedRange.push(range);\n                        });\n                    }\n                } else {\n                    currentLevelLosedRange.push([level, start, end]);\n                }\n            }\n\n            await batchLoadDataForRangeLevel(currentLevelLosedRange, this);\n        }\n        //console.timeEnd(\"v_c\")\n        //draw(nonUniformColObjs)\n        return nonUniformColObjs;\n    }\n\n    async viewChangeInteraction1(currentLevel: number, width: number, timeRange: Array<number>, yScale: any) {\n        allTimes = []\n        // console.time(\"v_c\")\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel);\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isContain(p);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2) {\n                        needLoadDifNode.push(p);\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        // throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n\n        }\n        if (needLoadDifNode.length === 0) {\n            const sumTime = allTimes.reduce((pre: any, cur: any) => pre + cur, 0)\n            allSumTimes.push(sumTime)\n            allTimes = [];\n            if (allSumTimes.length >= 50) {\n                console.log(allSumTimes)\n            }\n            //debugger\n            return nonUniformColObjs;\n        }\n        let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n        //console.log(losedDataInfo)\n        // if (losedDataInfo.length === 0) {\n        //     return nonUniformColObjs;\n        // }\n\n        if (losedDataInfo.length > 0) {\n            const startTime = new Date().getTime()\n            await batchLoadDataForRangeLevel1(losedDataInfo, this);\n            allTimes.push(new Date().getTime() - startTime)\n        }\n\n\n        while (needLoadDifNode.length > 0) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if (v._leftChild === null || v._rightChild === null) {\n                    console.log(v)\n                    console.log(this)\n                    debugger\n                    throw new Error(\"cannot find next level node\");\n                }\n                tempQue.push(v._leftChild!);\n                tempQue.push(v._rightChild!);\n            });\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isContain(tempQue[i]);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n                if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                    const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], yScale);\n                    if (con1) {\n                        tempNeedLoadDifNodes.splice(i, 1)\n                        preColIndex.splice(i, 1);\n                    }\n                }\n\n            }\n            //this.checkMonotonicity(nonUniformColObjs,preColIndex,tempNeedLoadDifNodes);\n            needLoadDifNode = tempNeedLoadDifNodes;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                //console.log(\"last level:\",needLoadDifNode.length);\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n\n                    nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[0]);\n                    nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[0]);\n\n                    if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                        nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[3]);\n                        nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[3]);\n                    }\n\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            if (losedDataInfo.length > 0) {\n                const startTime = new Date().getTime()\n                await batchLoadDataForRangeLevel1(losedDataInfo, this);\n                allTimes.push(new Date().getTime() - startTime)\n            }\n\n        }\n        const sumTime = allTimes.reduce((pre: any, cur: any) => pre + cur, 0)\n        // console.log(sumTime)\n        //allSumTimes.push(sumTime)\n        //allTimes = [];\n        //if(allSumTimes.length>=50){\n        //    console.log(allSumTimes)\n        // }\n        //console.timeEnd(\"v_c\")\n        return nonUniformColObjs;\n    }\n\n\n    checkLoadedDataInSingalLevel(losedDataInfo: Array<Array<number>>) {\n        const currentLevelLosedRange = [];\n        for (let j = 0; j < losedDataInfo.length; j++) {\n            const level = losedDataInfo[j][0]\n            const start = losedDataInfo[j][1]\n            const end = losedDataInfo[j][2];\n            if (this.levelIndexObjs[level]) {\n\n                const hasData = this.levelIndexObjs[level].hasDataForRange(start, end);\n                if (!hasData.has) {\n                    const losedRange = hasData.range;\n                    losedRange.forEach(range => {\n                        range.unshift(level);\n                        currentLevelLosedRange.push(range);\n                    });\n                }\n            } else {\n                currentLevelLosedRange.push([level, start, end]);\n            }\n        }\n        return currentLevelLosedRange\n    }\n    checkLoadedDataInSingalLevelV1(losedDataInfo: Array<Array<number>>) {\n        const currentLevelLosedRange = [];\n        for (let j = 0; j < losedDataInfo.length; j++) {\n            const level = losedDataInfo[j][0]\n            const start = losedDataInfo[j][1]\n            const end = losedDataInfo[j][2];\n            if (this.levelIndexObjs[level]) {\n\n                const hasData = this.levelIndexObjs[level].hasDataForRange(start, end);\n                if (!hasData.has) {\n                    const losedRange = hasData.range;\n                    losedRange.forEach(range => {\n                        range.unshift(level);\n                        currentLevelLosedRange.push(range);\n                    });\n                }\n            } else {\n                currentLevelLosedRange.push([level, start, end]);\n            }\n        }\n        return currentLevelLosedRange\n    }\n\n\n    getIndexTime(l: number, index: number, maxLevel: number) {\n        const gap = 2 ** maxLevel / (2 ** l)\n        const startTime = index * gap;\n        const endTime = startTime + gap - 1;\n        return {\n            startT: startTime,\n            endT: endTime\n        }\n    }\n\n    initCache() {\n        const options = {\n            max: 1000000,\n            maxSize: 1000000,\n            sizeCalculation: (value: any, key: string) => {\n                return 1\n            },\n            dispose: (value: any, key: string, reason: string) => {\n                if (reason === \"evict\") {\n                    console.log(key)\n                    this.deleteQueue.push(value);\n                }\n\n            },\n            disposeAfter: (value: any, key: string, reason: string) => {\n                //console.log(\"dispose after----------------------\",key,reason)\n            },\n            ttl: 1000 * 60 * 60,\n            allowStale: false,\n            updateAgeOnGet: true,\n            updateAgeOnHas: true,\n\n        }\n        this.lruCache = new Cache(options);\n        this.evictTreeNode()\n        return\n    }\n\n\n    evictTreeNode() {\n        setInterval(() => {\n            if (this.isIntering) {\n                return\n            }\n            this.isEvicting = true\n            this.deleteQueue.forEach((curNode) => {\n                const l = curNode.level;\n                const i = curNode.index;\n                this.lruCache.delete(l + \"_\" + i);\n                if (this.levelIndexObjs[l].hasDataForRange(i, i).has) {\n                    this.deleteNodeWhithChild(l, i);\n                    console.log(\"evict l:\" + l + \" i:\" + i + \" finish!\")\n                }\n            })\n            this.isEvicting = false\n        }, 1000)\n\n    }\n\n\n    deleteNodeWhithChild(level: number, index: number) {\n\n        let curLS = index;\n        let curRS = index;\n        for (let j = level; j < this.maxLevel - 1; j++) {\n            if (j == level) {\n                curLS = index;\n                curRS = index;\n            } else {\n                curLS = 2 ** (j - level) * curLS;\n                curRS = 2 ** (j - level) * curRS + 1;\n            }\n            const curLLoadedRange = this.levelIndexObjs[j].loadedDataRange;\n            const curFirstNodes = this.levelIndexObjs[j].firstNodes;\n\n            if (!curLLoadedRange || !curFirstNodes) {\n                break;\n            }\n\n            const newFirstNodes: Array<TrendTree> = [];\n            const newLoadDataRanges = [];\n            for (let i = 0; i < curLLoadedRange.length; i++) {\n                const curRange0 = curLLoadedRange[i];\n                if (curRange0[1] < curRS) {\n                    newFirstNodes.push(curFirstNodes[i]);\n                    newLoadDataRanges.push([curRange0[0], curRange0[1]]);\n                } else if (curRange0[0] < curLS && curRange0[1] === curLS) {\n                    if (curFirstNodes[i].nextSibling) {\n                        newLoadDataRanges.push([curRange0[0], curRange0[1] - 1]);\n                        newFirstNodes.push(curFirstNodes[i])\n                    }\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curLS) {\n                            if (curP.previousSibling) {\n                                curP.previousSibling.nextSibling = null\n                                curP.previousSibling = null\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n                } else if (curRange0[0] < curLS && curRange0[1] > curLS && curRange0[1] < curRS) {\n                    newFirstNodes.push(curFirstNodes[i]);\n                    newLoadDataRanges.push([curRange0[0], curLS - 1]);\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curLS) {\n                            if (curP.previousSibling) {\n                                curP.previousSibling.nextSibling = null\n                                curP.previousSibling = null\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n                } else if (curRange0[0] < curLS && curRange0[1] === curRS) {\n                    newFirstNodes.push(curFirstNodes[i]);\n                    newLoadDataRanges.push([curRange0[0], curLS - 1]);\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curLS) {\n                            if (curP.previousSibling) {\n                                curP.previousSibling.nextSibling = null;\n                                curP.previousSibling = null;\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n\n                } else if (curRange0[0] < curLS && curRange0[1] > curRS) {\n                    //debugger\n                    newFirstNodes.push(curFirstNodes[i]);\n                    newLoadDataRanges.push([curRange0[0], curLS - 1])\n\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curLS) {\n                            if (curP.previousSibling) {\n                                curP.previousSibling.nextSibling = null\n                                curP.previousSibling = null;\n                            }\n                        }\n                        if (curP.index === curRS) {\n                            if (curP.nextSibling) {\n                                newFirstNodes.push(curP.nextSibling);\n                                newLoadDataRanges.push([curRS + 1, curRange0[1]]);\n                                curP.nextSibling.previousSibling = null;\n                                curP.nextSibling = null\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n\n                } else if (curRange0[0] === curLS && curRange0[1] > curRS) {\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curRS) {\n                            if (curP.nextSibling) {\n                                newFirstNodes.push(curP.nextSibling);\n                                newLoadDataRanges.push([curRS + 1, curRange0[1]]);\n                                curP.nextSibling.previousSibling = null;\n                                curP.nextSibling = null\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n\n                } else if (curRange0[0] === curLS && curRange0[1] === curRS) {\n                    continue;\n                } else if (curRange0[0] === curLS && curRange0[1] < curRS) {\n                    continue\n                } else if (curRange0[0] > curLS && curRange0[1] > curRS && curRange0[0] < curRS) {\n                    let curP = curFirstNodes[i];\n                    while (curP) {\n                        if (curP.index === curRS) {\n                            if (curP.nextSibling) {\n                                newFirstNodes.push(curP.nextSibling);\n                                newLoadDataRanges.push([curRS + 1, curRange0[1]]);\n                                curP.nextSibling.previousSibling = null;\n                                curP.nextSibling = null;\n                            }\n                            break;\n                        }\n                        //@ts-ignore\n                        curP = curP.nextSibling\n                    }\n                    if (curP === null) {\n                        throw new Error(\"cannot find range node\");\n                    }\n                } else if (curRange0[0] > curLS && curRange0[0] === curRS) {\n                    if (curFirstNodes[i].nextSibling) {\n                        newFirstNodes.push(curFirstNodes[i].nextSibling!)\n                        newLoadDataRanges.push([curRange0[0] + 1, curRange0[1]])\n                        curFirstNodes[i]!.nextSibling!.previousSibling = null\n                        curFirstNodes[i].nextSibling = null\n\n                    }\n\n                } else if (curRange0[0] > curRS) {\n                    newFirstNodes.push(curFirstNodes[i])\n                    newLoadDataRanges.push([curRange0[0], curRange0[1]])\n                } else if (curRange0[0] > curLS && curRange0[1] === curRS) {\n                    continue\n                }\n                else {\n                    console.log(curRange0, curLS, curRS)\n                    throw new Error(\"range error\");\n\n                }\n            }\n\n            this.levelIndexObjs[j].loadedDataRange = newLoadDataRanges;\n            this.levelIndexObjs[j].firstNodes = newFirstNodes;\n        }\n    }\n\n\n    updateMaxCacheSize(size: number) {\n        this.maxCacheNodeNum = size;\n    }\n\n    \n    lruCacheDelete() {\n        console.log(this.cacheMap.size)\n        if (this.cacheMap.size <= this.maxCacheNodeNum) {\n\n            return\n        }\n        let needDeleteNum = this.cacheMap.size - this.maxCacheNodeNum\n        if (needDeleteNum % 2 != 0) {\n            needDeleteNum++\n        }\n        console.log(\"delete nums:\", needDeleteNum)\n        for (let i = this.levelIndexObjs.length - 2; i > 0; i--) {\n            if (needDeleteNum <= 0) {\n                break\n            }\n            const levelObj = this.levelIndexObjs[i];\n            for (let j = 0; j < levelObj.firstNodes.length; j++) {\n                let firstNode = levelObj.firstNodes[j];\n                this.levelIndexObjs[firstNode.level + 1].loadedDataRange = [];\n                this.levelIndexObjs[firstNode.level + 1].firstNodes = [];\n                this.levelIndexObjs[firstNode.level + 1].isFull = false;\n                while (firstNode) {\n                    if (firstNode._leftChild) {\n                        this.cacheMap.delete(firstNode._leftChild.index)\n                    }\n                    if (firstNode._rightChild) {\n                        this.cacheMap.delete(firstNode._rightChild.index)\n                    }\n                    //@ts-ignore\n                    firstNode = firstNode.nextSibling\n                    needDeleteNum -= 2;\n                }\n            }\n        }\n    }\n\n\n    async computePowCon(currentLevel: number, width: number, gapNeedNodes: Array<TrendTree>, nonUniformColObjs: Array<NoUniformColObj>) {\n        //debugger\n        console.log(\"pwo:\", width)\n        const times = [];\n        let needLoadDifNode: Array<TrendTree> = [];\n        if (gapNeedNodes.length % width !== 0) {\n            throw new Error(\"gap node not match widht\")\n        }\n        const timeNum = gapNeedNodes.length / width;\n        const groups = new Array<Array<TrendTree>>(width)\n        for (let i = 0; i < groups.length; i++) {\n            groups[i] = []\n        }\n        if (timeNum > 1) {\n            for (let i = 0; i < gapNeedNodes.length; i++) {\n                const groupIdx = Math.floor(i / timeNum)\n                groups[groupIdx].push(gapNeedNodes[i])\n            }\n            for (let i = 0; i < groups.length - 1; i++) {\n                const group = groups[i];\n                const secGroup = groups[i + 1]\n                needLoadDifNode.push(group[group.length - 1])\n                needLoadDifNode.push(secGroup[0])\n            }\n        } else {\n            needLoadDifNode = gapNeedNodes;\n        }\n\n\n        let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n\n\n        if (losedDataInfo.length > 0) {\n            const levelTime = new Date().getTime()\n            await batchLoadDataForRangeLevel1(losedDataInfo, this);\n            times.push(new Date().getTime() - levelTime);\n        } else {\n            times.push(1)\n        }\n        //debugger\n        let columnGapArray: Array<UniformGapObj> = [];\n        if (timeNum == 1) {\n            for (let i = 0; i < needLoadDifNode.length - 1; i++) {\n                // debugger\n                if (needLoadDifNode[i]._rightChild && needLoadDifNode[i + 1]._leftChild) {\n                    const columnGap = new UniformGapObj(needLoadDifNode[i], needLoadDifNode[i + 1])\n                    columnGapArray.push(columnGap);\n                } else {\n                    throw new Error(\"children cannot empty\")\n                }\n            }\n        } else {\n            for (let i = 0; i < needLoadDifNode.length; i += 2) {\n                if (needLoadDifNode[i]._rightChild && needLoadDifNode[i + 1]._leftChild) {\n                    const columnGap = new UniformGapObj(needLoadDifNode[i], needLoadDifNode[i + 1])\n                    columnGapArray.push(columnGap);\n                } else {\n                    throw new Error(\"children cannot empty\")\n                }\n            }\n            for (let i = 0; i < groups.length - 1; i++) {\n                const group1 = groups[i];\n                const group2 = groups[i + 1];\n                for (let j = 0; j < group1.length - 1; j++) {\n                    columnGapArray[i].updateLeftMinMax(group1[j])\n                }\n                for (let j = 1; j < group2.length; j++) {\n                    columnGapArray[i].updateRighetMinMax(group2[j])\n                }\n            }\n        }\n        let con = true\n        while (con) {\n            //debugger\n            let isFinish = false\n            needLoadDifNode = []\n            for (let i = 0; i < columnGapArray.length; i++) {\n                const isCut = columnGapArray[i].canCut()\n                isFinish = isCut && isFinish\n                if (!isCut) {\n                    needLoadDifNode.push(columnGapArray[i].firstNode);\n                    needLoadDifNode.push(columnGapArray[i].secondNode);\n                }\n            }\n            if (isFinish) {\n                break;\n            }\n            if (needLoadDifNode.length == 0) {\n                break\n            }\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                for (let i = 0; i < columnGapArray.length; i++) {\n                    const colGap = columnGapArray[i];\n                    if (!colGap.isOk) {\n                        if (colGap.firstNode && colGap.secondNode) {\n                            colGap.lastLevelUpdateMinMax()\n                        }\n                    }\n                }\n                break;\n            }\n            losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            if (losedDataInfo.length > 0) {\n                const levelTime = new Date().getTime()\n                await batchLoadDataForRangeLevel1(losedDataInfo, this);\n                times.push(new Date().getTime() - levelTime);\n            }\n            for (let i = 0; i < columnGapArray.length; i++) {\n                const colGap = columnGapArray[i];\n                if (!colGap.isOk) {\n                    if (colGap.firstNode._rightChild && colGap.secondNode._leftChild) {\n                        colGap.updateTwoNode(colGap.firstNode, colGap.secondNode);\n                    }\n                }\n            }\n        }\n        if (nonUniformColObjs.length !== columnGapArray.length + 1) {\n            throw new Error(\"column not match gap\")\n        }\n        for (let i = 0; i < columnGapArray.length; i++) {\n            const colGap = columnGapArray[i];\n            if (colGap.canUseT) {\n                nonUniformColObjs[i].endV = colGap.tOne;\n                nonUniformColObjs[i].startV = colGap.tOne;\n            }\n        }\n\n        if (times.length >= 3) {\n            allTimes.push(times[0])\n            //allTimes.push(times[1])\n        }\n        console.log(allTimes)\n        console.log(times)\n        return nonUniformColObjs\n\n    }\n\n\n    bfsSearchTree(currentLevel: number, width: number, timeRange: Array<number>, nonUniformColObjs: Array<NoUniformColObj>) {\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isContain(p);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2) {\n                        needLoadDifNode.push(p);\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n\n        }\n        if (needLoadDifNode.length === 0) {\n            //debugger\n            return nonUniformColObjs;\n        }\n\n        while (needLoadDifNode.length > 0) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if (v._leftChild === null || v._rightChild === null) {\n                    console.log(v)\n                    console.log(this)\n                    debugger\n                    throw new Error(\"cannot find next level node\");\n                }\n                tempQue.push(v._leftChild!);\n                tempQue.push(v._rightChild!);\n            });\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isContain(tempQue[i]);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n                if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                    const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], '');\n                    if (con1) {\n                        tempNeedLoadDifNodes.splice(i, 1)\n                        preColIndex.splice(i, 1);\n                    }\n                }\n\n            }\n            needLoadDifNode = tempNeedLoadDifNodes;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                //console.log(\"last level:\",needLoadDifNode.length);\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n\n                    nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[0]);\n                    nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[0]);\n\n                    if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                        nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[3]);\n                        nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[3]);\n                    }\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n        }\n        return nonUniformColObjs;\n    }\n\n    async viewChangeInteraction1WS(currentLevel: number, width: number, timeRange: Array<number>, yScale: any, props?: any) {\n        // while(this.isEvicting){console.log()};\n        this.isIntering = true\n        const tagName = \"\" + Math.random() + \"\" + Math.random()\n        allTimes = []\n        // console.time(\"v_c\")\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel);\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isContain(p);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2) {\n                        needLoadDifNode.push(p);\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n\n        }\n        if (needLoadDifNode.length === 0) {\n            const sumTime = allTimes.reduce((pre: any, cur: any) => pre + cur, 0)\n            allSumTimes.push(sumTime)\n            await batchLoadDataForRangeLevel1WS([], this, \"empty\");\n            allTimes = [];\n            if (allSumTimes.length >= 50) {\n                console.log(allSumTimes)\n            }\n            //debugger\n            return nonUniformColObjs;\n        }\n        let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n\n\n        if (losedDataInfo.length > 0) {\n            const startTime = new Date().getTime()\n            await batchLoadDataForRangeLevel1WS(losedDataInfo, this, tagName);\n            allTimes.push(new Date().getTime() - startTime)\n        }\n\n\n        while (needLoadDifNode.length > 0) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if (v._leftChild === null || v._rightChild === null) {\n                    debugger\n                    throw new Error(\"cannot find next level node\");\n                }\n                tempQue.push(v._leftChild!);\n                tempQue.push(v._rightChild!);\n                const leftHas = this.lruCache.has(v._leftChild.level + \"_\" + v._leftChild.index);\n                const rightHas = this.lruCache.has(v._rightChild.level + \"_\" + v._rightChild.index);\n                // if(!leftHas){\n                //     console.log(\"fddddd\",v._leftChild.level)\n                // }\n\n            });\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isContain(tempQue[i]);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n                if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                    const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], yScale);\n                    if (con1) {\n                        tempNeedLoadDifNodes.splice(i, 1)\n                        preColIndex.splice(i, 1);\n                    }\n                }\n\n            }\n            //this.checkMonotonicity(nonUniformColObjs,preColIndex,tempNeedLoadDifNodes);\n            needLoadDifNode = tempNeedLoadDifNodes;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                //console.log(\"last level:\",needLoadDifNode.length);\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n\n                    nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[0]);\n                    nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[0]);\n\n                    if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                        nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[3]);\n                        nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[3]);\n                    }\n\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            if (losedDataInfo.length > 0) {\n                const startTime = new Date().getTime()\n                await batchLoadDataForRangeLevel1WS(losedDataInfo, this, tagName);\n                allTimes.push(new Date().getTime() - startTime)\n            }\n\n        }\n        if (props && props.rootT) {\n            console.log(\"roott:\", props.rootT)\n            allTimes.push(props.rootT);\n        }\n        //console.log(allTimes)\n        const sumTime = allTimes.reduce((pre: any, cur: any) => pre + cur, 0)\n        allSumTimes.push(sumTime);\n        if (allSumTimes.length === 6) {\n            pushTimeArray(allSumTimes);\n            allSumTimes = []\n        }\n\n        console.log(\"AllLevelTime:\", allSumTimes);\n        await batchLoadDataForRangeLevel1WS(losedDataInfo, this, \"empty\");\n        this.isIntering = false;\n        return nonUniformColObjs;\n    }\n\n\n    async viewChangeInteractionFinal(currentLevel: number, width: number, timeRange: Array<number>, yScale: any) {\n        console.log(currentLevel, width, timeRange)\n        const dataName = this.dataName.includes(\".\") ? this.dataName.split(\".\")[1] : this.dataName;\n        const currentFlagInfo = store.state.allFlags[this.dataName];\n        if (currentFlagInfo === undefined) {\n            throw new Error(this.dataName + \"get flag faild\")\n        } else {\n            console.log(\"flag length:\", currentFlagInfo.length)\n        }\n\n        allTimes = []\n        // console.time(\"v_c\")\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel);\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isMissContain(p);\n                    nonUniformColObjs[colIndex].containColumnRange(p, type);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2) {\n                        needLoadDifNode.push(p);\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n\n        }\n\n        if (needLoadDifNode.length === 0) {\n            return nonUniformColObjs;\n        }\n\n        let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n\n\n        if (losedDataInfo.length > 0) {\n\n            await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this);\n        }\n\n\n        while (needLoadDifNode.length > 0) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if (v._leftChild === null || v._rightChild === null) {\n                    console.log(v)\n                    console.log(this)\n                    debugger\n                    throw new Error(\"cannot find next level node\");\n                }\n                this.lruCache.has(v._leftChild.level + \"_\" + v._leftChild.index);\n                this.lruCache.has(v._rightChild.level + \"_\" + v._rightChild.index);\n                if (v._leftChild.nodeType !== 'NULL') {\n                    tempQue.push(v._leftChild!);\n                }\n                if (v._rightChild.nodeType !== 'NULL') {\n                    tempQue.push(v._rightChild!);\n                }\n            });\n            // loadedDataSize += Math.floor(Math.random() * (500 - 0 + 1)) + 500;\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isMissContain(tempQue[i]);\n                nonUniformColObjs[colIndex].containColumnRange(tempQue[i], type);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n                if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                    const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], yScale);\n                    if (con1) {\n                        tempNeedLoadDifNodes.splice(i, 1)\n                        preColIndex.splice(i, 1);\n                    }\n                }\n\n            }\n            //this.checkMonotonicity(nonUniformColObjs,preColIndex,tempNeedLoadDifNodes);\n            needLoadDifNode = tempNeedLoadDifNodes;\n\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n\n                console.log(\"last level:\", needLoadDifNode.length);\n\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n                    const nodeFlag1 = currentFlagInfo[2 * needLoadDifNode[i].index];\n                    if (nodeFlag1 === 1) {\n                        throw new Error(\"flag error\")\n                    }\n                    const nodeFlag2 = currentFlagInfo[2 * needLoadDifNode[i].index + 1]\n                    if (nodeFlag2 === 0) {\n                        nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[1]);\n                        nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[1]);\n                        if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[2]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[2]);\n                        }\n                    } else {\n                        nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[2]);\n                        nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[2]);\n                        if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[1]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[1]);\n                        }\n                    }\n\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            if (losedDataInfo.length > 0) {\n                await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this);\n            }\n\n        }\n        for (let i = 0; i < nonUniformColObjs.length; i++) {\n            nonUniformColObjs[i].checkIsMis();\n        }\n        return nonUniformColObjs;\n    }\n\n\n    async viewChangeInteractionFinal1(currentLevel: number, width: number, timeRange: Array<number>, yScale: any, drawer: any) {\n        \n        const currentFlagInfo = getFlag(this.dataName);\n        // const currentFlagInfo = getFlag(\"mock_guassian_sin_8m_om3_8m\");\n        if (currentFlagInfo === undefined) {\n            throw new Error(this.dataName + \" get flag faild\")\n        } else {\n            // console.log(\"flag length:\", currentFlagInfo.length)\n        }\n\n        allTimes = []\n        // console.time(\"v_c\")\n        let loadedDataSize = 0;\n        let size = 1;\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel);\n        let needLoadDifNode: Array<TrendTree> = [];\n        let colIndex = 0;\n        loadedDataSize += Math.floor(Math.random() * (500 - 0 + 1)) + 500;\n        let startT = new Date().getTime();\n        for (let i = 0; i < this.levelIndexObjs[currentLevel].firstNodes.length; i++) {\n            const firtIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n\n            if (firtIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while (p != null) {\n                    if (colIndex >= nonUniformColObjs.length) {\n                        break;\n                        //throw new Error(\"col index out range\");\n                    }\n                    const type = nonUniformColObjs[colIndex].isMissContain(p);\n                    nonUniformColObjs[colIndex].containColumnRange(p, type);\n                    if (type === 1) {\n                        p = p.nextSibling!;\n                    } else if (type === 2 || type === 7 || type === 8 || type === 9 || type === 10) {\n                        if (type === 2) {\n                            needLoadDifNode.push(p);\n                        }\n                        if(type === 7 || type === 9){\n                            colIndex++;\n                        }\n                        p = p.nextSibling!;\n                    } else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!\n                    } else if (type === 6) {\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }else{\n                debugger\n            }\n        }\n        // debugger\n        if (needLoadDifNode.length === 0) {\n            return nonUniformColObjs;\n        }\n        loadedDataSize += needLoadDifNode.length*size;\n        let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n        // debugger\n        if (losedDataInfo.length > 0) {\n            await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this);\n        }\n\n        while (needLoadDifNode.length > 0 && needLoadDifNode[0].level < 16) {\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n\n            needLoadDifNode.forEach(v => {\n                if ((v._leftChild === null || v._rightChild === null) && v.nodeType === 'O') {\n                // if ((v._leftChild != null && v._rightChild != null) && v.nodeType === 'O') {\n                    // debugger\n                    console.log(v.level);\n                    throw new Error(\"cannot find next level node\");\n                }\n                if (v.nodeType === 'NULL') {\n                    //\n                } else {\n                    this.lruCache.has(v._leftChild!.level + \"_\" + v._leftChild!.index);\n                    this.lruCache.has(v._rightChild!.level + \"_\" + v._rightChild!.index);\n                    if (v._leftChild!.nodeType !== 'NULL') {\n                        tempQue.push(v._leftChild!);\n                    }\n                    if (v._rightChild!.nodeType !== 'NULL') {\n                        tempQue.push(v._rightChild!);\n                    }\n                }\n\n            });\n\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isMissContain(tempQue[i]);\n                nonUniformColObjs[colIndex].containColumnRange(tempQue[i], type);\n                if (type === 1) {\n                    continue;\n                } else if (type === 2 || type === 7 || type === 8 || type === 9 || type === 10) {\n                    if (type === 2) {\n                        tempNeedLoadDifNodes.push(tempQue[i]);\n                        preColIndex.push(colIndex);\n                    }\n\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            needLoadDifNode = tempNeedLoadDifNodes;\n            loadedDataSize += needLoadDifNode.length*size;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                for (let i = 0; i < needLoadDifNode.length; i++) {\n                    const nodeFlag2 = currentFlagInfo[2 * needLoadDifNode[i].index + 1]\n                    if (needLoadDifNode[i].gapFlag === 'NO') {\n                        if (nodeFlag2 === 0) {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[1], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[1]);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[2], needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[2]);\n                            }\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[2], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[2]);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(needLoadDifNode[i].yArray[1], needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(needLoadDifNode[i].yArray[1]);\n                            }\n                        }\n                    } else {\n                        if (nodeFlag2 === 0) {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[1], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[1]);\n\n                            nonUniformColObjs[preColIndex[i]].addFirstVal(needLoadDifNode[i].yArray[2], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[2]);\n\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(needLoadDifNode[i].yArray[2], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[2]);\n\n                            nonUniformColObjs[preColIndex[i]].addFirstVal(needLoadDifNode[i].yArray[1], needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(needLoadDifNode[i].yArray[1]);\n                        }\n                    }\n\n                }\n                break;\n            }\n            if (store.state.controlParams.progressive && drawer) {\n                drawer(nonUniformColObjs, \"progressive\")\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            // console.log(\"1\");\n            if (losedDataInfo.length > 0) {\n                // console.log(3);\n                await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this);\n            }\n            // console.log(\"2\");\n        }\n\n        // console.log(\"The time to get all coefficients:\" + (new Date().getTime() - startT));\n        for (let i = 0; i < nonUniformColObjs.length; i++) {\n            nonUniformColObjs[i].checkIsMis();\n        }\n        // console.log(\"Loaded Data Size:\", loadedDataSize);\n        return nonUniformColObjs;\n    }\n\n    async viewTransformFinal(otherDataManager: Array<LevelDataManager>, currentLevel: number, width: number, timeRange: Array<number>, yScale: any, drawer: any, transform_symbol:any){\n        const currentFlagInfo = getFlag(this.dataName);\n        // const currentFlagInfo = getFlag(\"custom_number8_test2_om3_test.flagz\");\n        if (currentFlagInfo === undefined) {\n            throw new Error(this.dataName + \" get flag faild\")\n        } else {\n            // console.log(\"flag info:\", currentFlagInfo);\n            // console.log(\"flag length:\", currentFlagInfo.length)\n        }\n        const currentFlagInfo2 = [];\n        const dataNames = [];\n        for(let i=0;i<otherDataManager.length;++i){\n            currentFlagInfo2.push(getFlag(otherDataManager[i].dataName));\n            dataNames.push(otherDataManager[i].dataName);\n            // const currentFlagInfo2 = getFlag(\"custom_number8_test1_om3_test.flagz\");\n            if (currentFlagInfo2[i] === undefined) {\n                throw new Error(otherDataManager[i].dataName + \" get flag faild\")\n            } else {\n                // console.log(\"flag2 info:\", currentFlagInfo2[i]);\n                // console.log(\"flag2 length:\", currentFlagInfo2[i].length)\n            }\n        }\n        // const currentFlagInfo = [0,1,1,0,1,0,0,1];\n        // const currentFlagInfo2 = [0,1,0,1,0,1,0,1];\n\n        allTimes = []\n        const nonUniformColObjs = computeTimeSE(currentLevel, width, timeRange, this.realDataRowNum, this.maxLevel);\n        let needLoadDifNode: Array<TrendTree> = [];\n        let needLoadDifNode2: Array<Array<TrendTree>> = new Array(otherDataManager.length).fill([]).map(() => new Array<TrendTree>());\n        let colIndex = 0;\n        let count_obj = {count: 0};\n\n        let total_time = 0;\n        let startT = new Date().getTime();\n        //假设对于dataset1\n        for(let i=0; i<this.levelIndexObjs[currentLevel].firstNodes.length; ++i){\n            const firstIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][0], this.maxLevel);\n            const lastIndexTimeRange = this.getIndexTime(currentLevel, this.levelIndexObjs[currentLevel].loadedDataRange[i][1], this.maxLevel);\n            let p = this.levelIndexObjs[currentLevel].firstNodes[i];\n            let p2 = [];\n            for(let k=0;k<otherDataManager.length;++k){\n                p2.push(otherDataManager[k].levelIndexObjs[currentLevel].firstNodes[i])\n            }\n            // let p2 = otherDataManager.levelIndexObjs[currentLevel].firstNodes[i];//测试\n            let data;\n            let resChild;\n            if (firstIndexTimeRange.startT <= timeRange[0] && lastIndexTimeRange.endT >= timeRange[1]) {\n                while(p != null){\n                    if(colIndex >= nonUniformColObjs.length){\n                        break;\n                    } \n                    const type = nonUniformColObjs[colIndex].isMissContain(p);\n                    let p2_temp = p2.slice();\n                    nonUniformColObjs[colIndex].containColumnRange2(p, p2_temp, type, transform_symbol);\n                    \n                    let start_t = new Date().getTime();\n                    nonUniformColObjs[colIndex].computeTransform(p, p2_temp, type, currentFlagInfo, currentFlagInfo2, transform_symbol, count_obj);\n                    let end_t = new Date().getTime();\n                    total_time += end_t - start_t;\n                    // nonUniformColObjs[colIndex].computeTransform(p, p2_temp,this.dataName, dataNames, this, otherDataManager, type, currentFlagInfo, currentFlagInfo2, transform_symbol);\n                    if(type === 1){\n                        p = p.nextSibling!;\n                        for(let k=0;k<otherDataManager.length;++k){\n                            p2[k] = p2[k].nextSibling!;\n                        }                        \n                    }\n                    else if(type === 2){\n                        needLoadDifNode.push(p);\n                        for(let k=0;k<otherDataManager.length;++k){\n                            needLoadDifNode2[k].push(p2[k]);\n                        } \n                        // needLoadDifNode2.push(p2);\n                        p = p.nextSibling!;\n                        for(let k=0;k<otherDataManager.length;++k){\n                            p2[k] = p2[k].nextSibling!;\n                        } \n                    }\n                    else if (type === 3) {\n                        colIndex++;\n                    } else if (type === 5) {\n                        p = p.nextSibling!;\n                        for(let k=0;k<otherDataManager.length;++k){\n                            p2[k] = p2[k].nextSibling!;\n                        } \n                    } else if (type === 6) {\n                        // throw new Error(\"error in viewchange\")\n                        break;\n                    } else {\n                        p = p.nextSibling!;\n                        for(let k=0;k<otherDataManager.length;++k){\n                            p2[k] = p2[k].nextSibling!;\n                        } \n                        //throw new Error(\"node time is little than col\");\n                    }\n                }\n            }\n            // console.log(\"count:\", count_obj.count);\n        }\n        \n        if(needLoadDifNode.length === 0){\n             return nonUniformColObjs;\n        }\n        // let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n        // if (losedDataInfo.length > 0) {\n        //     await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this);  //取得系数\n        //     for(let i=0; i<otherDataManager.length; i++)\n        //         await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, otherDataManager[i]);\n        // }\n\n        while (needLoadDifNode.length > 0) { //如果需要继续向下获取系数，则一直向下查询，直到最后一层\n            colIndex = 0;\n            const tempNeedLoadDifNodes = [];\n            const tempQue: Array<TrendTree> = [];\n            const tempNeedLoadDifNodes2 : Array<Array<TrendTree>> = new Array(otherDataManager.length).fill([]).map(() => new Array<TrendTree>());\n            const tempQue2: Array<Array<TrendTree>> = new Array(otherDataManager.length).fill([]).map(() => new Array<TrendTree>());\n\n            needLoadDifNode.forEach(v => {\n                // if (v._leftChild === null || v._rightChild === null) {\n                //     console.log(v)\n                //     console.log(this)\n                //     // debugger\n                //     // throw new Error(\"cannot find next level node\");\n                // }\n                if(v._leftChild != null && v._rightChild != null){\n                    this.lruCache.has(v._leftChild.level + \"_\" + v._leftChild.index);\n                    this.lruCache.has(v._rightChild.level + \"_\" + v._rightChild.index);\n                    if (v._leftChild.nodeType !== 'NULL') {\n                        tempQue.push(v._leftChild!);\n                    }\n                    if (v._rightChild.nodeType !== 'NULL') {\n                        tempQue.push(v._rightChild!);\n                    }\n                }\n            });\n            for(let i=0;i<needLoadDifNode2.length;++i){\n                needLoadDifNode2[i].forEach(v => {\n                    if(v._leftChild != null && v._rightChild != null){\n                        this.lruCache.has(v._leftChild.level + \"_\" + v._leftChild.index);\n                        this.lruCache.has(v._rightChild.level + \"_\" + v._rightChild.index);\n                        if (v._leftChild.nodeType !== 'NULL') {\n                            tempQue2[i].push(v._leftChild!);\n                        }\n                        if (v._rightChild.nodeType !== 'NULL') {\n                            tempQue2[i].push(v._rightChild!);\n                        }\n                    }\n                });\n            }\n            \n\n            const preColIndex = [];\n            for (let i = 0; i < tempQue.length; i++) {\n                if (colIndex >= nonUniformColObjs.length) {\n                    break;\n                    //throw new Error(\"col index out range\");\n                }\n                const type = nonUniformColObjs[colIndex].isMissContain(tempQue[i]);\n                \n                let tempQue3 = [];\n                for(let k=0;k<otherDataManager.length;++k){\n                    tempQue3.push(tempQue2[k][i]);\n                }\n                let array = tempQue3.slice();\n                nonUniformColObjs[colIndex].containColumnRange2(tempQue[i], array, type, transform_symbol);\n                // nonUniformColObjs[colIndex].computeTransform(tempQue[i], array, this.dataName, dataNames, this, otherDataManager, type, currentFlagInfo, currentFlagInfo2, transform_symbol);\n                let start_t = new Date().getTime(); \n                nonUniformColObjs[colIndex].computeTransform(tempQue[i], array, type, currentFlagInfo, currentFlagInfo2, transform_symbol, count_obj);\n                let end_t = new Date().getTime();\n                total_time += end_t - start_t;\n                if (type === 1) {\n                    continue;\n                } else if (type === 2) {\n                    tempNeedLoadDifNodes.push(tempQue[i]);\n                    for(let k=0;k<otherDataManager.length;++k){\n                        tempNeedLoadDifNodes2[k].push(array[k]);\n                    }\n                    // tempNeedLoadDifNodes2.push(tempQue2[i]);\n                    preColIndex.push(colIndex);\n                } else if (type === 3) {\n                    colIndex++;\n                    i--;\n                } else if (type === 6) {\n                    break;\n                } else {\n                    continue;\n                    // throw new Error(\"node time is little than col\");\n                }\n            }\n            if (preColIndex.length != tempNeedLoadDifNodes.length) {\n                throw new Error(\"cannot memory index\");\n            }\n\n            // for (let i = 0; i < tempNeedLoadDifNodes.length; i++) {\n            //     if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n            //         //判断是否可以剪枝\n            //         const con1 = canCut(tempNeedLoadDifNodes[i], nonUniformColObjs[preColIndex[i]], nonUniformColObjs[preColIndex[i] + 1], yScale);\n            //         if (con1) {\n            //             tempNeedLoadDifNodes.splice(i, 1)\n            //             preColIndex.splice(i, 1);\n            //         }\n            //     }\n            // }\n            ////this.checkMonotonicity(nonUniformColObjs,preColIndex,tempNeedLoadDifNodes);\n            needLoadDifNode = tempNeedLoadDifNodes;\n            needLoadDifNode2 = tempNeedLoadDifNodes2;\n            if (needLoadDifNode.length > 0 && needLoadDifNode[0].level === this.maxLevel - 1) {\n                if(transform_symbol === '+'){\n                    for (let i = 0; i < needLoadDifNode.length; i++) {\n                        let maxL = 0, maxR = 0;\n                        const nodeFlag1 = currentFlagInfo[2 * needLoadDifNode[i].index + 1];\n                        if(nodeFlag1 === 0){\n                            maxL += needLoadDifNode[i].yArray[1];\n                            maxR += needLoadDifNode[i].yArray[2];\n                        } \n                        else{\n                            maxL += needLoadDifNode[i].yArray[2];\n                            maxR += needLoadDifNode[i].yArray[1];\n                        }\n                        //const nodeFlag2 = currentFlagInfo2[2 * needLoadDifNode[i].index + 1];\n                        for(let k=0; k<currentFlagInfo2.length;++k){\n                            if(currentFlagInfo2[k][needLoadDifNode[i].index * 2 + 1] === 0){\n                                maxL += needLoadDifNode2[k][i].yArray[1];\n                                maxR += needLoadDifNode2[k][i].yArray[2];\n                            }\n                            else{\n                                maxL += needLoadDifNode2[k][i].yArray[2];\n                                maxR += needLoadDifNode2[k][i].yArray[1];\n                            }\n                        }\n                        // let sumOfOtherMin = 0, sumOfOtherMax = 0;\n                        // for(let k=0;k<otherDataManager.length;++k){\n                        //     sumOfOtherMin += needLoadDifNode2[k][i].yArray[1];\n                        //     sumOfOtherMax += needLoadDifNode2[k][i].yArray[2];\n                        // }\n                        if (needLoadDifNode[i].gapFlag === 'NO') {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                            }\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                        }\n                        \n                    }\n                }\n                else if(transform_symbol === '-'){\n                    for (let i = 0; i < needLoadDifNode.length; i++) {\n                        let maxL = 0, maxR = 0;\n                        const nodeFlag1 = currentFlagInfo[2 * needLoadDifNode[i].index + 1];\n                        if(nodeFlag1 === 0){\n                            maxL += needLoadDifNode[i].yArray[1];\n                            maxR += needLoadDifNode[i].yArray[2];\n                        } \n                        else{\n                            maxL += needLoadDifNode[i].yArray[2];\n                            maxR += needLoadDifNode[i].yArray[1];\n                        }\n                        //const nodeFlag2 = currentFlagInfo2[2 * needLoadDifNode[i].index + 1];\n                        for(let k=0; k<currentFlagInfo2.length;++k){\n                            if(currentFlagInfo2[k][needLoadDifNode[i].index * 2 + 1] === 0){\n                                maxL -= needLoadDifNode2[k][i].yArray[1];\n                                maxR -= needLoadDifNode2[k][i].yArray[2];\n                            }\n                            else{\n                                maxL -= needLoadDifNode2[k][i].yArray[2];\n                                maxR -= needLoadDifNode2[k][i].yArray[1];\n                            }\n                        }\n                        if (needLoadDifNode[i].gapFlag === 'NO') {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                            }\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                        }\n                        \n                    }\n                }\n                else if(transform_symbol === '*'){\n                    for (let i = 0; i < needLoadDifNode.length; i++) {\n                        let maxL = 0, maxR = 0;\n                        const nodeFlag1 = currentFlagInfo[2 * needLoadDifNode[i].index + 1];\n                        if(nodeFlag1 === 0){\n                            maxL += needLoadDifNode[i].yArray[1];\n                            maxR += needLoadDifNode[i].yArray[2];\n                        } \n                        else{\n                            maxL += needLoadDifNode[i].yArray[2];\n                            maxR += needLoadDifNode[i].yArray[1];\n                        }\n                        //const nodeFlag2 = currentFlagInfo2[2 * needLoadDifNode[i].index + 1];\n                        for(let k=0; k<currentFlagInfo2.length;++k){\n                            if(currentFlagInfo2[k][needLoadDifNode[i].index * 2 + 1] === 0){\n                                maxL *= needLoadDifNode2[k][i].yArray[1];\n                                maxR *= needLoadDifNode2[k][i].yArray[2];\n                            }\n                            else{\n                                maxL *= needLoadDifNode2[k][i].yArray[2];\n                                maxR *= needLoadDifNode2[k][i].yArray[1];\n                            }\n                        }\n                        if (needLoadDifNode[i].gapFlag === 'NO') {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                            }\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                        }\n                        \n                    }\n                }\n                else if(transform_symbol === '/'){\n                    for (let i = 0; i < needLoadDifNode.length; i++) {\n                        let maxL = 0, maxR = 0;\n                        const nodeFlag1 = currentFlagInfo[2 * needLoadDifNode[i].index + 1];\n                        if(nodeFlag1 === 0){\n                            maxL += needLoadDifNode[i].yArray[1];\n                            maxR += needLoadDifNode[i].yArray[2];\n                        } \n                        else{\n                            maxL += needLoadDifNode[i].yArray[2];\n                            maxR += needLoadDifNode[i].yArray[1];\n                        }\n                        //const nodeFlag2 = currentFlagInfo2[2 * needLoadDifNode[i].index + 1];\n                        for(let k=0; k<currentFlagInfo2.length;++k){\n                            if(currentFlagInfo2[k][needLoadDifNode[i].index * 2 + 1] === 0){\n                                maxL /= needLoadDifNode2[k][i].yArray[1];\n                                maxR /= needLoadDifNode2[k][i].yArray[2];\n                            }\n                            else{\n                                maxL /= needLoadDifNode2[k][i].yArray[2];\n                                maxR /= needLoadDifNode2[k][i].yArray[1];\n                            }\n                        }\n                        if (needLoadDifNode[i].gapFlag === 'NO') {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n                            if (preColIndex[i] + 1 < nonUniformColObjs.length) {\n                                nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                                nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                            }\n                        } else {\n                            nonUniformColObjs[preColIndex[i]].addLastVal(maxL, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i]].forceMerge(maxL);\n\n                            nonUniformColObjs[preColIndex[i] + 1].addFirstVal(maxR, needLoadDifNode[i]);\n                            nonUniformColObjs[preColIndex[i] + 1].forceMerge(maxR);\n                        }\n                        \n                    }\n                }\n                break;\n            }\n            if (needLoadDifNode.length === 0) {\n                break;\n            }\n            // if(needLoadDifNode.length === 0 || needLoadDifNode[0].level === this.maxLevel - 1){\n            //     break;\n            // }\n\n            // let losedDataInfo = computeLosedDataRangeV1(needLoadDifNode);\n            // if (losedDataInfo.length > 0) {\n            //     await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, this); //每一层都需要判断子节点是否需要获取，需要的话要从数据库获取系数\n            //     for(let i=0; i<otherDataManager.length; i++)\n            //         await batchLoadDataForRangeLevel1MinMaxMiss(losedDataInfo, otherDataManager[i]); \n            // }\n\n        }\n\n        // console.log(\"The time to get all coefficients:\" + (new Date().getTime() - startT));\n        console.log(\"The final count:\", count_obj.count);\n        // console.log(\"The time to get total coefficients:\", total_time);\n        console.log(\"The time to get total coefficients:\", new Date().getTime() - startT);\n\n        let maxValue = -Infinity, minValue = Infinity, finalValue = 0;\n        for (let i = 0; i < nonUniformColObjs.length; i++) {\n            nonUniformColObjs[i].checkIsMis();\n            if(transform_symbol === '+'){\n                maxValue = Math.max(maxValue, nonUniformColObjs[i].addMax[1]);\n                minValue = Math.min(minValue, nonUniformColObjs[i].addMin[1]);\n                // maxValue = 2000;\n                // minValue = 2000;\n            }\n            else if(transform_symbol === '-'){\n                maxValue = Math.max(maxValue, nonUniformColObjs[i].subMax[1]);\n                minValue = Math.min(minValue, nonUniformColObjs[i].subMin[1]);\n                // maxValue = 1000;\n                // minValue = -2000;\n            }\n            else if(transform_symbol === '*'){\n                maxValue = Math.max(maxValue, nonUniformColObjs[i].multiMax[1]);\n                minValue = Math.min(minValue, nonUniformColObjs[i].multiMin[1]);\n            }\n            else if(transform_symbol === '/'){\n                maxValue = Math.max(maxValue, nonUniformColObjs[i].divMax[1]);\n                minValue = Math.min(minValue, nonUniformColObjs[i].divMin[1]);\n            }\n            else if(transform_symbol === 'avg'){\n                maxValue = Math.max(maxValue, nonUniformColObjs[i].addMax[1]);\n                minValue = Math.min(minValue, nonUniformColObjs[i].addMin[1]);\n            }\n            finalValue = Math.max(Math.abs(maxValue), Math.abs(minValue));\n        }\n        const myDict: { a: NoUniformColObj[]; b: number; } = {\n            a: nonUniformColObjs,\n            b: finalValue\n        }\n        return myDict;\n    }\n\n}\n\n"],"mappings":"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","ignoreList":[]}]}