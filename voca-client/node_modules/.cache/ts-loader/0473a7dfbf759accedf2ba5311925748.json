{"remainingRequest":"/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/babel-loader/lib/index.js!/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/ts-loader/index.js??ref--15-2!/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/ai/didi01/zhanglingyu/om3-extend/om3-client/src/api/build_tree.ts","dependencies":[{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/src/api/build_tree.ts","mtime":1732546288000},{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/babel.config.js","mtime":1732546288000},{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js","mtime":1732627998000},{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/babel-loader/lib/index.js","mtime":1732627998000},{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/ts-loader/index.js","mtime":1732627997000},{"path":"/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/eslint-loader/index.js","mtime":1732627997000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzIjsKaW1wb3J0IHsgYmF0Y2hMb2FkRGlmV2lkdGhQb3N0UmF3TWluTWF4LCBsb2FkRGlmLCBiYXRjaExvYWREaWZXaWR0aFBvc3QsIGJhdGNoTG9hZERpZldpZHRoUG9zdDEsIGJhdGNoTG9hZE1pbk1heE1pc3NXaXRoV3MsIGJhdGNoTG9hZFdpdGhXcywgYmF0Y2hMb2FkRGlmV2lkdGhQb3N0Rm9yTWluTWF4TWlzcywgYmF0Y2hMb2FkTWluTWF4TWlzc1dpdGhQb3N0Rm9yTXVsdGlMaW5lVHlwZSB9IGZyb20gIi4vbG9hZF9kYXRhIjsKaW1wb3J0IExldmVsSW5kZXhPYmogZnJvbSAiLi4vbW9kZWwvbGV2ZWwtaW5kZXgtb2JqIjsKaW1wb3J0IFRyZW5kVHJlZSBmcm9tICJAL2hlbHBlci90ZW5kLXF1ZXJ5LXRyZWUiOwppbXBvcnQgc3RvcmUgZnJvbSAiQC9zdG9yZSI7CmxldCBub2RlTnVtID0gW107CmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXRjaExvYWREYXRhRm9yUmFuZ2VMZXZlbDEobG9zZWRSYW5nZSwgbWFuYWdlcikgewogIGNvbnN0IGRpZlZhbHMgPSBhd2FpdCBiYXRjaExvYWREaWZXaWR0aFBvc3QxKGxvc2VkUmFuZ2UsIG1hbmFnZXIpOwogIGxldCBjb3VudCA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb3NlZFJhbmdlLmxlbmd0aDsgaSsrKSB7CiAgICBjb25zdCBsZXZlbFJhbmdlID0gbG9zZWRSYW5nZVtpXTsKICAgIGNvbnN0IHN0YXJ0Tm9kZSA9IG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0uZ2V0VHJlZU5vZGVTdGFydEluZGV4KGxvc2VkUmFuZ2VbaV1bMV0pOwogICAgbGV0IHAgPSBzdGFydE5vZGU7CiAgICBjb25zdCBuZXdUcmVlTm9kZSA9IFtdOwogICAgZm9yIChsZXQgaiA9IGxvc2VkUmFuZ2VbaV1bMV07IGogPD0gbG9zZWRSYW5nZVtpXVsyXTsgaisrKSB7CiAgICAgIHZhciBfcDsKICAgICAgaWYgKCgoX3AgPSBwKSA9PT0gbnVsbCB8fCBfcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AuaW5kZXgpID09PSBqICYmIGogPT09IGRpZlZhbHNbY291bnRdLmkgJiYgcC5sZXZlbCA9PT0gZGlmVmFsc1tjb3VudF0ubCkgewogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIHAuZGlmZmVyZW5jZSA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICBjb25zdCB5QXJyYXkxID0gWzAsIDAsIDAsIDAsIDBdOwogICAgICAgIGNvbnN0IHlBcnJheTIgPSBbMCwgMCwgMCwgMCwgMF07CiAgICAgICAgeUFycmF5MVswXSA9IHAueUFycmF5WzBdOwogICAgICAgIHlBcnJheTJbMF0gPSBwLnlBcnJheVswXSAtIHAuZGlmZmVyZW5jZVswXTsKICAgICAgICAvLyB5QXJyYXkxWzNdID0gcC55QXJyYXlbM10gKyBwLmRpZmZlcmVuY2UhWzNdOwogICAgICAgIC8vIHlBcnJheTJbM10gPSBwLnlBcnJheVszXTsKICAgICAgICB5QXJyYXkxWzRdID0gcC55QXJyYXlbNF0gKyBwLmRpZmZlcmVuY2VbNF07CiAgICAgICAgeUFycmF5Mls0XSA9IHAueUFycmF5WzRdOwogICAgICAgIGlmIChwLmRpZmZlcmVuY2VbMV0gPCAwKSB7CiAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0gLSBwLmRpZmZlcmVuY2VbMV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICB9CiAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsyXSA8IDApIHsKICAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXSArIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdIC0gcC5kaWZmZXJlbmNlWzJdOwogICAgICAgIH0KICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzNdIDw9IDAgfHwgcC5kaWZmZXJlbmNlWzNdID49IDApIHsKICAgICAgICAgIHlBcnJheTFbM10gPSAocC55QXJyYXlbM10gKiAyICsgcC5kaWZmZXJlbmNlWzNdKSAvIDI7CiAgICAgICAgICB5QXJyYXkyWzNdID0gKHAueUFycmF5WzNdICogMiAtIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXJzdE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIHRydWUsIHAuaW5kZXgsIHlBcnJheTEsIG51bGwpOwogICAgICAgIGNvbnN0IHNlY29uZE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIGZhbHNlLCBwLmluZGV4LCB5QXJyYXkyLCBudWxsKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKGZpcnN0Tm9kZSk7CiAgICAgICAgbmV3VHJlZU5vZGUucHVzaChzZWNvbmROb2RlKTsKICAgICAgICBtYW5hZ2VyLmNhY2hlTWFwLnNldChmaXJzdE5vZGUuaW5kZXgsIGZpcnN0Tm9kZSk7CiAgICAgICAgbWFuYWdlci5jYWNoZU1hcC5zZXQoc2Vjb25kTm9kZS5pbmRleCwgc2Vjb25kTm9kZSk7CiAgICAgICAgcCA9IHAubmV4dFNpYmxpbmc7CiAgICAgICAgY291bnQrKzsKICAgICAgICBpZiAocCA9PT0gbnVsbCB8fCBjb3VudCA+PSBkaWZWYWxzLmxlbmd0aCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfcDI7CiAgICAgICAgY29uc29sZS5sb2cobG9zZWRSYW5nZVtpXVswXSAtIDEsIE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpKTsKICAgICAgICBjb25zb2xlLmxvZygibG9zZSByYW5nZToiLCBsb3NlZFJhbmdlLCBwLCAoX3AyID0gcCkgPT09IG51bGwgfHwgX3AyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcDIuaW5kZXgsIGopOwogICAgICAgIGNvbnNvbGUubG9nKG1hbmFnZXIubGV2ZWxJbmRleE9ianMpOwogICAgICAgIGRlYnVnZ2VyOwogICAgICAgIHRocm93IG5ldyBFcnJvcigiZGlmIG5vdCBtYXRjaCBub2RlIik7CiAgICAgIH0KICAgIH0KICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3VHJlZU5vZGUubGVuZ3RoIC0gMTsgaisrKSB7CiAgICAgIG5ld1RyZWVOb2RlW2pdLm5leHRTaWJsaW5nID0gbmV3VHJlZU5vZGVbaiArIDFdOwogICAgICBuZXdUcmVlTm9kZVtqICsgMV0ucHJldmlvdXNTaWJsaW5nID0gbmV3VHJlZU5vZGVbal07CiAgICAgIGlmIChuZXdUcmVlTm9kZVtqXS5pbmRleCAhPSBuZXdUcmVlTm9kZVtqICsgMV0uaW5kZXggLSAxKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJzaWJsaW5nIGluZGV4IGVycm9yIik7CiAgICAgIH0KICAgIH0KICAgIGlmIChtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXSkgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0gZWxzZSB7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXSArIDFdID0gbmV3IExldmVsSW5kZXhPYmoobG9zZWRSYW5nZVtpXVswXSArIDEsIGZhbHNlKTsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9CiAgfQp9CmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXRjaExvYWREYXRhRm9yUmFuZ2VMZXZlbChsb3NlZFJhbmdlLCBtYW5hZ2VyKSB7CiAgY29uc3QgZGlmVmFscyA9IGF3YWl0IGJhdGNoTG9hZERpZldpZHRoUG9zdChsb3NlZFJhbmdlLCBtYW5hZ2VyKTsKICBsZXQgY291bnQgPSAwOwogIGxldCBub2RlTnVtID0gMDsKICBmb3IgKGxldCBpID0gMDsgaSA8IGxvc2VkUmFuZ2UubGVuZ3RoOyBpKyspIHsKICAgIGNvbnN0IGxldmVsUmFuZ2UgPSBsb3NlZFJhbmdlW2ldOwogICAgY29uc3Qgc3RhcnROb2RlID0gbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdIC0gMV0uZ2V0VHJlZU5vZGVTdGFydEluZGV4KE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpKTsKICAgIGxldCBwID0gc3RhcnROb2RlOwogICAgY29uc3QgbmV3VHJlZU5vZGUgPSBbXTsKICAgIGZvciAobGV0IGogPSBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKTsgaiA8PSBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMl0gLyAyKTsgaisrKSB7CiAgICAgIHZhciBfcDM7CiAgICAgIGlmICgoKF9wMyA9IHApID09PSBudWxsIHx8IF9wMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AzLmluZGV4KSA9PT0gaiAmJiBqID09PSBkaWZWYWxzW2NvdW50XS5pICYmIHAubGV2ZWwgPT09IGRpZlZhbHNbY291bnRdLmwpIHsKICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICBwLmRpZmZlcmVuY2UgPSBkaWZWYWxzW2NvdW50XS5kaWY7CiAgICAgICAgLy8gY29uc3QgeUFycmF5MTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMCwgMCwgMF0KICAgICAgICAvLyBjb25zdCB5QXJyYXkyOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFswLCAwLCAwLCAwXQogICAgICAgIC8vIHlBcnJheTFbMF0gPSBwLnlBcnJheVswXTsKICAgICAgICAvLyB5QXJyYXkyWzBdID0gcC55QXJyYXlbMF0gLSBwLmRpZmZlcmVuY2UhWzBdOwogICAgICAgIC8vIHlBcnJheTFbM10gPSBwLnlBcnJheVszXSArIHAuZGlmZmVyZW5jZSFbM107CiAgICAgICAgLy8geUFycmF5MlszXSA9IHAueUFycmF5WzNdOwogICAgICAgIC8vIGlmIChwLmRpZmZlcmVuY2UhWzFdIDwgMCkgewogICAgICAgIC8vICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgLy8gICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXSAtIHAuZGlmZmVyZW5jZSFbMV07CiAgICAgICAgLy8gfSBlbHNlIHsKICAgICAgICAvLyAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdICsgcC5kaWZmZXJlbmNlIVsxXTsKICAgICAgICAvLyAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdCiAgICAgICAgLy8gfQogICAgICAgIC8vIGlmIChwLmRpZmZlcmVuY2UhWzJdIDwgMCkgewogICAgICAgIC8vICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl0gKyBwLmRpZmZlcmVuY2UhWzJdOwogICAgICAgIC8vICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gfSBlbHNlIHsKICAgICAgICAvLyAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdOwogICAgICAgIC8vICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl0gLSBwLmRpZmZlcmVuY2UhWzJdOwogICAgICAgIC8vIH0KICAgICAgICAvLyBjb25zdCBmaXJzdE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIHRydWUsIHAuaW5kZXgsIHlBcnJheTEsIG51bGwpOwogICAgICAgIC8vIGNvbnN0IHNlY29uZE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIGZhbHNlLCBwLmluZGV4LCB5QXJyYXkyLCBudWxsKTsKICAgICAgICBjb25zdCB5QXJyYXkxID0gWzAsIDAsIDAsIDAsIDBdOwogICAgICAgIGNvbnN0IHlBcnJheTIgPSBbMCwgMCwgMCwgMCwgMF07CiAgICAgICAgeUFycmF5MVswXSA9IHAueUFycmF5WzBdOwogICAgICAgIHlBcnJheTJbMF0gPSBwLnlBcnJheVswXSAtIHAuZGlmZmVyZW5jZVswXTsKICAgICAgICAvLyB5QXJyYXkxWzNdID0gcC55QXJyYXlbM10gKyBwLmRpZmZlcmVuY2UhWzNdOwogICAgICAgIC8vIHlBcnJheTJbM10gPSBwLnlBcnJheVszXTsKICAgICAgICB5QXJyYXkxWzRdID0gcC55QXJyYXlbNF0gKyBwLmRpZmZlcmVuY2VbNF07CiAgICAgICAgeUFycmF5Mls0XSA9IHAueUFycmF5WzRdOwogICAgICAgIGlmIChwLmRpZmZlcmVuY2VbMV0gPCAwKSB7CiAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0gLSBwLmRpZmZlcmVuY2VbMV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICB9CiAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsyXSA8IDApIHsKICAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXSArIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdIC0gcC5kaWZmZXJlbmNlWzJdOwogICAgICAgIH0KICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzNdIDw9IDAgfHwgcC5kaWZmZXJlbmNlWzNdID49IDApIHsKICAgICAgICAgIHlBcnJheTFbM10gPSAocC55QXJyYXlbM10gKiAyICsgcC5kaWZmZXJlbmNlWzNdKSAvIDI7CiAgICAgICAgICB5QXJyYXkyWzNdID0gKHAueUFycmF5WzNdICogMiAtIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXJzdE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIHRydWUsIHAuaW5kZXgsIHlBcnJheTEsIG51bGwpOwogICAgICAgIGNvbnN0IHNlY29uZE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIGZhbHNlLCBwLmluZGV4LCB5QXJyYXkyLCBudWxsKTsKICAgICAgICBtYW5hZ2VyLmNhY2hlTWFwLnNldChmaXJzdE5vZGUuaW5kZXgsIGZpcnN0Tm9kZSk7CiAgICAgICAgbWFuYWdlci5jYWNoZU1hcC5zZXQoc2Vjb25kTm9kZS5pbmRleCwgc2Vjb25kTm9kZSk7CiAgICAgICAgbm9kZU51bSArPSAyOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goZmlyc3ROb2RlKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKHNlY29uZE5vZGUpOwogICAgICAgIHAgPSBwLm5leHRTaWJsaW5nOwogICAgICAgIGNvdW50Kys7CiAgICAgICAgaWYgKHAgPT09IG51bGwgfHwgY291bnQgPj0gZGlmVmFscy5sZW5ndGgpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgX3A0OwogICAgICAgIGNvbnNvbGUubG9nKGxvc2VkUmFuZ2VbaV1bMF0gLSAxLCBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKSk7CiAgICAgICAgY29uc29sZS5sb2coImxvc2UgcmFuZ2U6IiwgbG9zZWRSYW5nZSwgcCwgKF9wNCA9IHApID09PSBudWxsIHx8IF9wNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3A0LmluZGV4LCBqKTsKICAgICAgICBjb25zb2xlLmxvZyhtYW5hZ2VyLmxldmVsSW5kZXhPYmpzKTsKICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImRpZiBub3QgbWF0Y2ggbm9kZSIpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld1RyZWVOb2RlLmxlbmd0aCAtIDE7IGorKykgewogICAgICBuZXdUcmVlTm9kZVtqXS5uZXh0U2libGluZyA9IG5ld1RyZWVOb2RlW2ogKyAxXTsKICAgICAgbmV3VHJlZU5vZGVbaiArIDFdLnByZXZpb3VzU2libGluZyA9IG5ld1RyZWVOb2RlW2pdOwogICAgICBpZiAobmV3VHJlZU5vZGVbal0uaW5kZXggIT0gbmV3VHJlZU5vZGVbaiArIDFdLmluZGV4IC0gMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigic2libGluZyBpbmRleCBlcnJvciIpOwogICAgICB9CiAgICAgIGNvbnN0IGsxID0gbmV3VHJlZU5vZGVbaiArIDFdLnlBcnJheVsyXSAtIG5ld1RyZWVOb2RlW2pdLnlBcnJheVsxXTsKICAgICAgY29uc3QgazIgPSBuZXdUcmVlTm9kZVtqICsgMV0ueUFycmF5WzFdIC0gbmV3VHJlZU5vZGVbal0ueUFycmF5WzJdOwogICAgICBuZXdUcmVlTm9kZVtqXS50cmVuZFJhbmdlID0gazEgPCBrMiA/IFtuZXdUcmVlTm9kZVtqICsgMV0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqXS55QXJyYXlbMV0sIG5ld1RyZWVOb2RlW2ogKyAxXS55QXJyYXlbMV0sIG5ld1RyZWVOb2RlW2pdLnlBcnJheVsyXV0gOiBbbmV3VHJlZU5vZGVbaiArIDFdLnlBcnJheVsxXSwgbmV3VHJlZU5vZGVbal0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqICsgMV0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqXS55QXJyYXlbMV1dOwogICAgfQogICAgaWYgKG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0pIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0gZWxzZSB7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0gPSBuZXcgTGV2ZWxJbmRleE9iaihsb3NlZFJhbmdlW2ldWzBdLCBmYWxzZSk7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9CiAgICAvLyBtYW5hZ2VyLnVwZGF0ZURhdGFDYWNoZUZvclJhbmdlKG5ld1RyZWVOb2RlWzBdLmxldmVsLCBuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXgpCiAgfQogIG1hbmFnZXIuYWRkTm9kZU51bShub2RlTnVtKTsKfQpleHBvcnQgYXN5bmMgZnVuY3Rpb24gYmF0Y2hMb2FkRGF0YUZvclJhbmdlTGV2ZWxSYXdNaW5NYXgobG9zZWRSYW5nZSwgbWFuYWdlcikgewogIGNvbnN0IGRpZlZhbHMgPSBhd2FpdCBiYXRjaExvYWREaWZXaWR0aFBvc3RSYXdNaW5NYXgobG9zZWRSYW5nZSwgbWFuYWdlcik7CiAgLy8gZGVidWdnZXIKICBsZXQgY291bnQgPSAwOwogIGxldCBub2RlTnVtID0gMDsKICBmb3IgKGxldCBpID0gMDsgaSA8IGxvc2VkUmFuZ2UubGVuZ3RoOyBpKyspIHsKICAgIC8vZGVidWdnZXIKICAgIGNvbnN0IGxldmVsUmFuZ2UgPSBsb3NlZFJhbmdlW2ldOwogICAgY29uc3Qgc3RhcnROb2RlID0gbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdIC0gMV0uZ2V0VHJlZU5vZGVTdGFydEluZGV4KE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpKTsKICAgIGxldCBwID0gc3RhcnROb2RlOwogICAgY29uc3QgbmV3VHJlZU5vZGUgPSBbXTsKICAgIGZvciAobGV0IGogPSBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKTsgaiA8PSBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMl0gLyAyKTsgaisrKSB7CiAgICAgIHZhciBfcDU7CiAgICAgIGlmICgoKF9wNSA9IHApID09PSBudWxsIHx8IF9wNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3A1LmluZGV4KSA9PT0gaiAmJiAyICogaiA9PT0gZGlmVmFsc1tjb3VudF0uaSAmJiBwLmxldmVsICsgMSA9PT0gZGlmVmFsc1tjb3VudF0ubCkgewogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIHAuZGlmZmVyZW5jZSA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICAvLyBjb25zdCB5QXJyYXkxOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IGRpZlZhbHNbY291bnRdLmRpZgogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIC8vIGNvbnN0IHlBcnJheTI6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdID0gZGlmVmFsc1tjb3VudCsxXS5kaWYKICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICBjb25zdCB5QXJyYXkxID0gZGlmVmFsc1tjb3VudF0uZGlmOwogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIGNvbnN0IHlBcnJheTIgPSBkaWZWYWxzW2NvdW50ICsgMV0uZGlmOwogICAgICAgIGNvbnN0IGZpcnN0Tm9kZSA9IG5ldyBUcmVuZFRyZWUocCwgdHJ1ZSwgcC5pbmRleCwgeUFycmF5MSwgbnVsbCk7CiAgICAgICAgY29uc3Qgc2Vjb25kTm9kZSA9IG5ldyBUcmVuZFRyZWUocCwgZmFsc2UsIHAuaW5kZXgsIHlBcnJheTIsIG51bGwpOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goZmlyc3ROb2RlKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKHNlY29uZE5vZGUpOwogICAgICAgIHAgPSBwLm5leHRTaWJsaW5nOwogICAgICAgIGNvdW50ICs9IDI7CiAgICAgICAgaWYgKHAgPT09IG51bGwgfHwgY291bnQgPj0gZGlmVmFscy5sZW5ndGgpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgX3A2OwogICAgICAgIGNvbnNvbGUubG9nKGxvc2VkUmFuZ2VbaV1bMF0gLSAxLCBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKSk7CiAgICAgICAgY29uc29sZS5sb2coImxvc2UgcmFuZ2U6IiwgbG9zZWRSYW5nZSwgcCwgKF9wNiA9IHApID09PSBudWxsIHx8IF9wNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3A2LmluZGV4LCBqKTsKICAgICAgICBjb25zb2xlLmxvZyhtYW5hZ2VyLmxldmVsSW5kZXhPYmpzKTsKICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImRpZiBub3QgbWF0Y2ggbm9kZSIpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld1RyZWVOb2RlLmxlbmd0aCAtIDE7IGorKykgewogICAgICBuZXdUcmVlTm9kZVtqXS5uZXh0U2libGluZyA9IG5ld1RyZWVOb2RlW2ogKyAxXTsKICAgICAgbmV3VHJlZU5vZGVbaiArIDFdLnByZXZpb3VzU2libGluZyA9IG5ld1RyZWVOb2RlW2pdOwogICAgICBpZiAobmV3VHJlZU5vZGVbal0uaW5kZXggIT0gbmV3VHJlZU5vZGVbaiArIDFdLmluZGV4IC0gMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigic2libGluZyBpbmRleCBlcnJvciIpOwogICAgICB9CiAgICB9CiAgICBpZiAobWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXSkgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF1dLmFkZExvYWRlZERhdGFSYW5nZShuZXdUcmVlTm9kZVswXSwgW25ld1RyZWVOb2RlWzBdLmluZGV4LCBuZXdUcmVlTm9kZVtuZXdUcmVlTm9kZS5sZW5ndGggLSAxXS5pbmRleF0pOwogICAgfSBlbHNlIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXSA9IG5ldyBMZXZlbEluZGV4T2JqKGxvc2VkUmFuZ2VbaV1bMF0sIGZhbHNlKTsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0KICAgIC8vIG1hbmFnZXIudXBkYXRlRGF0YUNhY2hlRm9yUmFuZ2UobmV3VHJlZU5vZGVbMF0ubGV2ZWwsIG5ld1RyZWVOb2RlWzBdLmluZGV4LCBuZXdUcmVlTm9kZVtuZXdUcmVlTm9kZS5sZW5ndGggLSAxXS5pbmRleCkKICB9CiAgbWFuYWdlci5hZGROb2RlTnVtKG5vZGVOdW0pOwp9CmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkRGF0YUZvclJhbmdlTGV2ZWwobG9zZWRSYW5nZSwgbWFuYWdlcikgewogIGlmIChsb3NlZFJhbmdlLmxlbmd0aCA8PSAwKSB7CiAgICByZXR1cm47CiAgfQogIGxldCBub2RlTnVtID0gMDsKICAvL2F3YWl0IG1hbmFnZXIuYmF0Y2hMb2FkRGF0YUZvclJhbmdlTGV2ZWwobG9zZWRSYW5nZSkKICBmb3IgKGxldCBpID0gbG9zZWRSYW5nZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgY29uc3QgbGV2ZWxSYW5nZSA9IGxvc2VkUmFuZ2VbaV07CiAgICBjb25zdCBkaWZWYWwgPSBhd2FpdCBsb2FkRGlmKGxvc2VkUmFuZ2VbaV1bMF0gLSAxLCBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKSwgTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzJdIC8gMikpOwogICAgY29uc3Qgc3RhcnROb2RlID0gbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdIC0gMV0uZ2V0VHJlZU5vZGVTdGFydEluZGV4KE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpKTsKICAgIGxldCBwID0gc3RhcnROb2RlOwogICAgY29uc3QgbmV3VHJlZU5vZGUgPSBbXTsKICAgIGxldCBjb3VudCA9IDA7CiAgICBmb3IgKGxldCBqID0gTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzFdIC8gMik7IGogPD0gTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzJdIC8gMik7IGorKykgewogICAgICB2YXIgX3A3OwogICAgICBpZiAoKChfcDcgPSBwKSA9PT0gbnVsbCB8fCBfcDcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wNy5pbmRleCkgPT09IGopIHsKICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICBwLmRpZmZlcmVuY2UgPSBkaWZWYWxbY291bnRdOwogICAgICAgIC8vIGNvbnN0IHlBcnJheTE6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdID0gWzAsIDAsIDAsIDBdCiAgICAgICAgLy8gY29uc3QgeUFycmF5MjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMCwgMCwgMF0KICAgICAgICAvLyB5QXJyYXkxWzBdID0gcC55QXJyYXlbMF07CiAgICAgICAgLy8geUFycmF5MlswXSA9IHAueUFycmF5WzBdIC0gcC5kaWZmZXJlbmNlIVswXTsKICAgICAgICAvLyB5QXJyYXkxWzNdID0gcC55QXJyYXlbM10gKyBwLmRpZmZlcmVuY2UhWzNdOwogICAgICAgIC8vIHlBcnJheTJbM10gPSBwLnlBcnJheVszXTsKICAgICAgICAvLyBpZiAocC5kaWZmZXJlbmNlIVsxXSA8IDApIHsKICAgICAgICAvLyAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgIC8vICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0gLSBwLmRpZmZlcmVuY2UhWzFdOwogICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgLy8gICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZSFbMV07CiAgICAgICAgLy8gICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXQogICAgICAgIC8vIH0KICAgICAgICAvLyBpZiAocC5kaWZmZXJlbmNlIVsyXSA8IDApIHsKICAgICAgICAvLyAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdICsgcC5kaWZmZXJlbmNlIVsyXTsKICAgICAgICAvLyAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgLy8gICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAvLyAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdIC0gcC5kaWZmZXJlbmNlIVsyXTsKICAgICAgICAvLyB9CiAgICAgICAgY29uc3QgeUFycmF5MSA9IFswLCAwLCAwLCAwLCAwXTsKICAgICAgICBjb25zdCB5QXJyYXkyID0gWzAsIDAsIDAsIDAsIDBdOwogICAgICAgIHlBcnJheTFbMF0gPSBwLnlBcnJheVswXTsKICAgICAgICB5QXJyYXkyWzBdID0gcC55QXJyYXlbMF0gLSBwLmRpZmZlcmVuY2VbMF07CiAgICAgICAgLy8geUFycmF5MVszXSA9IHAueUFycmF5WzNdICsgcC5kaWZmZXJlbmNlIVszXTsKICAgICAgICAvLyB5QXJyYXkyWzNdID0gcC55QXJyYXlbM107CiAgICAgICAgeUFycmF5MVs0XSA9IHAueUFycmF5WzRdICsgcC5kaWZmZXJlbmNlWzRdOwogICAgICAgIHlBcnJheTJbNF0gPSBwLnlBcnJheVs0XTsKICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzFdIDwgMCkgewogICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdIC0gcC5kaWZmZXJlbmNlWzFdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV0gKyBwLmRpZmZlcmVuY2VbMV07CiAgICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgfQogICAgICAgIGlmIChwLmRpZmZlcmVuY2VbMl0gPCAwKSB7CiAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl0gKyBwLmRpZmZlcmVuY2VbMl07CiAgICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXSAtIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICB9CiAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVszXSA8PSAwIHx8IHAuZGlmZmVyZW5jZVszXSA+PSAwKSB7CiAgICAgICAgICB5QXJyYXkxWzNdID0gKHAueUFycmF5WzNdICogMiArIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgICAgeUFycmF5MlszXSA9IChwLnlBcnJheVszXSAqIDIgLSBwLmRpZmZlcmVuY2VbM10pIC8gMjsKICAgICAgICB9CiAgICAgICAgY29uc3QgZmlyc3ROb2RlID0gbmV3IFRyZW5kVHJlZShwLCB0cnVlLCBwLmluZGV4LCB5QXJyYXkxLCBudWxsKTsKICAgICAgICBjb25zdCBzZWNvbmROb2RlID0gbmV3IFRyZW5kVHJlZShwLCBmYWxzZSwgcC5pbmRleCwgeUFycmF5MiwgbnVsbCk7CiAgICAgICAgbmV3VHJlZU5vZGUucHVzaChmaXJzdE5vZGUpOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goc2Vjb25kTm9kZSk7CiAgICAgICAgbWFuYWdlci5jYWNoZU1hcC5zZXQoZmlyc3ROb2RlLmluZGV4LCBmaXJzdE5vZGUpOwogICAgICAgIG1hbmFnZXIuY2FjaGVNYXAuc2V0KHNlY29uZE5vZGUuaW5kZXgsIHNlY29uZE5vZGUpOwogICAgICAgIG5vZGVOdW0gKz0gMjsKICAgICAgICBwID0gcC5uZXh0U2libGluZzsKICAgICAgICBpZiAocCA9PT0gbnVsbCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvdW50Kys7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIF9wODsKICAgICAgICBjb25zb2xlLmxvZyhsb3NlZFJhbmdlW2ldWzBdIC0gMSwgTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzFdIC8gMikpOwogICAgICAgIGNvbnNvbGUubG9nKCJsb3NlIHJhbmdlOiIsIGxvc2VkUmFuZ2UsIHAsIChfcDggPSBwKSA9PT0gbnVsbCB8fCBfcDggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wOC5pbmRleCwgaik7CiAgICAgICAgY29uc29sZS5sb2cobWFuYWdlci5sZXZlbEluZGV4T2Jqcyk7CiAgICAgICAgZGVidWdnZXI7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJkaWYgbm90IG1hdGNoIG5vZGUiKTsKICAgICAgfQogICAgfQogICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdUcmVlTm9kZS5sZW5ndGggLSAxOyBqKyspIHsKICAgICAgbmV3VHJlZU5vZGVbal0ubmV4dFNpYmxpbmcgPSBuZXdUcmVlTm9kZVtqICsgMV07CiAgICAgIGlmIChuZXdUcmVlTm9kZVtqXS5pbmRleCAhPSBuZXdUcmVlTm9kZVtqICsgMV0uaW5kZXggLSAxKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJzaWJsaW5nIGluZGV4IGVycm9yIik7CiAgICAgIH0KICAgICAgbmV3VHJlZU5vZGVbaiArIDFdLnByZXZpb3VzU2libGluZyA9IG5ld1RyZWVOb2RlW2pdOwogICAgICBjb25zdCBrMSA9IG5ld1RyZWVOb2RlW2ogKyAxXS55QXJyYXlbMl0gLSBuZXdUcmVlTm9kZVtqXS55QXJyYXlbMV07CiAgICAgIGNvbnN0IGsyID0gbmV3VHJlZU5vZGVbaiArIDFdLnlBcnJheVsxXSAtIG5ld1RyZWVOb2RlW2pdLnlBcnJheVsyXTsKICAgICAgaWYgKGsxIDwgazIpIHsKICAgICAgICBkZWJ1Z2dlcjsKICAgICAgfQogICAgICBuZXdUcmVlTm9kZVtqXS50cmVuZFJhbmdlID0gazEgPCBrMiA/IFtuZXdUcmVlTm9kZVtqICsgMV0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqXS55QXJyYXlbMV0sIG5ld1RyZWVOb2RlW2ogKyAxXS55QXJyYXlbMV0sIG5ld1RyZWVOb2RlW2pdLnlBcnJheVsyXV0gOiBbbmV3VHJlZU5vZGVbaiArIDFdLnlBcnJheVsxXSwgbmV3VHJlZU5vZGVbal0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqICsgMV0ueUFycmF5WzJdLCBuZXdUcmVlTm9kZVtqXS55QXJyYXlbMV1dOwogICAgfQogICAgaWYgKG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0pIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0gZWxzZSB7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0gPSBuZXcgTGV2ZWxJbmRleE9iaihsb3NlZFJhbmdlW2ldWzBdLCBmYWxzZSk7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9CiAgfQogIG1hbmFnZXIuYWRkTm9kZU51bShub2RlTnVtKTsKfQpsZXQgY3VycmVudE51bSA9IDA7CmxldCBjdXJyZW50VGFnID0gIiI7CmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXRjaExvYWREYXRhRm9yUmFuZ2VMZXZlbDFXUyhsb3NlZFJhbmdlLCBtYW5hZ2VyLCB0YWdOYW1lKSB7CiAgaWYgKHRhZ05hbWUgPT09ICJlbXB0eSIpIHsKICAgIG5vZGVOdW0ucHVzaChjdXJyZW50TnVtKTsKICAgIGlmIChub2RlTnVtLmxlbmd0aCA9PSA2KSB7CiAgICAgIC8vcHVzaFRpbWVBcnJheShub2RlTnVtKQogICAgICBub2RlTnVtID0gW107CiAgICB9CiAgICBjdXJyZW50TnVtID0gMDsKICAgIGNvbnNvbGUubG9nKCJsb2FkIG5vZGUgbnVtczoiLCBub2RlTnVtKTsKICAgIHJldHVybjsKICB9CiAgY29uc3QgZGlmVmFscyA9IGF3YWl0IGJhdGNoTG9hZFdpdGhXcyhsb3NlZFJhbmdlLCBtYW5hZ2VyLmRhdGFOYW1lLCAibGV2ZWxfbG9hZF9kYXRhIiwgbWFuYWdlci5tYXhMZXZlbCwgdGFnTmFtZSk7CiAgaWYgKGN1cnJlbnRUYWcgPT09IHRhZ05hbWUpIHsKICAgIGN1cnJlbnROdW0gKz0gZGlmVmFscy5sZW5ndGg7CiAgfSBlbHNlIHsKICAgIGN1cnJlbnRUYWcgPSB0YWdOYW1lOwogICAgY3VycmVudE51bSArPSBkaWZWYWxzLmxlbmd0aDsKICB9CiAgbGV0IGNvdW50ID0gMDsKICBmb3IgKGxldCBpID0gMDsgaSA8IGxvc2VkUmFuZ2UubGVuZ3RoOyBpKyspIHsKICAgIGNvbnN0IGxldmVsUmFuZ2UgPSBsb3NlZFJhbmdlW2ldOwogICAgY29uc3Qgc3RhcnROb2RlID0gbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5nZXRUcmVlTm9kZVN0YXJ0SW5kZXgobG9zZWRSYW5nZVtpXVsxXSk7CiAgICBsZXQgcCA9IHN0YXJ0Tm9kZTsKICAgIGNvbnN0IG5ld1RyZWVOb2RlID0gW107CiAgICBmb3IgKGxldCBqID0gbG9zZWRSYW5nZVtpXVsxXTsgaiA8PSBsb3NlZFJhbmdlW2ldWzJdOyBqKyspIHsKICAgICAgdmFyIF9wOTsKICAgICAgaWYgKCgoX3A5ID0gcCkgPT09IG51bGwgfHwgX3A5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcDkuaW5kZXgpID09PSBqICYmIGogPT09IGRpZlZhbHNbY291bnRdLmkgJiYgcC5sZXZlbCA9PT0gZGlmVmFsc1tjb3VudF0ubCkgewogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIHAuZGlmZmVyZW5jZSA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICAvLyBjb25zdCB5QXJyYXkxOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFswLCAwLCAwLCAwXQogICAgICAgIC8vIGNvbnN0IHlBcnJheTI6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdID0gWzAsIDAsIDAsIDBdCiAgICAgICAgLy8geUFycmF5MVswXSA9IHAueUFycmF5WzBdOwogICAgICAgIC8vIHlBcnJheTJbMF0gPSBwLnlBcnJheVswXSAtIHAuZGlmZmVyZW5jZSFbMF07CiAgICAgICAgLy8geUFycmF5MVszXSA9IHAueUFycmF5WzNdICsgcC5kaWZmZXJlbmNlIVszXTsKICAgICAgICAvLyB5QXJyYXkyWzNdID0gcC55QXJyYXlbM107CiAgICAgICAgLy8gaWYgKHAuZGlmZmVyZW5jZSFbMV0gPCAwKSB7CiAgICAgICAgLy8gICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICAvLyAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdIC0gcC5kaWZmZXJlbmNlIVsxXTsKICAgICAgICAvLyB9IGVsc2UgewogICAgICAgIC8vICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV0gKyBwLmRpZmZlcmVuY2UhWzFdOwogICAgICAgIC8vICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0KICAgICAgICAvLyB9CiAgICAgICAgLy8gaWYgKHAuZGlmZmVyZW5jZSFbMl0gPCAwKSB7CiAgICAgICAgLy8gICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXSArIHAuZGlmZmVyZW5jZSFbMl07CiAgICAgICAgLy8gICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAvLyB9IGVsc2UgewogICAgICAgIC8vICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXSAtIHAuZGlmZmVyZW5jZSFbMl07CiAgICAgICAgLy8gfQogICAgICAgIGNvbnN0IHlBcnJheTEgPSBbMCwgMCwgMCwgMCwgMF07CiAgICAgICAgY29uc3QgeUFycmF5MiA9IFswLCAwLCAwLCAwLCAwXTsKICAgICAgICB5QXJyYXkxWzBdID0gcC55QXJyYXlbMF07CiAgICAgICAgeUFycmF5MlswXSA9IHAueUFycmF5WzBdIC0gcC5kaWZmZXJlbmNlWzBdOwogICAgICAgIC8vIHlBcnJheTFbM10gPSBwLnlBcnJheVszXSArIHAuZGlmZmVyZW5jZSFbM107CiAgICAgICAgLy8geUFycmF5MlszXSA9IHAueUFycmF5WzNdOwogICAgICAgIHlBcnJheTFbNF0gPSBwLnlBcnJheVs0XSArIHAuZGlmZmVyZW5jZVs0XTsKICAgICAgICB5QXJyYXkyWzRdID0gcC55QXJyYXlbNF07CiAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsxXSA8IDApIHsKICAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXSAtIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdICsgcC5kaWZmZXJlbmNlWzFdOwogICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdOwogICAgICAgIH0KICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzJdIDwgMCkgewogICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdICsgcC5kaWZmZXJlbmNlWzJdOwogICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl0gLSBwLmRpZmZlcmVuY2VbMl07CiAgICAgICAgfQogICAgICAgIGlmIChwLmRpZmZlcmVuY2VbM10gPD0gMCB8fCBwLmRpZmZlcmVuY2VbM10gPj0gMCkgewogICAgICAgICAgeUFycmF5MVszXSA9IChwLnlBcnJheVszXSAqIDIgKyBwLmRpZmZlcmVuY2VbM10pIC8gMjsKICAgICAgICAgIHlBcnJheTJbM10gPSAocC55QXJyYXlbM10gKiAyIC0gcC5kaWZmZXJlbmNlWzNdKSAvIDI7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZpcnN0Tm9kZSA9IG5ldyBUcmVuZFRyZWUocCwgdHJ1ZSwgcC5pbmRleCwgeUFycmF5MSwgbnVsbCk7CiAgICAgICAgY29uc3Qgc2Vjb25kTm9kZSA9IG5ldyBUcmVuZFRyZWUocCwgZmFsc2UsIHAuaW5kZXgsIHlBcnJheTIsIG51bGwpOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goZmlyc3ROb2RlKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKHNlY29uZE5vZGUpOwogICAgICAgIG1hbmFnZXIubHJ1Q2FjaGUuc2V0KGZpcnN0Tm9kZS5sZXZlbCArICJfIiArIGZpcnN0Tm9kZS5pbmRleCwgZmlyc3ROb2RlKTsKICAgICAgICBtYW5hZ2VyLmxydUNhY2hlLnNldChzZWNvbmROb2RlLmxldmVsICsgIl8iICsgc2Vjb25kTm9kZS5pbmRleCwgc2Vjb25kTm9kZSk7CiAgICAgICAgcCA9IHAubmV4dFNpYmxpbmc7CiAgICAgICAgY291bnQrKzsKICAgICAgICBpZiAocCA9PT0gbnVsbCB8fCBjb3VudCA+PSBkaWZWYWxzLmxlbmd0aCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfcDEwOwogICAgICAgIGNvbnNvbGUubG9nKGxvc2VkUmFuZ2VbaV1bMF0gLSAxLCBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKSk7CiAgICAgICAgY29uc29sZS5sb2coImxvc2UgcmFuZ2U6IiwgbG9zZWRSYW5nZSwgcCwgKF9wMTAgPSBwKSA9PT0gbnVsbCB8fCBfcDEwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcDEwLmluZGV4LCBqKTsKICAgICAgICBjb25zb2xlLmxvZyhtYW5hZ2VyLmxldmVsSW5kZXhPYmpzKTsKICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImRpZiBub3QgbWF0Y2ggbm9kZSIpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld1RyZWVOb2RlLmxlbmd0aCAtIDE7IGorKykgewogICAgICBuZXdUcmVlTm9kZVtqXS5uZXh0U2libGluZyA9IG5ld1RyZWVOb2RlW2ogKyAxXTsKICAgICAgbmV3VHJlZU5vZGVbaiArIDFdLnByZXZpb3VzU2libGluZyA9IG5ld1RyZWVOb2RlW2pdOwogICAgICBpZiAobmV3VHJlZU5vZGVbal0uaW5kZXggIT0gbmV3VHJlZU5vZGVbaiArIDFdLmluZGV4IC0gMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigic2libGluZyBpbmRleCBlcnJvciIpOwogICAgICB9CiAgICB9CiAgICBpZiAobWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0pIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9IGVsc2UgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXSA9IG5ldyBMZXZlbEluZGV4T2JqKGxvc2VkUmFuZ2VbaV1bMF0gKyAxLCBmYWxzZSk7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXSArIDFdLmFkZExvYWRlZERhdGFSYW5nZShuZXdUcmVlTm9kZVswXSwgW25ld1RyZWVOb2RlWzBdLmluZGV4LCBuZXdUcmVlTm9kZVtuZXdUcmVlTm9kZS5sZW5ndGggLSAxXS5pbmRleF0pOwogICAgfQogIH0KfQovL2hlcmUKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJhdGNoTG9hZERhdGFGb3JSYW5nZUxldmVsMU1pbk1heE1pc3MobG9zZWRSYW5nZSwgbWFuYWdlciwgdGFnTmFtZSkgewogIGxldCBkaWZWYWxzOwogIGlmIChzdG9yZS5zdGF0ZS5jb250cm9sUGFyYW1zLmN1cnJlbnRMaW5lVHlwZSA9PT0gJ1NpbmdsZScpIHsKICAgIGRpZlZhbHMgPSBhd2FpdCBiYXRjaExvYWRNaW5NYXhNaXNzV2l0aFdzKGxvc2VkUmFuZ2UsIG1hbmFnZXIuZGF0YU5hbWUsICJsZXZlbF9sb2FkX2RhdGFfbWluX21heF9taXNzIiwgbWFuYWdlci5tYXhMZXZlbCwgdGFnTmFtZSk7CiAgfSBlbHNlIHsKICAgIGRpZlZhbHMgPSBhd2FpdCBiYXRjaExvYWRNaW5NYXhNaXNzV2l0aFBvc3RGb3JNdWx0aUxpbmVUeXBlKGxvc2VkUmFuZ2UsIG1hbmFnZXIuZGF0YU5hbWUsICJsZXZlbF9sb2FkX2RhdGFfbWluX21heF9taXNzIiwgbWFuYWdlci5tYXhMZXZlbCwgdGFnTmFtZSk7CiAgfQogIGxldCBjb3VudCA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb3NlZFJhbmdlLmxlbmd0aDsgaSsrKSB7CiAgICBjb25zdCBsZXZlbFJhbmdlID0gbG9zZWRSYW5nZVtpXTsKICAgIGNvbnN0IHN0YXJ0Tm9kZSA9IG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXV0uZ2V0VHJlZU5vZGVTdGFydEluZGV4KGxvc2VkUmFuZ2VbaV1bMV0pOwogICAgbGV0IHAgPSBzdGFydE5vZGU7CiAgICBjb25zdCBuZXdUcmVlTm9kZSA9IFtdOwogICAgZm9yIChsZXQgaiA9IGxvc2VkUmFuZ2VbaV1bMV07IGogPD0gbG9zZWRSYW5nZVtpXVsyXTsgaisrKSB7CiAgICAgIHZhciBfcDExOwogICAgICBpZiAoKChfcDExID0gcCkgPT09IG51bGwgfHwgX3AxMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AxMS5pbmRleCkgPT09IGogJiYgaiA9PT0gZGlmVmFsc1tjb3VudF0uaSAmJiBwLmxldmVsID09PSBkaWZWYWxzW2NvdW50XS5sKSB7CiAgICAgICAgLy8gaWYgKHA/LmluZGV4ID09PSBqKSB7CiAgICAgICAgbGV0IGRpZiA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICBsZXQgY3VyTm9kZVR5cGUgPSAnTyc7CiAgICAgICAgaWYgKGRpZlsxXSA9PT0gbnVsbCAmJiBkaWZbMl0gPT09IG51bGwpIHsKICAgICAgICAgIGN1ck5vZGVUeXBlID0gIk5VTEwiOwogICAgICAgIH0gZWxzZSBpZiAoZGlmWzFdID09PSBudWxsKSB7CiAgICAgICAgICBjdXJOb2RlVHlwZSA9ICJMRUZUTlVMTCI7CiAgICAgICAgICBwLmdhcEZsYWcgPSAiTCI7CiAgICAgICAgfSBlbHNlIGlmIChkaWZbMl0gPT09IG51bGwpIHsKICAgICAgICAgIGN1ck5vZGVUeXBlID0gIlJJR0hUTlVMTCI7CiAgICAgICAgICBwLmdhcEZsYWcgPSAiUiI7CiAgICAgICAgfQogICAgICAgIGlmIChjdXJOb2RlVHlwZSAhPT0gIk8iKSB7CiAgICAgICAgICBwLm5vZGVUeXBlID0gY3VyTm9kZVR5cGU7CiAgICAgICAgfQogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIHAuZGlmZmVyZW5jZSA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICAvLyBjb25zdCB5QXJyYXkxOiBbYW55LCBhbnksIGFueSwgYW55XSA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdCiAgICAgICAgLy8gY29uc3QgeUFycmF5MjogW2FueSwgYW55LCBhbnksIGFueV0gPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXQogICAgICAgIGNvbnN0IHlBcnJheTEgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdOwogICAgICAgIGNvbnN0IHlBcnJheTIgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdOwogICAgICAgIGlmIChjdXJOb2RlVHlwZSA9PT0gJ08nKSB7CiAgICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzFdIDwgMCkgewogICAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXSAtIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsyXSA8IDApIHsKICAgICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdICsgcC5kaWZmZXJlbmNlWzJdOwogICAgICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXSAtIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwLmRpZmZlcmVuY2VbM10gPD0gMCB8fCBwLmRpZmZlcmVuY2VbM10gPj0gMCkgewogICAgICAgICAgICB5QXJyYXkxWzNdID0gKHAueUFycmF5WzNdICogMiArIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgICAgICB5QXJyYXkyWzNdID0gKHAueUFycmF5WzNdICogMiAtIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoY3VyTm9kZVR5cGUgPT0gIkxFRlROVUxMIikgewogICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgeUFycmF5MlszXSA9IHAueUFycmF5WzNdIC8gMjsKICAgICAgICB9IGVsc2UgaWYgKGN1ck5vZGVUeXBlID09ICJSSUdIVE5VTEwiKSB7CiAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICB5QXJyYXkxWzNdID0gcC55QXJyYXlbM10gLyAyOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXJzdE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIHRydWUsIHAuaW5kZXgsIHlBcnJheTEsIG51bGwpOwogICAgICAgIGlmIChwLm5vZGVUeXBlID09PSAnTEVGVE5VTEwnIHx8IHAubm9kZVR5cGUgPT09ICdOVUxMJykgewogICAgICAgICAgZmlyc3ROb2RlLm5vZGVUeXBlID0gJ05VTEwnOwogICAgICAgIH0KICAgICAgICBjb25zdCBzZWNvbmROb2RlID0gbmV3IFRyZW5kVHJlZShwLCBmYWxzZSwgcC5pbmRleCwgeUFycmF5MiwgbnVsbCk7CiAgICAgICAgaWYgKHAubm9kZVR5cGUgPT09ICdSSUdIVE5VTEwnIHx8IHAubm9kZVR5cGUgPT0gJ05VTEwnKSB7CiAgICAgICAgICBzZWNvbmROb2RlLm5vZGVUeXBlID0gJ05VTEwnOwogICAgICAgIH0KICAgICAgICAvLyBpZihmaXJzdE5vZGUubm9kZVR5cGU9PT0nTlVMTCcpewogICAgICAgIC8vICAgICBzZWNvbmROb2RlLmdhcEZsYWc9J0wnCiAgICAgICAgLy8gfQogICAgICAgIC8vIGlmKHNlY29uZE5vZGUubm9kZVR5cGU9PT0nTlVMTCcpewogICAgICAgIC8vICAgICBmaXJzdE5vZGUuZ2FwRmxhZz0nUic7CiAgICAgICAgLy8gfQogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goZmlyc3ROb2RlKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKHNlY29uZE5vZGUpOwogICAgICAgIG1hbmFnZXIubHJ1Q2FjaGUuc2V0KGZpcnN0Tm9kZS5sZXZlbCArICJfIiArIGZpcnN0Tm9kZS5pbmRleCwgZmlyc3ROb2RlKTsKICAgICAgICBtYW5hZ2VyLmxydUNhY2hlLnNldChzZWNvbmROb2RlLmxldmVsICsgIl8iICsgc2Vjb25kTm9kZS5pbmRleCwgc2Vjb25kTm9kZSk7CiAgICAgICAgcCA9IHAubmV4dFNpYmxpbmc7CiAgICAgICAgY291bnQrKzsKICAgICAgICBpZiAocCA9PT0gbnVsbCB8fCBjb3VudCA+PSBkaWZWYWxzLmxlbmd0aCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfcDEyOwogICAgICAgIGNvbnNvbGUubG9nKGxvc2VkUmFuZ2VbaV1bMF0gLSAxLCBNYXRoLmZsb29yKGxvc2VkUmFuZ2VbaV1bMV0gLyAyKSk7CiAgICAgICAgY29uc29sZS5sb2coImxvc2UgcmFuZ2U6IiwgbG9zZWRSYW5nZSwgcCwgKF9wMTIgPSBwKSA9PT0gbnVsbCB8fCBfcDEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcDEyLmluZGV4LCBqKTsKICAgICAgICBjb25zb2xlLmxvZyhtYW5hZ2VyLmxldmVsSW5kZXhPYmpzKTsKICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImRpZiBub3QgbWF0Y2ggbm9kZSIpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld1RyZWVOb2RlLmxlbmd0aCAtIDE7IGorKykgewogICAgICBuZXdUcmVlTm9kZVtqXS5uZXh0U2libGluZyA9IG5ld1RyZWVOb2RlW2ogKyAxXTsKICAgICAgbmV3VHJlZU5vZGVbaiArIDFdLnByZXZpb3VzU2libGluZyA9IG5ld1RyZWVOb2RlW2pdOwogICAgICBpZiAobmV3VHJlZU5vZGVbal0uaW5kZXggIT0gbmV3VHJlZU5vZGVbaiArIDFdLmluZGV4IC0gMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigic2libGluZyBpbmRleCBlcnJvciIpOwogICAgICB9CiAgICB9CiAgICBpZiAobWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0pIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9IGVsc2UgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXSA9IG5ldyBMZXZlbEluZGV4T2JqKGxvc2VkUmFuZ2VbaV1bMF0gKyAxLCBmYWxzZSk7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXSArIDFdLmFkZExvYWRlZERhdGFSYW5nZShuZXdUcmVlTm9kZVswXSwgW25ld1RyZWVOb2RlWzBdLmluZGV4LCBuZXdUcmVlTm9kZVtuZXdUcmVlTm9kZS5sZW5ndGggLSAxXS5pbmRleF0pOwogICAgfQogIH0KfQpleHBvcnQgYXN5bmMgZnVuY3Rpb24gYmF0Y2hMb2FkRGF0YUZvclJhbmdlTGV2ZWwyTWluTWF4TWlzcyhsb3NlZFJhbmdlLCBtYW5hZ2VyLCB0YWdOYW1lKSB7CiAgbGV0IGRpZlZhbHM7CiAgaWYgKHN0b3JlLnN0YXRlLmNvbnRyb2xQYXJhbXMuY3VycmVudExpbmVUeXBlID09PSAnU2luZ2xlJykgewogICAgZGlmVmFscyA9IGF3YWl0IGJhdGNoTG9hZE1pbk1heE1pc3NXaXRoV3MobG9zZWRSYW5nZSwgbWFuYWdlci5kYXRhTmFtZSwgImxldmVsX2xvYWRfZGF0YV9taW5fbWF4X21pc3MiLCBtYW5hZ2VyLm1heExldmVsLCB0YWdOYW1lKTsKICB9IGVsc2UgewogICAgZGlmVmFscyA9IGF3YWl0IGJhdGNoTG9hZE1pbk1heE1pc3NXaXRoUG9zdEZvck11bHRpTGluZVR5cGUobG9zZWRSYW5nZSwgbWFuYWdlci5kYXRhTmFtZSwgImxldmVsX2xvYWRfZGF0YV9taW5fbWF4X21pc3MiLCBtYW5hZ2VyLm1heExldmVsLCB0YWdOYW1lKTsKICB9CiAgbGV0IGNvdW50ID0gMDsKICBmb3IgKGxldCBpID0gMDsgaSA8IGxvc2VkUmFuZ2UubGVuZ3RoOyBpKyspIHsKICAgIGNvbnN0IGxldmVsUmFuZ2UgPSBsb3NlZFJhbmdlW2ldOwogICAgY29uc3Qgc3RhcnROb2RlID0gbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5nZXRUcmVlTm9kZVN0YXJ0SW5kZXgobG9zZWRSYW5nZVtpXVsxXSk7CiAgICBsZXQgcCA9IHN0YXJ0Tm9kZTsKICAgIGNvbnN0IG5ld1RyZWVOb2RlID0gW107CiAgICBmb3IgKGxldCBqID0gbG9zZWRSYW5nZVtpXVsxXTsgaiA8PSBsb3NlZFJhbmdlW2ldWzJdOyBqKyspIHsKICAgICAgdmFyIF9wMTMsIF9wMTQ7CiAgICAgIGlmIChwLm5vZGVUeXBlID09PSAiTlVMTCIpIHsKICAgICAgICBwID0gcC5uZXh0U2libGluZzsKICAgICAgICAvL2RlYnVnZ2VyCiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKCgoX3AxMyA9IHApID09PSBudWxsIHx8IF9wMTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wMTMuaW5kZXgpICE9PSBqIHx8IGogIT09IGRpZlZhbHNbY291bnRdLmkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoKChfcDE0ID0gcCkgPT09IG51bGwgfHwgX3AxNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AxNC5pbmRleCkgPT09IGogJiYgaiA9PT0gZGlmVmFsc1tjb3VudF0uaSAmJiBwLmxldmVsID09PSBkaWZWYWxzW2NvdW50XS5sKSB7CiAgICAgICAgbGV0IGRpZiA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICBsZXQgY3VyTm9kZVR5cGUgPSAnTyc7CiAgICAgICAgaWYgKGRpZlsxXSA9PT0gbnVsbCAmJiBkaWZbMl0gPT09IG51bGwpIHsKICAgICAgICAgIGN1ck5vZGVUeXBlID0gIk5VTEwiOwogICAgICAgIH0gZWxzZSBpZiAoZGlmWzFdID09PSBudWxsKSB7CiAgICAgICAgICBjdXJOb2RlVHlwZSA9ICJMRUZUTlVMTCI7CiAgICAgICAgICBwLmdhcEZsYWcgPSAnTCc7CiAgICAgICAgfSBlbHNlIGlmIChkaWZbMl0gPT09IG51bGwpIHsKICAgICAgICAgIGN1ck5vZGVUeXBlID0gIlJJR0hUTlVMTCI7CiAgICAgICAgICBwLmdhcEZsYWcgPSAnUic7CiAgICAgICAgfQogICAgICAgIGlmIChjdXJOb2RlVHlwZSAhPT0gIk8iKSB7CiAgICAgICAgICBwLm5vZGVUeXBlID0gY3VyTm9kZVR5cGU7CiAgICAgICAgfQogICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgIHAuZGlmZmVyZW5jZSA9IGRpZlZhbHNbY291bnRdLmRpZjsKICAgICAgICAvLyBjb25zdCB5QXJyYXkxOiBbYW55LCBhbnksIGFueSwgYW55XSA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdCiAgICAgICAgLy8gY29uc3QgeUFycmF5MjogW2FueSwgYW55LCBhbnksIGFueV0gPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXQogICAgICAgIC8vIGlmIChjdXJOb2RlVHlwZSA9PT0gJ08nKSB7CiAgICAgICAgLy8gICAgIGlmIChwLmRpZmZlcmVuY2UhWzFdIDwgMCkgewogICAgICAgIC8vICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgIC8vICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdIC0gcC5kaWZmZXJlbmNlIVsxXTsKICAgICAgICAvLyAgICAgfSBlbHNlIHsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZSFbMV07CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0KICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgICBpZiAocC5kaWZmZXJlbmNlIVsyXSA8IDApIHsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXSArIHAuZGlmZmVyZW5jZSFbMl07CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gICAgIH0gZWxzZSB7CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl0gLSBwLmRpZmZlcmVuY2UhWzJdOwogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8gfSBlbHNlIGlmIChjdXJOb2RlVHlwZSA9PSAiTEVGVE5VTEwiKSB7CiAgICAgICAgLy8gICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICAvLyAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgIC8vIH0gZWxzZSBpZiAoY3VyTm9kZVR5cGUgPT0gIlJJR0hUTlVMTCIpIHsKICAgICAgICAvLyAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgIC8vICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gfSAKICAgICAgICBjb25zdCB5QXJyYXkxID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXTsKICAgICAgICBjb25zdCB5QXJyYXkyID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXTsKICAgICAgICBpZiAoY3VyTm9kZVR5cGUgPT09ICdPJykgewogICAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsxXSA8IDApIHsKICAgICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0gLSBwLmRpZmZlcmVuY2VbMV07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV0gKyBwLmRpZmZlcmVuY2VbMV07CiAgICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwLmRpZmZlcmVuY2VbMl0gPCAwKSB7CiAgICAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXSArIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl0gLSBwLmRpZmZlcmVuY2VbMl07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzNdIDw9IDAgfHwgcC5kaWZmZXJlbmNlWzNdID49IDApIHsKICAgICAgICAgICAgeUFycmF5MVszXSA9IChwLnlBcnJheVszXSAqIDIgKyBwLmRpZmZlcmVuY2VbM10pIC8gMjsKICAgICAgICAgICAgeUFycmF5MlszXSA9IChwLnlBcnJheVszXSAqIDIgLSBwLmRpZmZlcmVuY2VbM10pIC8gMjsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGN1ck5vZGVUeXBlID09ICJMRUZUTlVMTCIpIHsKICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXTsKICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAgIHlBcnJheTJbM10gPSBwLnlBcnJheVszXSAvIDI7CiAgICAgICAgfSBlbHNlIGlmIChjdXJOb2RlVHlwZSA9PSAiUklHSFROVUxMIikgewogICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgeUFycmF5MVszXSA9IHAueUFycmF5WzNdIC8gMjsKICAgICAgICB9CiAgICAgICAgY29uc3QgZmlyc3ROb2RlID0gbmV3IFRyZW5kVHJlZShwLCB0cnVlLCBwLmluZGV4LCB5QXJyYXkxLCBudWxsKTsKICAgICAgICBpZiAocC5ub2RlVHlwZSA9PT0gJ0xFRlROVUxMJyB8fCBwLm5vZGVUeXBlID09PSAnTlVMTCcpIHsKICAgICAgICAgIGZpcnN0Tm9kZS5ub2RlVHlwZSA9ICdOVUxMJzsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2Vjb25kTm9kZSA9IG5ldyBUcmVuZFRyZWUocCwgZmFsc2UsIHAuaW5kZXgsIHlBcnJheTIsIG51bGwpOwogICAgICAgIGlmIChwLm5vZGVUeXBlID09PSAnUklHSFROVUxMJyB8fCBwLm5vZGVUeXBlID09ICdOVUxMJykgewogICAgICAgICAgc2Vjb25kTm9kZS5ub2RlVHlwZSA9ICdOVUxMJzsKICAgICAgICB9CiAgICAgICAgbmV3VHJlZU5vZGUucHVzaChmaXJzdE5vZGUpOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goc2Vjb25kTm9kZSk7CiAgICAgICAgbWFuYWdlci5scnVDYWNoZS5zZXQoZmlyc3ROb2RlLmxldmVsICsgIl8iICsgZmlyc3ROb2RlLmluZGV4LCBmaXJzdE5vZGUpOwogICAgICAgIG1hbmFnZXIubHJ1Q2FjaGUuc2V0KHNlY29uZE5vZGUubGV2ZWwgKyAiXyIgKyBzZWNvbmROb2RlLmluZGV4LCBzZWNvbmROb2RlKTsKICAgICAgICBwID0gcC5uZXh0U2libGluZzsKICAgICAgICBjb3VudCsrOwogICAgICAgIGlmIChwID09PSBudWxsIHx8IGNvdW50ID49IGRpZlZhbHMubGVuZ3RoKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIF9wMTU7CiAgICAgICAgY29uc29sZS5sb2cobG9zZWRSYW5nZVtpXVswXSAtIDEsIE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpKTsKICAgICAgICBjb25zb2xlLmxvZygibG9zZSByYW5nZToiLCBsb3NlZFJhbmdlLCBwLCAoX3AxNSA9IHApID09PSBudWxsIHx8IF9wMTUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wMTUuaW5kZXgsIGopOwogICAgICAgIGNvbnNvbGUubG9nKG1hbmFnZXIubGV2ZWxJbmRleE9ianMpOwogICAgICAgIGRlYnVnZ2VyOwogICAgICAgIHRocm93IG5ldyBFcnJvcigiZGlmIG5vdCBtYXRjaCBub2RlIik7CiAgICAgIH0KICAgIH0KICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3VHJlZU5vZGUubGVuZ3RoIC0gMTsgaisrKSB7CiAgICAgIG5ld1RyZWVOb2RlW2pdLm5leHRTaWJsaW5nID0gbmV3VHJlZU5vZGVbaiArIDFdOwogICAgICBuZXdUcmVlTm9kZVtqICsgMV0ucHJldmlvdXNTaWJsaW5nID0gbmV3VHJlZU5vZGVbal07CiAgICAgIGlmIChuZXdUcmVlTm9kZVtqXS5pbmRleCAhPSBuZXdUcmVlTm9kZVtqICsgMV0uaW5kZXggLSAxKSB7CiAgICAgICAgY29uc29sZS5lcnJvcigic2libGluZyBpbmRleCBlcnJvciIpOwogICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKCJzaWJsaW5nIGluZGV4IGVycm9yIik7CiAgICAgIH0KICAgIH0KICAgIGlmIChtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXSkgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gKyAxXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0gZWxzZSB7CiAgICAgIG1hbmFnZXIubGV2ZWxJbmRleE9ianNbbG9zZWRSYW5nZVtpXVswXSArIDFdID0gbmV3IExldmVsSW5kZXhPYmoobG9zZWRSYW5nZVtpXVswXSArIDEsIGZhbHNlKTsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdICsgMV0uYWRkTG9hZGVkRGF0YVJhbmdlKG5ld1RyZWVOb2RlWzBdLCBbbmV3VHJlZU5vZGVbMF0uaW5kZXgsIG5ld1RyZWVOb2RlW25ld1RyZWVOb2RlLmxlbmd0aCAtIDFdLmluZGV4XSk7CiAgICB9CiAgfQp9CmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXRjaExvYWREYXRhRm9yUmFuZ2VMZXZlbEZvck1pbk1heE1pc3MobG9zZWRSYW5nZSwgbWFuYWdlcikgewogIGNvbnN0IGRpZlZhbHMgPSBhd2FpdCBiYXRjaExvYWREaWZXaWR0aFBvc3RGb3JNaW5NYXhNaXNzKGxvc2VkUmFuZ2UsIG1hbmFnZXIpOwogIGxldCBjb3VudCA9IDA7CiAgbGV0IG5vZGVOdW0gPSAwOwogIGRlYnVnZ2VyOwogIGZvciAobGV0IGkgPSAwOyBpIDwgbG9zZWRSYW5nZS5sZW5ndGg7IGkrKykgewogICAgY29uc3QgbGV2ZWxSYW5nZSA9IGxvc2VkUmFuZ2VbaV07CiAgICBjb25zdCBzdGFydE5vZGUgPSBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF0gLSAxXS5nZXRUcmVlTm9kZVN0YXJ0SW5kZXgoTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzFdIC8gMikpOwogICAgbGV0IHAgPSBzdGFydE5vZGU7CiAgICBjb25zdCBuZXdUcmVlTm9kZSA9IFtdOwogICAgZm9yIChsZXQgaiA9IE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsxXSAvIDIpOyBqIDw9IE1hdGguZmxvb3IobG9zZWRSYW5nZVtpXVsyXSAvIDIpOyBqKyspIHsKICAgICAgdmFyIF9wMTY7CiAgICAgIGlmICgoKF9wMTYgPSBwKSA9PT0gbnVsbCB8fCBfcDE2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcDE2LmluZGV4KSA9PT0gaiAmJiBqID09PSBkaWZWYWxzW2NvdW50XS5pICYmIHAubGV2ZWwgPT09IGRpZlZhbHNbY291bnRdLmwpIHsKICAgICAgICBsZXQgZGlmID0gZGlmVmFsc1tjb3VudF0uZGlmOwogICAgICAgIGxldCBjdXJOb2RlVHlwZSA9ICdPJzsKICAgICAgICBpZiAoZGlmWzFdID09PSBudWxsICYmIGRpZlsyXSA9PT0gbnVsbCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJkYXRhIGVycm9yIik7CiAgICAgICAgICAvLyBjdXJOb2RlVHlwZSA9ICJOVUxMIjsKICAgICAgICB9IGVsc2UgaWYgKGRpZlsxXSA9PT0gbnVsbCkgewogICAgICAgICAgY3VyTm9kZVR5cGUgPSAiTEVGVE5VTEwiOwogICAgICAgIH0gZWxzZSBpZiAoZGlmWzJdID09PSBudWxsKSB7CiAgICAgICAgICBjdXJOb2RlVHlwZSA9ICJSSUdIVE5VTEwiOwogICAgICAgIH0KICAgICAgICBpZiAoY3VyTm9kZVR5cGUgIT09ICJPIikgewogICAgICAgICAgcC5ub2RlVHlwZSA9IGN1ck5vZGVUeXBlOwogICAgICAgIH0KICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICBwLmRpZmZlcmVuY2UgPSBkaWZWYWxzW2NvdW50XS5kaWY7CiAgICAgICAgLy8gY29uc3QgeUFycmF5MTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMCwgMCwgMF0KICAgICAgICAvLyBjb25zdCB5QXJyYXkyOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFswLCAwLCAwLCAwXQogICAgICAgIC8vIGlmKGN1ck5vZGVUeXBlPT09J08nKXsKICAgICAgICAvLyAgICAgaWYgKHAuZGlmZmVyZW5jZSFbMV0gPCAwKSB7CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgLy8gICAgICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV0gLSBwLmRpZmZlcmVuY2UhWzFdOwogICAgICAgIC8vICAgICB9IGVsc2UgewogICAgICAgIC8vICAgICAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdICsgcC5kaWZmZXJlbmNlIVsxXTsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXQogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8gICAgIGlmIChwLmRpZmZlcmVuY2UhWzJdIDwgMCkgewogICAgICAgIC8vICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdICsgcC5kaWZmZXJlbmNlIVsyXTsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAvLyAgICAgfSBlbHNlIHsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTFbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAvLyAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXSAtIHAuZGlmZmVyZW5jZSFbMl07CiAgICAgICAgLy8gICAgIH0KICAgICAgICAvLyB9ZWxzZSBpZihjdXJOb2RlVHlwZT09PSJMRUZUTlVMTCIpewogICAgICAgIC8vICAgICB5QXJyYXkyWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgLy8gICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXTsKICAgICAgICAvLyB9ZWxzZSBpZihjdXJOb2RlVHlwZT09PSJSSUdIVE5VTEwiKXsKICAgICAgICAvLyAgICAgeUFycmF5MVsxXSA9IHAueUFycmF5WzFdOwogICAgICAgIC8vICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgLy8gfQogICAgICAgIGNvbnN0IHlBcnJheTEgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdOwogICAgICAgIGNvbnN0IHlBcnJheTIgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdOwogICAgICAgIGlmIChjdXJOb2RlVHlwZSA9PT0gJ08nKSB7CiAgICAgICAgICBpZiAocC5kaWZmZXJlbmNlWzFdIDwgMCkgewogICAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICAgIHlBcnJheTJbMV0gPSBwLnlBcnJheVsxXSAtIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHlBcnJheTFbMV0gPSBwLnlBcnJheVsxXSArIHAuZGlmZmVyZW5jZVsxXTsKICAgICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHAuZGlmZmVyZW5jZVsyXSA8IDApIHsKICAgICAgICAgICAgeUFycmF5MVsyXSA9IHAueUFycmF5WzJdICsgcC5kaWZmZXJlbmNlWzJdOwogICAgICAgICAgICB5QXJyYXkyWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICAgIHlBcnJheTJbMl0gPSBwLnlBcnJheVsyXSAtIHAuZGlmZmVyZW5jZVsyXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwLmRpZmZlcmVuY2VbM10gPD0gMCB8fCBwLmRpZmZlcmVuY2VbM10gPj0gMCkgewogICAgICAgICAgICB5QXJyYXkxWzNdID0gKHAueUFycmF5WzNdICogMiArIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgICAgICB5QXJyYXkyWzNdID0gKHAueUFycmF5WzNdICogMiAtIHAuZGlmZmVyZW5jZVszXSkgLyAyOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoY3VyTm9kZVR5cGUgPT0gIkxFRlROVUxMIikgewogICAgICAgICAgeUFycmF5MlsxXSA9IHAueUFycmF5WzFdOwogICAgICAgICAgeUFycmF5MlsyXSA9IHAueUFycmF5WzJdOwogICAgICAgICAgeUFycmF5MlszXSA9IHAueUFycmF5WzNdIC8gMjsKICAgICAgICB9IGVsc2UgaWYgKGN1ck5vZGVUeXBlID09ICJSSUdIVE5VTEwiKSB7CiAgICAgICAgICB5QXJyYXkxWzFdID0gcC55QXJyYXlbMV07CiAgICAgICAgICB5QXJyYXkxWzJdID0gcC55QXJyYXlbMl07CiAgICAgICAgICB5QXJyYXkxWzNdID0gcC55QXJyYXlbM10gLyAyOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXJzdE5vZGUgPSBuZXcgVHJlbmRUcmVlKHAsIHRydWUsIHAuaW5kZXgsIHlBcnJheTEsIG51bGwpOwogICAgICAgIGlmIChwLm5vZGVUeXBlID09PSAnTEVGVE5VTEwnIHx8IHAubm9kZVR5cGUgPT09ICdOVUxMJykgewogICAgICAgICAgZmlyc3ROb2RlLm5vZGVUeXBlID0gJ05VTEwnOwogICAgICAgIH0KICAgICAgICBjb25zdCBzZWNvbmROb2RlID0gbmV3IFRyZW5kVHJlZShwLCBmYWxzZSwgcC5pbmRleCwgeUFycmF5MiwgbnVsbCk7CiAgICAgICAgaWYgKHAubm9kZVR5cGUgPT09ICdSSUdIVE5VTEwnIHx8IHAubm9kZVR5cGUgPT0gJ05VTEwnKSB7CiAgICAgICAgICBzZWNvbmROb2RlLm5vZGVUeXBlID0gJ05VTEwnOwogICAgICAgIH0KICAgICAgICBtYW5hZ2VyLmNhY2hlTWFwLnNldChmaXJzdE5vZGUuaW5kZXgsIGZpcnN0Tm9kZSk7CiAgICAgICAgbWFuYWdlci5jYWNoZU1hcC5zZXQoc2Vjb25kTm9kZS5pbmRleCwgc2Vjb25kTm9kZSk7CiAgICAgICAgbm9kZU51bSArPSAyOwogICAgICAgIG5ld1RyZWVOb2RlLnB1c2goZmlyc3ROb2RlKTsKICAgICAgICBuZXdUcmVlTm9kZS5wdXNoKHNlY29uZE5vZGUpOwogICAgICAgIHAgPSBwLm5leHRTaWJsaW5nOwogICAgICAgIGNvdW50Kys7CiAgICAgICAgaWYgKHAgPT09IG51bGwgfHwgY291bnQgPj0gZGlmVmFscy5sZW5ndGgpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgX3AxNzsKICAgICAgICBjb25zb2xlLmxvZyhsb3NlZFJhbmdlW2ldWzBdIC0gMSwgTWF0aC5mbG9vcihsb3NlZFJhbmdlW2ldWzFdIC8gMikpOwogICAgICAgIGNvbnNvbGUubG9nKCJsb3NlIHJhbmdlOiIsIGxvc2VkUmFuZ2UsIHAsIChfcDE3ID0gcCkgPT09IG51bGwgfHwgX3AxNyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AxNy5pbmRleCwgaik7CiAgICAgICAgY29uc29sZS5sb2cobWFuYWdlci5sZXZlbEluZGV4T2Jqcyk7CiAgICAgICAgZGVidWdnZXI7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJkaWYgbm90IG1hdGNoIG5vZGUiKTsKICAgICAgfQogICAgfQogICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdUcmVlTm9kZS5sZW5ndGggLSAxOyBqKyspIHsKICAgICAgbmV3VHJlZU5vZGVbal0ubmV4dFNpYmxpbmcgPSBuZXdUcmVlTm9kZVtqICsgMV07CiAgICAgIG5ld1RyZWVOb2RlW2ogKyAxXS5wcmV2aW91c1NpYmxpbmcgPSBuZXdUcmVlTm9kZVtqXTsKICAgICAgaWYgKG5ld1RyZWVOb2RlW2pdLmluZGV4ICE9IG5ld1RyZWVOb2RlW2ogKyAxXS5pbmRleCAtIDEpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInNpYmxpbmcgaW5kZXggZXJyb3IiKTsKICAgICAgfQogICAgfQogICAgZGVidWdnZXI7CiAgICBpZiAobWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXSkgewogICAgICBtYW5hZ2VyLmxldmVsSW5kZXhPYmpzW2xvc2VkUmFuZ2VbaV1bMF1dLmFkZExvYWRlZERhdGFSYW5nZShuZXdUcmVlTm9kZVswXSwgW25ld1RyZWVOb2RlWzBdLmluZGV4LCBuZXdUcmVlTm9kZVtuZXdUcmVlTm9kZS5sZW5ndGggLSAxXS5pbmRleF0pOwogICAgfSBlbHNlIHsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXSA9IG5ldyBMZXZlbEluZGV4T2JqKGxvc2VkUmFuZ2VbaV1bMF0sIGZhbHNlKTsKICAgICAgbWFuYWdlci5sZXZlbEluZGV4T2Jqc1tsb3NlZFJhbmdlW2ldWzBdXS5hZGRMb2FkZWREYXRhUmFuZ2UobmV3VHJlZU5vZGVbMF0sIFtuZXdUcmVlTm9kZVswXS5pbmRleCwgbmV3VHJlZU5vZGVbbmV3VHJlZU5vZGUubGVuZ3RoIC0gMV0uaW5kZXhdKTsKICAgIH0KICB9Cn0="},{"version":3,"names":["batchLoadDifWidthPostRawMinMax","loadDif","batchLoadDifWidthPost","batchLoadDifWidthPost1","batchLoadMinMaxMissWithWs","batchLoadWithWs","batchLoadDifWidthPostForMinMaxMiss","batchLoadMinMaxMissWithPostForMultiLineType","LevelIndexObj","TrendTree","store","nodeNum","batchLoadDataForRangeLevel1","losedRange","manager","difVals","count","i","length","levelRange","startNode","levelIndexObjs","getTreeNodeStartIndex","p","newTreeNode","j","_p","index","level","l","difference","dif","yArray1","yArray2","yArray","firstNode","secondNode","push","cacheMap","set","nextSibling","_p2","console","log","Math","floor","Error","previousSibling","addLoadedDataRange","batchLoadDataForRangeLevel","_p3","_p4","k1","k2","trendRange","addNodeNum","batchLoadDataForRangeLevelRawMinMax","_p5","_p6","loadDataForRangeLevel","difVal","_p7","_p8","currentNum","currentTag","batchLoadDataForRangeLevel1WS","tagName","dataName","maxLevel","_p9","lruCache","_p10","batchLoadDataForRangeLevel1MinMaxMiss","state","controlParams","currentLineType","_p11","curNodeType","gapFlag","nodeType","undefined","_p12","batchLoadDataForRangeLevel2MinMaxMiss","_p13","_p14","_p15","error","batchLoadDataForRangeLevelForMinMaxMiss","_p16","_p17"],"sources":["/ai/didi01/zhanglingyu/om3-extend/om3-client/node_modules/eslint-loader/index.js??ref--14-0!/ai/didi01/zhanglingyu/om3-extend/om3-client/src/api/build_tree.ts"],"sourcesContent":["import {batchLoadDifWidthPostRawMinMax, loadDif, batchLoadDifWidthPost, batchLoadDifWidthPost1, batchLoadDif,batchLoadMinMaxMissWithWs, batchLoadAllDifWidthPost, batchLoadDifWidthPost1MinMax, batchLoadWithWs, batchLoadDifWidthPostForMinMaxMiss, batchLoadMinMaxMissWithPostForMultiLineType } from \"./load_data\"\nimport LevelIndexObj from \"../model/level-index-obj\";\nimport TrendTree from \"@/helper/tend-query-tree\";\nimport store, { pushTimeArray } from \"@/store\";\n\n\nlet nodeNum: Array<number> = [];\n\nexport async function batchLoadDataForRangeLevel1(losedRange: Array<Array<number>>, manager: any) {\n    const difVals = await batchLoadDifWidthPost1(losedRange, manager);\n\n    let count = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0]].getTreeNodeStartIndex(losedRange[i][1]);\n        let p = startNode;\n        const newTreeNode = [];\n        for (let j = losedRange[i][1]; j <= losedRange[i][2]; j++) {\n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                yArray1[0] = p.yArray[0];\n                yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                yArray1[4] = p.yArray[4] + p.difference![4];\n                yArray2[4] = p.yArray[4];\n                if (p.difference![1] < 0) {\n                    yArray1[1] = p.yArray[1];\n                    yArray2[1] = p.yArray[1] - p.difference![1];\n                } else {\n                    yArray1[1] = p.yArray[1] + p.difference![1];\n                    yArray2[1] = p.yArray[1]\n                }\n                if (p.difference![2] < 0) {\n                    yArray1[2] = p.yArray[2] + p.difference![2];\n                    yArray2[2] = p.yArray[2];\n                } else {\n                    yArray1[2] = p.yArray[2];\n                    yArray2[2] = p.yArray[2] - p.difference![2];\n                }\n                if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                    yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                    yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                }\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                manager.cacheMap.set(firstNode.index, firstNode);\n                manager.cacheMap.set(secondNode.index, secondNode);\n\n                p = p.nextSibling;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n\n        }\n        if (manager.levelIndexObjs[losedRange[i][0] + 1]) {\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0] + 1] = new LevelIndexObj(losedRange[i][0] + 1, false);\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n}\n\n\nexport async function batchLoadDataForRangeLevel(losedRange: Array<Array<number>>, manager: any) {\n    const difVals = await batchLoadDifWidthPost(losedRange, manager);\n    \n    let count = 0;\n    let nodeNum = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0] - 1].getTreeNodeStartIndex(Math.floor(losedRange[i][1] / 2));\n        let p = startNode;\n        const newTreeNode = [];\n        for (let j = Math.floor(losedRange[i][1] / 2); j <= Math.floor(losedRange[i][2] / 2); j++) {\n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                // yArray1[0] = p.yArray[0];\n                // yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                // if (p.difference![1] < 0) {\n                //     yArray1[1] = p.yArray[1];\n                //     yArray2[1] = p.yArray[1] - p.difference![1];\n                // } else {\n                //     yArray1[1] = p.yArray[1] + p.difference![1];\n                //     yArray2[1] = p.yArray[1]\n                // }\n                // if (p.difference![2] < 0) {\n                //     yArray1[2] = p.yArray[2] + p.difference![2];\n                //     yArray2[2] = p.yArray[2];\n                // } else {\n                //     yArray1[2] = p.yArray[2];\n                //     yArray2[2] = p.yArray[2] - p.difference![2];\n                // }\n                // const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                // const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                yArray1[0] = p.yArray[0];\n                yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                yArray1[4] = p.yArray[4] + p.difference![4];\n                yArray2[4] = p.yArray[4];\n                if (p.difference![1] < 0) {\n                    yArray1[1] = p.yArray[1];\n                    yArray2[1] = p.yArray[1] - p.difference![1];\n                } else {\n                    yArray1[1] = p.yArray[1] + p.difference![1];\n                    yArray2[1] = p.yArray[1]\n                }\n                if (p.difference![2] < 0) {\n                    yArray1[2] = p.yArray[2] + p.difference![2];\n                    yArray2[2] = p.yArray[2];\n                } else {\n                    yArray1[2] = p.yArray[2];\n                    yArray2[2] = p.yArray[2] - p.difference![2];\n                }\n                if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                    yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                    yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                }\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                manager.cacheMap.set(firstNode.index, firstNode);\n                manager.cacheMap.set(secondNode.index, secondNode);\n                nodeNum += 2\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                p = p.nextSibling;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n            const k1 = newTreeNode[j + 1].yArray[2] - newTreeNode[j].yArray[1];\n            const k2 = newTreeNode[j + 1].yArray[1] - newTreeNode[j].yArray[2];\n            newTreeNode[j].trendRange = k1 < k2 ? [newTreeNode[j + 1].yArray[2], newTreeNode[j].yArray[1], newTreeNode[j + 1].yArray[1], newTreeNode[j].yArray[2]] : [newTreeNode[j + 1].yArray[1], newTreeNode[j].yArray[2], newTreeNode[j + 1].yArray[2], newTreeNode[j].yArray[1]];\n        }\n        if (manager.levelIndexObjs[losedRange[i][0]]) {\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0]] = new LevelIndexObj(losedRange[i][0], false);\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n        // manager.updateDataCacheForRange(newTreeNode[0].level, newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index)\n    }\n    manager.addNodeNum(nodeNum);\n}\n\nexport async function batchLoadDataForRangeLevelRawMinMax(losedRange: Array<Array<number>>, manager: any) {\n    const difVals = await batchLoadDifWidthPostRawMinMax(losedRange, manager);\n   // debugger\n    let count = 0;\n    let nodeNum = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        //debugger\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0] - 1].getTreeNodeStartIndex(Math.floor(losedRange[i][1] / 2));\n        let p = startNode;\n        const newTreeNode = [];\n        for (let j = Math.floor(losedRange[i][1] / 2); j <= Math.floor(losedRange[i][2] / 2); j++) {\n            if (p?.index === j && 2*j === difVals[count].i && p.level+1 === difVals[count].l) {\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                //@ts-ignore\n                // const yArray1: [number, number, number, number] = difVals[count].dif\n                //@ts-ignore\n                // const yArray2: [number, number, number, number] = difVals[count+1].dif\n                //@ts-ignore\n                const yArray1: [number, number, number, number, number] = difVals[count].dif\n                //@ts-ignore\n                const yArray2: [number, number, number, number, number] = difVals[count+1].dif\n               \n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n               \n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                p = p.nextSibling;\n                count+=2;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n        }\n        if (manager.levelIndexObjs[losedRange[i][0]]) {\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0]] = new LevelIndexObj(losedRange[i][0], false);\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n        // manager.updateDataCacheForRange(newTreeNode[0].level, newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index)\n    }\n    manager.addNodeNum(nodeNum);\n}\n\n\nexport async function loadDataForRangeLevel(losedRange: Array<Array<number>>, manager: any) {\n    if (losedRange.length <= 0) {\n        return\n    }\n    let nodeNum = 0\n    //await manager.batchLoadDataForRangeLevel(losedRange)\n    for (let i = losedRange.length - 1; i >= 0; i--) {\n        const levelRange = losedRange[i];\n        const difVal = await loadDif(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2), Math.floor(losedRange[i][2] / 2));\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0] - 1].getTreeNodeStartIndex(Math.floor(losedRange[i][1] / 2));\n        let p = startNode;\n        const newTreeNode = [];\n        let count = 0;\n        for (let j = Math.floor(losedRange[i][1] / 2); j <= Math.floor(losedRange[i][2] / 2); j++) {\n            if (p?.index === j) {\n                //@ts-ignore\n                p.difference = difVal[count];\n                // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                // yArray1[0] = p.yArray[0];\n                // yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                // if (p.difference![1] < 0) {\n                //     yArray1[1] = p.yArray[1];\n                //     yArray2[1] = p.yArray[1] - p.difference![1];\n                // } else {\n                //     yArray1[1] = p.yArray[1] + p.difference![1];\n                //     yArray2[1] = p.yArray[1]\n                // }\n                // if (p.difference![2] < 0) {\n                //     yArray1[2] = p.yArray[2] + p.difference![2];\n                //     yArray2[2] = p.yArray[2];\n                // } else {\n                //     yArray1[2] = p.yArray[2];\n                //     yArray2[2] = p.yArray[2] - p.difference![2];\n                // }\n                const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                yArray1[0] = p.yArray[0];\n                yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                yArray1[4] = p.yArray[4] + p.difference![4];\n                yArray2[4] = p.yArray[4];\n                if (p.difference![1] < 0) {\n                    yArray1[1] = p.yArray[1];\n                    yArray2[1] = p.yArray[1] - p.difference![1];\n                } else {\n                    yArray1[1] = p.yArray[1] + p.difference![1];\n                    yArray2[1] = p.yArray[1]\n                }\n                if (p.difference![2] < 0) {\n                    yArray1[2] = p.yArray[2] + p.difference![2];\n                    yArray2[2] = p.yArray[2];\n                } else {\n                    yArray1[2] = p.yArray[2];\n                    yArray2[2] = p.yArray[2] - p.difference![2];\n                }\n                if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                    yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                    yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                }\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                manager.cacheMap.set(firstNode.index, firstNode);\n                manager.cacheMap.set(secondNode.index, secondNode);\n                nodeNum += 2\n                p = p.nextSibling;\n                if (p === null) {\n                    break;\n                }\n                count++;\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            const k1 = newTreeNode[j + 1].yArray[2] - newTreeNode[j].yArray[1];\n            const k2 = newTreeNode[j + 1].yArray[1] - newTreeNode[j].yArray[2];\n            if (k1 < k2) {\n                debugger\n            }\n            newTreeNode[j].trendRange = k1 < k2 ? [newTreeNode[j + 1].yArray[2], newTreeNode[j].yArray[1], newTreeNode[j + 1].yArray[1], newTreeNode[j].yArray[2]] : [newTreeNode[j + 1].yArray[1], newTreeNode[j].yArray[2], newTreeNode[j + 1].yArray[2], newTreeNode[j].yArray[1]];\n        }\n        if (manager.levelIndexObjs[losedRange[i][0]]) {\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0]] = new LevelIndexObj(losedRange[i][0], false);\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n    manager.addNodeNum(nodeNum)\n}\n\n\n\n\n\n\n\n\n\n\nlet currentNum = 0;\nlet currentTag = \"\"\nexport async function batchLoadDataForRangeLevel1WS(losedRange: Array<Array<number>>, manager: any, tagName?: string) {\n    if (tagName === \"empty\") {\n        nodeNum.push(currentNum);\n        if(nodeNum.length==6){\n            \n            //pushTimeArray(nodeNum)\n            nodeNum=[]\n        }\n        currentNum = 0;\n        console.log(\"load node nums:\", nodeNum);\n        return\n    }\n    const difVals: Array<{ l: number, i: number }> = await batchLoadWithWs(losedRange, manager.dataName, \"level_load_data\", manager.maxLevel, tagName) as Array<{ l: number, i: number }>;\n    if (currentTag === tagName) {\n        currentNum += difVals.length;\n    } else {\n        currentTag = tagName!;\n        currentNum += difVals.length;\n    }\n\n    let count = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0]].getTreeNodeStartIndex(losedRange[i][1]);\n        let p = startNode;\n        const newTreeNode = [];\n        for (let j = losedRange[i][1]; j <= losedRange[i][2]; j++) {\n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                // yArray1[0] = p.yArray[0];\n                // yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                // if (p.difference![1] < 0) {\n                //     yArray1[1] = p.yArray[1];\n                //     yArray2[1] = p.yArray[1] - p.difference![1];\n                // } else {\n                //     yArray1[1] = p.yArray[1] + p.difference![1];\n                //     yArray2[1] = p.yArray[1]\n                // }\n                // if (p.difference![2] < 0) {\n                //     yArray1[2] = p.yArray[2] + p.difference![2];\n                //     yArray2[2] = p.yArray[2];\n                // } else {\n                //     yArray1[2] = p.yArray[2];\n                //     yArray2[2] = p.yArray[2] - p.difference![2];\n                // }\n                const yArray1: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                const yArray2: [number, number, number, number, number] = [0, 0, 0, 0, 0]\n                yArray1[0] = p.yArray[0];\n                yArray2[0] = p.yArray[0] - p.difference![0];\n                // yArray1[3] = p.yArray[3] + p.difference![3];\n                // yArray2[3] = p.yArray[3];\n                yArray1[4] = p.yArray[4] + p.difference![4];\n                yArray2[4] = p.yArray[4];\n                if (p.difference![1] < 0) {\n                    yArray1[1] = p.yArray[1];\n                    yArray2[1] = p.yArray[1] - p.difference![1];\n                } else {\n                    yArray1[1] = p.yArray[1] + p.difference![1];\n                    yArray2[1] = p.yArray[1]\n                }\n                if (p.difference![2] < 0) {\n                    yArray1[2] = p.yArray[2] + p.difference![2];\n                    yArray2[2] = p.yArray[2];\n                } else {\n                    yArray1[2] = p.yArray[2];\n                    yArray2[2] = p.yArray[2] - p.difference![2];\n                }\n                if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                    yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                    yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                }\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                manager.lruCache.set(firstNode.level+\"_\"+firstNode.index,firstNode);\n                manager.lruCache.set(secondNode.level+\"_\"+secondNode.index,secondNode);\n\n                p = p.nextSibling;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n\n        }\n        if (manager.levelIndexObjs[losedRange[i][0] + 1]) {\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0] + 1] = new LevelIndexObj(losedRange[i][0] + 1, false);\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n}\n\n//here\nexport async function batchLoadDataForRangeLevel1MinMaxMiss(losedRange: Array<Array<number>>, manager: any, tagName?: string){\n    let difVals: Array<{ l: number, i: number, dif?: Array<number> }>\n    if(store.state.controlParams.currentLineType==='Single'){\n        difVals= await batchLoadMinMaxMissWithWs(losedRange, manager.dataName, \"level_load_data_min_max_miss\", manager.maxLevel, tagName) as Array<{ l: number, i: number }>;\n    }else{\n        difVals= await batchLoadMinMaxMissWithPostForMultiLineType(losedRange, manager.dataName, \"level_load_data_min_max_miss\", manager.maxLevel, tagName)\n    }\n\n    let count = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n        const startNode = manager.levelIndexObjs[losedRange[i][0]].getTreeNodeStartIndex(losedRange[i][1]);\n        let p: TrendTree = startNode;\n        const newTreeNode = [];\n        for (let j = losedRange[i][1]; j <= losedRange[i][2];j++) {\n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n            // if (p?.index === j) {\n                let dif = difVals[count].dif!;\n                let curNodeType: \"O\" | \"NULL\" | \"LEFTNULL\" | \"RIGHTNULL\" = 'O';\n                if (dif[1] === null && dif[2] === null) {\n                    curNodeType = \"NULL\";\n                } else if (dif[1] === null) {\n                    curNodeType = \"LEFTNULL\"\n                    p.gapFlag=\"L\"\n                } else if (dif[2] === null) {\n                    curNodeType = \"RIGHTNULL\";\n                    p.gapFlag=\"R\"\n                }\n                if(curNodeType!==\"O\"){\n                    p.nodeType = curNodeType\n                }\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                // const yArray1: [any, any, any, any] = [undefined, undefined, undefined, undefined]\n                // const yArray2: [any, any, any, any] = [undefined, undefined, undefined, undefined]\n                const yArray1: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                const yArray2: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                if (curNodeType === 'O') {\n                    if (p.difference![1] < 0) {\n                        yArray1[1] = p.yArray[1];\n                        yArray2[1] = p.yArray[1] - p.difference![1];\n                    } else {\n                        yArray1[1] = p.yArray[1] + p.difference![1];\n                        yArray2[1] = p.yArray[1]\n                    }\n                    if (p.difference![2] < 0) {\n                        yArray1[2] = p.yArray[2] + p.difference![2];\n                        yArray2[2] = p.yArray[2];\n                    } else {\n                        yArray1[2] = p.yArray[2];\n                        yArray2[2] = p.yArray[2] - p.difference![2];\n                    }\n                    if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                        yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                        yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                    }\n                } else if (curNodeType == \"LEFTNULL\") {\n                   \n                    yArray2[1] = p.yArray[1];\n                    yArray2[2] = p.yArray[2];\n                    yArray2[3] = p.yArray[3] / 2;\n                  \n                } else if (curNodeType == \"RIGHTNULL\") {\n                 \n                    yArray1[1] = p.yArray[1];\n                    yArray1[2] = p.yArray[2];\n                    yArray1[3] = p.yArray[3] / 2;\n                  \n                } \n\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                if (p.nodeType === 'LEFTNULL' || p.nodeType === 'NULL') {\n                    firstNode.nodeType = 'NULL';\n                }\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                if (p.nodeType === 'RIGHTNULL' || p.nodeType == 'NULL') {\n                    secondNode.nodeType = 'NULL';\n                }\n                // if(firstNode.nodeType==='NULL'){\n                //     secondNode.gapFlag='L'\n                // }\n                // if(secondNode.nodeType==='NULL'){\n                //     firstNode.gapFlag='R';\n                // }\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                manager.lruCache.set(firstNode.level+\"_\"+firstNode.index,firstNode);\n                manager.lruCache.set(secondNode.level+\"_\"+secondNode.index,secondNode);\n                p = p.nextSibling!;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n\n        }\n        if (manager.levelIndexObjs[losedRange[i][0] + 1]) {\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0] + 1] = new LevelIndexObj(losedRange[i][0] + 1, false);\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n}\nexport async function batchLoadDataForRangeLevel2MinMaxMiss(losedRange: Array<Array<number>>, manager: any, tagName?: string){\n    let difVals: Array<{ l: number, i: number, dif?: Array<number> }>\n    if(store.state.controlParams.currentLineType==='Single'){\n        difVals= await batchLoadMinMaxMissWithWs(losedRange, manager.dataName, \"level_load_data_min_max_miss\", manager.maxLevel, tagName) as Array<{ l: number, i: number }>;\n    }else{\n        difVals= await batchLoadMinMaxMissWithPostForMultiLineType(losedRange, manager.dataName, \"level_load_data_min_max_miss\", manager.maxLevel, tagName)\n    }\n    \n    let count = 0;\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0]].getTreeNodeStartIndex(losedRange[i][1]);\n        let p: TrendTree = startNode;\n        const newTreeNode = [];\n        for (let j = losedRange[i][1]; j <= losedRange[i][2];j++) {\n            if(p.nodeType===\"NULL\"){\n                p=p.nextSibling!;\n                //debugger\n                continue\n            }\n            if(p?.index !== j || j !== difVals[count].i){\n                continue\n            }\n           \n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                let dif = difVals[count].dif!;\n                let curNodeType: \"O\" | \"NULL\" | \"LEFTNULL\" | \"RIGHTNULL\" = 'O';\n                if (dif[1] === null && dif[2] === null) {\n                    curNodeType = \"NULL\";\n                } else if (dif[1] === null) {\n                    curNodeType = \"LEFTNULL\"\n                    p.gapFlag='L'\n                } else if (dif[2] === null) {\n                    curNodeType = \"RIGHTNULL\";\n                    p.gapFlag='R'\n                }\n                if(curNodeType!==\"O\"){\n                    p.nodeType = curNodeType\n                }\n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                // const yArray1: [any, any, any, any] = [undefined, undefined, undefined, undefined]\n                // const yArray2: [any, any, any, any] = [undefined, undefined, undefined, undefined]\n                // if (curNodeType === 'O') {\n                    \n                   \n                //     if (p.difference![1] < 0) {\n                //         yArray1[1] = p.yArray[1];\n                //         yArray2[1] = p.yArray[1] - p.difference![1];\n                //     } else {\n                //         yArray1[1] = p.yArray[1] + p.difference![1];\n                //         yArray2[1] = p.yArray[1]\n                //     }\n                //     if (p.difference![2] < 0) {\n                //         yArray1[2] = p.yArray[2] + p.difference![2];\n                //         yArray2[2] = p.yArray[2];\n                //     } else {\n                //         yArray1[2] = p.yArray[2];\n                //         yArray2[2] = p.yArray[2] - p.difference![2];\n                //     }\n                // } else if (curNodeType == \"LEFTNULL\") {\n                   \n                //     yArray2[1] = p.yArray[1];\n                //     yArray2[2] = p.yArray[2];\n                  \n                // } else if (curNodeType == \"RIGHTNULL\") {\n                 \n                //     yArray1[1] = p.yArray[1];\n                //     yArray1[2] = p.yArray[2];\n                  \n                // } \n                const yArray1: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                const yArray2: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                if (curNodeType === 'O') {\n                    if (p.difference![1] < 0) {\n                        yArray1[1] = p.yArray[1];\n                        yArray2[1] = p.yArray[1] - p.difference![1];\n                    } else {\n                        yArray1[1] = p.yArray[1] + p.difference![1];\n                        yArray2[1] = p.yArray[1]\n                    }\n                    if (p.difference![2] < 0) {\n                        yArray1[2] = p.yArray[2] + p.difference![2];\n                        yArray2[2] = p.yArray[2];\n                    } else {\n                        yArray1[2] = p.yArray[2];\n                        yArray2[2] = p.yArray[2] - p.difference![2];\n                    }\n                    if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                        yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                        yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                    }\n                } else if (curNodeType == \"LEFTNULL\") {\n                    yArray2[1] = p.yArray[1];\n                    yArray2[2] = p.yArray[2];\n                    yArray2[3] = p.yArray[3] / 2;\n                } else if (curNodeType == \"RIGHTNULL\") {\n                    yArray1[1] = p.yArray[1];\n                    yArray1[2] = p.yArray[2];\n                    yArray1[3] = p.yArray[3] / 2;\n                } \n\n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                if (p.nodeType === 'LEFTNULL' || p.nodeType === 'NULL') {\n                    firstNode.nodeType = 'NULL';\n                }\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                if (p.nodeType === 'RIGHTNULL' || p.nodeType == 'NULL') {\n                    secondNode.nodeType = 'NULL';\n                }\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                manager.lruCache.set(firstNode.level+\"_\"+firstNode.index,firstNode);\n                manager.lruCache.set(secondNode.level+\"_\"+secondNode.index,secondNode);\n                p = p.nextSibling!;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                console.error(\"sibling index error\")\n                //throw new Error(\"sibling index error\");\n            }\n\n        }\n        if (manager.levelIndexObjs[losedRange[i][0] + 1]) {\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0] + 1] = new LevelIndexObj(losedRange[i][0] + 1, false);\n            manager.levelIndexObjs[losedRange[i][0] + 1].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n}\nexport async function batchLoadDataForRangeLevelForMinMaxMiss(losedRange: Array<Array<number>>, manager: any) {\n    const difVals = await batchLoadDifWidthPostForMinMaxMiss(losedRange, manager);\n    let count = 0;\n    let nodeNum = 0;\n    debugger\n    for (let i = 0; i < losedRange.length; i++) {\n        const levelRange = losedRange[i];\n\n        const startNode = manager.levelIndexObjs[losedRange[i][0] - 1].getTreeNodeStartIndex(Math.floor(losedRange[i][1] / 2));\n        let p = startNode;\n        const newTreeNode = [];\n        for (let j = Math.floor(losedRange[i][1] / 2); j <= Math.floor(losedRange[i][2] / 2); j++) {\n            if (p?.index === j && j === difVals[count].i && p.level === difVals[count].l) {\n                let dif = difVals[count].dif!;\n                let curNodeType: \"O\" | \"NULL\" | \"LEFTNULL\" | \"RIGHTNULL\" = 'O';\n                if (dif[1] === null && dif[2] === null) {\n                    throw new Error(\"data error\")\n                   // curNodeType = \"NULL\";\n                } else if (dif[1] === null) {\n                    curNodeType = \"LEFTNULL\"\n                } else if (dif[2] === null) {\n                    curNodeType = \"RIGHTNULL\";\n                }\n                if(curNodeType!==\"O\"){\n                    p.nodeType = curNodeType\n                }\n               \n                //@ts-ignore\n                p.difference = difVals[count].dif;\n                // const yArray1: [number, number, number, number] = [0, 0, 0, 0]\n                // const yArray2: [number, number, number, number] = [0, 0, 0, 0]\n                // if(curNodeType==='O'){\n                //     if (p.difference![1] < 0) {\n                //         yArray1[1] = p.yArray[1];\n                //         yArray2[1] = p.yArray[1] - p.difference![1];\n                //     } else {\n                //         yArray1[1] = p.yArray[1] + p.difference![1];\n                //         yArray2[1] = p.yArray[1]\n                //     }\n                //     if (p.difference![2] < 0) {\n                //         yArray1[2] = p.yArray[2] + p.difference![2];\n                //         yArray2[2] = p.yArray[2];\n                //     } else {\n                //         yArray1[2] = p.yArray[2];\n                //         yArray2[2] = p.yArray[2] - p.difference![2];\n                //     }\n                // }else if(curNodeType===\"LEFTNULL\"){\n                //     yArray2[1] = p.yArray[1];\n                //     yArray2[2] = p.yArray[2];\n                // }else if(curNodeType===\"RIGHTNULL\"){\n                //     yArray1[1] = p.yArray[1];\n                //     yArray1[2] = p.yArray[2];\n                // }\n                const yArray1: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                const yArray2: [any, any, any, any, any] = [undefined, undefined, undefined, undefined, undefined]\n                if (curNodeType === 'O') {\n                    \n                   \n                    if (p.difference![1] < 0) {\n                        yArray1[1] = p.yArray[1];\n                        yArray2[1] = p.yArray[1] - p.difference![1];\n                    } else {\n                        yArray1[1] = p.yArray[1] + p.difference![1];\n                        yArray2[1] = p.yArray[1]\n                    }\n                    if (p.difference![2] < 0) {\n                        yArray1[2] = p.yArray[2] + p.difference![2];\n                        yArray2[2] = p.yArray[2];\n                    } else {\n                        yArray1[2] = p.yArray[2];\n                        yArray2[2] = p.yArray[2] - p.difference![2];\n                    }\n                    if(p.difference![3] <= 0 || p.difference![3] >= 0){\n                        yArray1[3] = (p.yArray[3] * 2 + p.difference![3]) / 2; \n                        yArray2[3] = (p.yArray[3] * 2 - p.difference![3]) / 2; \n                    }\n                } else if (curNodeType == \"LEFTNULL\") {\n                   \n                    yArray2[1] = p.yArray[1];\n                    yArray2[2] = p.yArray[2];\n                    yArray2[3] = p.yArray[3] / 2;\n                  \n                } else if (curNodeType == \"RIGHTNULL\") {\n                 \n                    yArray1[1] = p.yArray[1];\n                    yArray1[2] = p.yArray[2];\n                    yArray1[3] = p.yArray[3] / 2;\n                  \n                } \n               \n                const firstNode = new TrendTree(p, true, p.index, yArray1, null);\n                if (p.nodeType === 'LEFTNULL' || p.nodeType === 'NULL') {\n                    firstNode.nodeType = 'NULL';\n                }\n                const secondNode = new TrendTree(p, false, p.index, yArray2, null);\n                if (p.nodeType === 'RIGHTNULL' || p.nodeType == 'NULL') {\n                    secondNode.nodeType = 'NULL';\n                }\n                manager.cacheMap.set(firstNode.index, firstNode);\n                manager.cacheMap.set(secondNode.index, secondNode);\n                nodeNum += 2\n                newTreeNode.push(firstNode);\n                newTreeNode.push(secondNode);\n                p = p.nextSibling;\n                count++;\n                if (p === null || count >= difVals.length) {\n                    break;\n                }\n\n            } else {\n                console.log(losedRange[i][0] - 1, Math.floor(losedRange[i][1] / 2))\n                console.log(\"lose range:\", losedRange, p, p?.index, j);\n                console.log(manager.levelIndexObjs);\n                debugger\n                throw new Error(\"dif not match node\");\n            }\n        }\n        for (let j = 0; j < newTreeNode.length - 1; j++) {\n            newTreeNode[j].nextSibling = newTreeNode[j + 1];\n            newTreeNode[j + 1].previousSibling = newTreeNode[j];\n            if (newTreeNode[j].index != newTreeNode[j + 1].index - 1) {\n                throw new Error(\"sibling index error\");\n            }\n        }\n        debugger\n        if (manager.levelIndexObjs[losedRange[i][0]]) {\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        } else {\n            manager.levelIndexObjs[losedRange[i][0]] = new LevelIndexObj(losedRange[i][0], false);\n            manager.levelIndexObjs[losedRange[i][0]].addLoadedDataRange(newTreeNode[0], [newTreeNode[0].index, newTreeNode[newTreeNode.length - 1].index]);\n        }\n    }\n}\n\n"],"mappings":"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","ignoreList":[]}]}