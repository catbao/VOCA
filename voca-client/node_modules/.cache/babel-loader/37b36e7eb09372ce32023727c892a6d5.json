{"remainingRequest":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/babel-loader/lib/index.js!/Users/bao/Downloads/om3-extend/om3-client/node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!/Users/bao/Downloads/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/bao/Downloads/om3-extend/om3-client/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/bao/Downloads/om3-extend/om3-client/src/components/LeftSideDataControlPanel.vue?vue&type=template&id=5e9b4a3f&scoped=true","dependencies":[{"path":"/Users/bao/Downloads/om3-extend/om3-client/src/components/LeftSideDataControlPanel.vue","mtime":1737974880786},{"path":"/Users/bao/Downloads/om3-extend/om3-client/babel.config.js","mtime":1732546288000},{"path":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js","mtime":1732627998000},{"path":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/babel-loader/lib/index.js","mtime":1732627998000},{"path":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1732627997000},{"path":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/cache-loader/dist/cjs.js","mtime":1732627998000},{"path":"/Users/bao/Downloads/om3-extend/om3-client/node_modules/vue-loader-v16/dist/index.js","mtime":1732627996000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdk1vZGVsVGV4dCBhcyBfdk1vZGVsVGV4dCwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB3aXRoTW9kaWZpZXJzIGFzIF93aXRoTW9kaWZpZXJzIH0gZnJvbSAidnVlIjsKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImRhdGEtY29udHJvbC1wYW5lbCByYWRpdXMiCn07CmNvbnN0IF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJkLWZsZXggbXMtMiIsCiAgbWFyZ2luVG9wOiAiMTBweCIKfTsKY29uc3QgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImNob29zZV9jb250YWluZXIgY2hvb3NlX21vZGVfY29udGFpbmVyIG1zLTEiCn07CmNvbnN0IF9ob2lzdGVkXzQgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAiZGJzZXR0aW5nLWNvbnRyb2wtY29udGFpbmVyIG10LTIiCn07CmNvbnN0IF9ob2lzdGVkXzUgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAibXQtMiIKfTsKY29uc3QgX2hvaXN0ZWRfNiA9IHsKICBrZXk6IDEsCiAgY2xhc3M6ICJvbTMtdHJhbnNmb3JtLWNvbnRyb2wtY29udGFpbmVyIG10LTIiCn07CmNvbnN0IF9ob2lzdGVkXzcgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAibXQtMiIKfTsKY29uc3QgX2hvaXN0ZWRfOCA9IHsKICBjbGFzczogImV4YW1wbGUtYmFzaWMiCn07CmNvbnN0IF9ob2lzdGVkXzkgPSB7CiAgY2xhc3M6ICJkaWFsb2ctZm9vdGVyIgp9Owpjb25zdCBfaG9pc3RlZF8xMCA9IHsKICBjbGFzczogImV4YW1wbGUtYmFzaWMiCn07CmNvbnN0IF9ob2lzdGVkXzExID0gewogIGNsYXNzOiAiZGlhbG9nLWZvb3RlciIKfTsKY29uc3QgX2hvaXN0ZWRfMTIgPSB7CiAga2V5OiAyLAogIGNsYXNzOiAicHJvZ3Jlc3NpdmUtY29udGFpbmVyIG1zLTEgbXQtMiIKfTsKY29uc3QgX2hvaXN0ZWRfMTMgPSB7CiAgY2xhc3M6ICJjbGFzcy1jaG9vc2UtY29udGFpbmVyIG10LTIgbXMtMSIKfTsKY29uc3QgX2hvaXN0ZWRfMTQgPSB7CiAgY2xhc3M6ICJjbGFzcy1jaG9vc2UtY29udGFpbmVyMiBtdC0yIG1zLTEiCn07CmNvbnN0IF9ob2lzdGVkXzE1ID0gewogIGNsYXNzOiAiY29tcHV0ZS1saW5lLWNvbnRhaW5lciBtdC0yIG1zLTEiCn07CmNvbnN0IF9ob2lzdGVkXzE2ID0gewogIGNsYXNzOiAiY29tcHV0ZS1saW5lLWNvbnRhaW5lciBtdC0yIG1zLTEiCn07CmNvbnN0IF9ob2lzdGVkXzE3ID0gewogIGNsYXNzOiAibXQtMiBtYi0xIgp9Owpjb25zdCBfaG9pc3RlZF8xOCA9IHsKICBjbGFzczogIm10LTIgbWItMSIKfTsKY29uc3QgX2hvaXN0ZWRfMTkgPSB7CiAgY2xhc3M6ICJjbGFzcy1jaG9vc2UtY29udGFpbmVyMiBtdC0yIG1zLTEiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgY29uc3QgX2NvbXBvbmVudF9lbF9yYWRpb19idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtcmFkaW8tYnV0dG9uIik7CiAgY29uc3QgX2NvbXBvbmVudF9lbF9yYWRpb19ncm91cCA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC1yYWRpby1ncm91cCIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfc3dpdGNoID0gX3Jlc29sdmVDb21wb25lbnQoImVsLXN3aXRjaCIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfaW5wdXQgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtaW5wdXQiKTsKICBjb25zdCBfY29tcG9uZW50X2VsX2J1dHRvbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC1idXR0b24iKTsKICBjb25zdCBfY29tcG9uZW50X2VsX3BvcGNvbmZpcm0gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtcG9wY29uZmlybSIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfb3B0aW9uID0gX3Jlc29sdmVDb21wb25lbnQoImVsLW9wdGlvbiIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoImVsLXNlbGVjdCIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfZm9ybV9pdGVtID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWZvcm0taXRlbSIpOwogIGNvbnN0IF9jb21wb25lbnRfZWxfZGF0ZV9waWNrZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtZGF0ZS1waWNrZXIiKTsKICBjb25zdCBfY29tcG9uZW50X2VsX3RpbWVfcGlja2VyID0gX3Jlc29sdmVDb21wb25lbnQoImVsLXRpbWUtcGlja2VyIik7CiAgY29uc3QgX2NvbXBvbmVudF9lbF9mb3JtID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWZvcm0iKTsKICBjb25zdCBfY29tcG9uZW50X2VsX2RpYWxvZyA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbC1kaWFsb2ciKTsKICBjb25zdCBfZGlyZWN0aXZlX2xvYWRpbmcgPSBfcmVzb2x2ZURpcmVjdGl2ZSgibG9hZGluZyIpOwogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoImlucHV0IiwgewogICAgdHlwZTogIm51bWJlciIsCiAgICBjbGFzczogImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc20gZGltLWlucHV0IiwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAkZXZlbnQgPT4gX2N0eC53aWR0aFJlZiA9ICRldmVudCkKICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLyksIFtbX3ZNb2RlbFRleHQsIF9jdHgud2lkdGhSZWZdXSksIF9jYWNoZVszM10gfHwgKF9jYWNoZVszM10gPSBfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogICAgc3R5bGU6IHsKICAgICAgImxpbmUtaGVpZ2h0IjogIjMxcHgiCiAgICB9CiAgfSwgIsOXIiwgLTEgLyogSE9JU1RFRCAqLykpLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAibnVtYmVyIiwKICAgIGNsYXNzOiAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSBkaW0taW5wdXQiLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9ICRldmVudCA9PiBfY3R4LmhlaWdodFJlZiA9ICRldmVudCkKICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLyksIFtbX3ZNb2RlbFRleHQsIF9jdHguaGVpZ2h0UmVmXV0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9yYWRpb19ncm91cCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5jaG9vc2VNb2RlLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9ICRldmVudCA9PiBfY3R4LmNob29zZU1vZGUgPSAkZXZlbnQpLAogICAgc2l6ZTogIm1lZGl1bSIsCiAgICBvbkNoYW5nZTogX2N0eC5oYW5kbGVNb2RlQ2hhbmdlCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3JhZGlvX2J1dHRvbiwgewogICAgICBsYWJlbDogIkRlZmF1bHQiCiAgICB9KSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfcmFkaW9fYnV0dG9uLCB7CiAgICAgIGxhYmVsOiAiQ3VzdG9tIgogICAgfSldKSwKICAgIF86IDEgLyogU1RBQkxFICovCiAgfSwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIiwgIm9uQ2hhbmdlIl0pXSksIF9jdHguY2hvb3NlTW9kZSA9PT0gJ0N1c3RvbScgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF80LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3N3aXRjaCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5pc09wZW5EYlNldHVwLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9ICRldmVudCA9PiBfY3R4LmlzT3BlbkRiU2V0dXAgPSAkZXZlbnQpLAogICAgbmFtZTogIkRCIFNldHVwIgogIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSJdKSwgX2NhY2hlWzM0XSB8fCAoX2NhY2hlWzM0XSA9IF9jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZygiREIgU2V0dXAiKSwgLTEgLyogSE9JU1RFRCAqLykpXSksIF9jdHguaXNPcGVuRGJTZXR1cCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzUsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pbnB1dCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5jdXN0b21EQkhvc3ROYW1lLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9ICRldmVudCA9PiBfY3R4LmN1c3RvbURCSG9zdE5hbWUgPSAkZXZlbnQpLAogICAgdHlwZTogInN0cmluZyIsCiAgICBwbGFjZWhvbGRlcjogIkRCIEhvc3QgTmFtZSIKICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2lucHV0LCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LmN1c3RvbVVzZXJOYW1lLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9ICRldmVudCA9PiBfY3R4LmN1c3RvbVVzZXJOYW1lID0gJGV2ZW50KSwKICAgIHR5cGU6ICJzdHJpbmciLAogICAgcGxhY2Vob2xkZXI6ICJVc2VyIE5hbWUiCiAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pbnB1dCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5jdXN0b21EQlBhc3N3b3JkLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbNl0gfHwgKF9jYWNoZVs2XSA9ICRldmVudCA9PiBfY3R4LmN1c3RvbURCUGFzc3dvcmQgPSAkZXZlbnQpLAogICAgdHlwZTogInBhc3N3b3JkIiwKICAgIHBsYWNlaG9sZGVyOiAiREIgUGFzc3dvcmQiCiAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pbnB1dCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5jdXN0b21EQk5hbWUsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVs3XSB8fCAoX2NhY2hlWzddID0gJGV2ZW50ID0+IF9jdHguY3VzdG9tREJOYW1lID0gJGV2ZW50KSwKICAgIHR5cGU6ICJzdHJpbmciLAogICAgcGxhY2Vob2xkZXI6ICJEQiBOYW1lIgogIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSJdKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2J1dHRvbiwgewogICAgY2xhc3M6ICJidG4gbXQtMiIsCiAgICBvbkNsaWNrOiBfY3R4LmhhbmRsZVRlc3RDb25uLAogICAgdHlwZTogInByaW1hcnkiCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhfY3R4LnRlc3RDb25uZWN0UmVzdWx0KSwgMSAvKiBURVhUICovKV0pLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9LCA4IC8qIFBST1BTICovLCBbIm9uQ2xpY2siXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2J1dHRvbiwgewogICAgY2xhc3M6ICJidG4gbXQtMiIsCiAgICBvbkNsaWNrOiBfY3R4LmNyZWF0ZUN1c3RvbURCQ29ubiwKICAgIHR5cGU6ICJwcmltYXJ5IgogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX2N0eC5jcmVhdGVEQkNvbm4pLCAxIC8qIFRFWFQgKi8pXSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0sIDggLyogUFJPUFMgKi8sIFsib25DbGljayJdKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfYnV0dG9uLCB7CiAgICBjbGFzczogImJ0biBtdC0yIiwKICAgIG9uQ2xpY2s6IF9jdHguaW5pdE9NM0RCRW52LAogICAgdHlwZTogInByaW1hcnkiCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhfY3R4LmluaXRPbTNEQiksIDEgLyogVEVYVCAqLyldKSwKICAgIF86IDEgLyogU1RBQkxFICovCiAgfSwgOCAvKiBQUk9QUyAqLywgWyJvbkNsaWNrIl0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9wb3Bjb25maXJtLCB7CiAgICB0aXRsZTogIlRoaXMgd2lsbCBjbGVhciBhbGwgb20zIHRhYmxlLCBhcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZG8gdGhpcz8iLAogICAgb25Db25maXJtOiBfY3R4LmNsZWFyT00zREJFbnYKICB9LCB7CiAgICByZWZlcmVuY2U6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9idXR0b24sIHsKICAgICAgY2xhc3M6ICJidG4gbXQtMiIsCiAgICAgIHR5cGU6ICJwcmltYXJ5IgogICAgfSwgewogICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKF9jdHguY2xlYXJPbTNEQiksIDEgLyogVEVYVCAqLyldKSwKICAgICAgXzogMSAvKiBTVEFCTEUgKi8KICAgIH0pXSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0sIDggLyogUFJPUFMgKi8sIFsib25Db25maXJtIl0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9idXR0b24sIHsKICAgIGNsYXNzOiAiYnRuIG10LTIiLAogICAgb25DbGljazogX2N0eC5jbGVhckluZGV4RmxhZywKICAgIHR5cGU6ICJwcmltYXJ5IgogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IF9jYWNoZVszNV0gfHwgKF9jYWNoZVszNV0gPSBbX2NyZWF0ZVRleHRWTm9kZSgiQ2xlYXIgRmxhZyIpXSkpLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9LCA4IC8qIFBST1BTICovLCBbIm9uQ2xpY2siXSldKV0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgX2N0eC5jaG9vc2VNb2RlID09PSAnQ3VzdG9tJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzYsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc3dpdGNoLCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LmlzT3BlblRyYW5zZm9ybSwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzhdIHx8IChfY2FjaGVbOF0gPSAkZXZlbnQgPT4gX2N0eC5pc09wZW5UcmFuc2Zvcm0gPSAkZXZlbnQpLAogICAgbmFtZTogIk9NMyBUcmFuc2Zvcm0iCiAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pLCBfY2FjaGVbMzZdIHx8IChfY2FjaGVbMzZdID0gX2NyZWF0ZUVsZW1lbnRWTm9kZSgibGFiZWwiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKCJEYXRhIFRyYW5zZm9ybSIpLCAtMSAvKiBIT0lTVEVEICovKSldKSwgX2N0eC5pc09wZW5UcmFuc2Zvcm0gPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF83LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgW19jdHguY2hvb3NlTGluZVR5cGUgPT09ICdTaW5nbGUnID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfYnV0dG9uLCB7CiAgICBrZXk6IDAsCiAgICBjbGFzczogImJ0biBtdC0yIiwKICAgIHRleHQ6ICIiLAogICAgb25DbGljazogX2NhY2hlWzldIHx8IChfY2FjaGVbOV0gPSAkZXZlbnQgPT4gX2N0eC5kaWFsb2dGb3JtVmlzaWJsZSA9IHRydWUpLAogICAgdHlwZTogInByaW1hcnkiCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gX2NhY2hlWzM3XSB8fCAoX2NhY2hlWzM3XSA9IFtfY3JlYXRlVGV4dFZOb2RlKCJDaG9vc2UgRGF0YSIpXSkpLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9KSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZGlhbG9nLCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LmRpYWxvZ0Zvcm1WaXNpYmxlLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMTVdIHx8IChfY2FjaGVbMTVdID0gJGV2ZW50ID0+IF9jdHguZGlhbG9nRm9ybVZpc2libGUgPSAkZXZlbnQpLAogICAgdGl0bGU6ICJTaW5nbGUgTGluZSBUcmFuc2Zvcm0iCiAgfSwgewogICAgZm9vdGVyOiBfd2l0aEN0eCgoKSA9PiBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIF9ob2lzdGVkXzksIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9idXR0b24sIHsKICAgICAgb25DbGljazogX2NhY2hlWzE0XSB8fCAoX2NhY2hlWzE0XSA9ICRldmVudCA9PiBfY3R4LmRpYWxvZ0Zvcm1WaXNpYmxlID0gZmFsc2UpCiAgICB9LCB7CiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IF9jYWNoZVszOV0gfHwgKF9jYWNoZVszOV0gPSBbX2NyZWF0ZVRleHRWTm9kZSgiQ2FuY2VsIildKSksCiAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICB9KSwgX3dpdGhEaXJlY3RpdmVzKChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2J1dHRvbiwgewogICAgICB0eXBlOiAicHJpbWFyeSIsCiAgICAgIG9uQ2xpY2s6IF9jdHgucGVyZm9ybVRyYW5zZm9ybUZvclNpbmdlTGluZQogICAgfSwgewogICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBfY2FjaGVbNDBdIHx8IChfY2FjaGVbNDBdID0gW19jcmVhdGVUZXh0Vk5vZGUoIiBDb25maXJtICIpXSkpLAogICAgICBfOiAxIC8qIFNUQUJMRSAqLwogICAgfSwgOCAvKiBQUk9QUyAqLywgWyJvbkNsaWNrIl0pKSwgW1tfZGlyZWN0aXZlX2xvYWRpbmcsIF9jdHguZnVsbHNjcmVlbkxvYWRpbmcsIHZvaWQgMCwgewogICAgICBmdWxsc2NyZWVuOiB0cnVlLAogICAgICBsb2NrOiB0cnVlCiAgICB9XV0pXSldKSwKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY2FjaGVbNDFdIHx8IChfY2FjaGVbNDFdID0gX2NyZWF0ZUVsZW1lbnRWTm9kZSgibGFiZWwiLCBudWxsLCAiUGxlYXNlIGNob29zZSBhIHRhYmxlLHdoaWNoIGluY2x1ZXMgdHdvIGNvbHVtbnModCBpbnRlcmdlcix2IGRvdWJsZSBwcmVjaXNpb24pKHQgc2hvdWxkIGJlIGEgcG9zaXRpdmUgaW50ZWdlciBzdGFydGluZyBmcm9tIHplcm8pIiwgLTEgLyogSE9JU1RFRCAqLykpLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9mb3JtLCBudWxsLCB7CiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9mb3JtX2l0ZW0sIHsKICAgICAgICBsYWJlbDogIlRhYmxlIgogICAgICB9LCB7CiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3NlbGVjdCwgewogICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5zaW5nbGVMaW5lVGFibGVOYW1lLAogICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMTBdIHx8IChfY2FjaGVbMTBdID0gJGV2ZW50ID0+IF9jdHguc2luZ2xlTGluZVRhYmxlTmFtZSA9ICRldmVudCksCiAgICAgICAgICBwbGFjZWhvbGRlcjogIlBsZWFzZSBzZWxlY3QgYSB0YWJsZSBmb3IgdHJhbnNmb3JtIgogICAgICAgIH0sIHsKICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHguYWxsQ3VzdG9tREJUYWJsZXMsIChpdGVtLCBpZHgpID0+IHsKICAgICAgICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfb3B0aW9uLCB7CiAgICAgICAgICAgICAga2V5OiBpZHgsCiAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0sCiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0KICAgICAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJsYWJlbCIsICJ2YWx1ZSJdKTsKICAgICAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKV0pLAogICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi8KICAgICAgICB9LCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSldKSwKICAgICAgICBfOiAxIC8qIFNUQUJMRSAqLwogICAgICB9KSwgX2NhY2hlWzM4XSB8fCAoX2NhY2hlWzM4XSA9IF9jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgbnVsbCwgIlBsZWFzZSBzZWxlY3QgYSBkYXRlIGFuZCB0aW1lLCB3aGljaCB3aWxsIGJlIGxpbmVhcmx5IG1hcHBlZCB0byB0IGR1cmluZyB2aXN1YWxpemF0aW9uICIsIC0xIC8qIEhPSVNURUQgKi8pKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZm9ybV9pdGVtLCB7CiAgICAgICAgbGFiZWw6ICJEYXRlIFJhbmdlIgogICAgICB9LCB7CiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2RhdGVfcGlja2VyLCB7CiAgICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmxpbmVEYXRlUmFuZ2UsCiAgICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxMV0gfHwgKF9jYWNoZVsxMV0gPSAkZXZlbnQgPT4gX2N0eC5saW5lRGF0ZVJhbmdlID0gJGV2ZW50KSwKICAgICAgICAgIHR5cGU6ICJkYXRlcmFuZ2UiLAogICAgICAgICAgInN0YXJ0LXBsYWNlaG9sZGVyIjogIlN0YXJ0IERhdGUiLAogICAgICAgICAgImVuZC1wbGFjZWhvbGRlciI6ICJFbmQgRGF0ZSIsCiAgICAgICAgICAiZGVmYXVsdC12YWx1ZSI6IFtuZXcgRGF0ZSgyMDEwLCA5LCAxKSwgbmV3IERhdGUoMjAxMCwgMTAsIDEpXQogICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSIsICJkZWZhdWx0LXZhbHVlIl0pXSksCiAgICAgICAgXzogMSAvKiBTVEFCTEUgKi8KICAgICAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2Zvcm1faXRlbSwgewogICAgICAgIGxhYmVsOiAiVGltZSBSYW5nZSIKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF84LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGltZV9waWNrZXIsIHsKICAgICAgICAgIG1vZGVsVmFsdWU6IF9jdHgubGluZVN0YXJ0VGltZSwKICAgICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzEyXSB8fCAoX2NhY2hlWzEyXSA9ICRldmVudCA9PiBfY3R4LmxpbmVTdGFydFRpbWUgPSAkZXZlbnQpLAogICAgICAgICAgImFycm93LWNvbnRyb2wiOiAiIiwKICAgICAgICAgIHBsYWNlaG9sZGVyOiAiU3RhcnQgVGltZSIKICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RpbWVfcGlja2VyLCB7CiAgICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmxpbmVFbmRUaW1lLAogICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMTNdIHx8IChfY2FjaGVbMTNdID0gJGV2ZW50ID0+IF9jdHgubGluZUVuZFRpbWUgPSAkZXZlbnQpLAogICAgICAgICAgImFycm93LWNvbnRyb2wiOiAiIiwKICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRW5kIFRpbWUiCiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pXSldKSwKICAgICAgICBfOiAxIC8qIFNUQUJMRSAqLwogICAgICB9KV0pLAogICAgICBfOiAxIC8qIFNUQUJMRSAqLwogICAgfSldKSwKICAgIF86IDEgLyogU1RBQkxFICovCiAgfSwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbX2N0eC5jaG9vc2VMaW5lVHlwZSA9PT0gJ011bHRpJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2J1dHRvbiwgewogICAga2V5OiAwLAogICAgY2xhc3M6ICJidG4gbXQtMiIsCiAgICB0ZXh0OiAiIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxNl0gfHwgKF9jYWNoZVsxNl0gPSAkZXZlbnQgPT4gX2N0eC5tdWx0aUxpbmVUcmFuc2Zvcm1EaWFsb2dWaXNpYmxlID0gdHJ1ZSksCiAgICB0eXBlOiAicHJpbWFyeSIKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBfY2FjaGVbNDJdIHx8IChfY2FjaGVbNDJdID0gW19jcmVhdGVUZXh0Vk5vZGUoIkNob29zZSBEYXRhIildKSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9kaWFsb2csIHsKICAgIG1vZGVsVmFsdWU6IF9jdHgubXVsdGlMaW5lVHJhbnNmb3JtRGlhbG9nVmlzaWJsZSwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzIzXSB8fCAoX2NhY2hlWzIzXSA9ICRldmVudCA9PiBfY3R4Lm11bHRpTGluZVRyYW5zZm9ybURpYWxvZ1Zpc2libGUgPSAkZXZlbnQpLAogICAgdGl0bGU6ICJNdWx0aSBMaW5lIFRyYW5zZm9ybSIKICB9LCB7CiAgICBmb290ZXI6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfMTEsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9idXR0b24sIHsKICAgICAgb25DbGljazogX2NhY2hlWzIyXSB8fCAoX2NhY2hlWzIyXSA9ICRldmVudCA9PiBfY3R4Lm11bHRpTGluZVRyYW5zZm9ybURpYWxvZ1Zpc2libGUgPSBmYWxzZSkKICAgIH0sIHsKICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gX2NhY2hlWzQ0XSB8fCAoX2NhY2hlWzQ0XSA9IFtfY3JlYXRlVGV4dFZOb2RlKCJDYW5jZWwiKV0pKSwKICAgICAgXzogMSAvKiBTVEFCTEUgKi8KICAgIH0pLCBfd2l0aERpcmVjdGl2ZXMoKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfYnV0dG9uLCB7CiAgICAgIHR5cGU6ICJwcmltYXJ5IiwKICAgICAgb25DbGljazogX2N0eC5wZXJmcm9tVHJhbnNmb3JtRm9yTXVsaXRMaW5lCiAgICB9LCB7CiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IF9jYWNoZVs0NV0gfHwgKF9jYWNoZVs0NV0gPSBbX2NyZWF0ZVRleHRWTm9kZSgiIENvbmZpcm0gIildKSksCiAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICB9LCA4IC8qIFBST1BTICovLCBbIm9uQ2xpY2siXSkpLCBbW19kaXJlY3RpdmVfbG9hZGluZywgX2N0eC5mdWxsc2NyZWVuTG9hZGluZywgdm9pZCAwLCB7CiAgICAgIGZ1bGxzY3JlZW46IHRydWUsCiAgICAgIGxvY2s6IHRydWUKICAgIH1dXSldKV0pLAogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jYWNoZVs0Nl0gfHwgKF9jYWNoZVs0Nl0gPSBfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIG51bGwsICJQbGVhc2UgY2hvb3NlIHRhYmxlcyx3aGljaCBpbmNsdWVzIHR3byBjb2x1bW5zKHQgaW50ZXJnZXIsdiBkb3VibGUgcHJlY2lzaW9uKSh0IHNob3VsZCBiZSBhIHBvc2l0aXZlIGludGVnZXIgc3RhcnRpbmcgZnJvbSB6ZXJvKS4gQWxsIHRoZSBkYXRhIHlvdSBjaG9vc2Ugc2hvdWxkIGJlIHRoZSBzYW1lIGxlbmd0aCIsIC0xIC8qIEhPSVNURUQgKi8pKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZm9ybSwgbnVsbCwgewogICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZm9ybV9pdGVtLCB7CiAgICAgICAgbGFiZWw6ICJUYWJsZSIKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9zZWxlY3QsIHsKICAgICAgICAgIGNsYXNzOiAibXVsdGktbGluZS1zZWxlY3QiLAogICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5tdWx0aUxpbmVUYWJsZU5hbWVzLAogICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMTddIHx8IChfY2FjaGVbMTddID0gJGV2ZW50ID0+IF9jdHgubXVsdGlMaW5lVGFibGVOYW1lcyA9ICRldmVudCksCiAgICAgICAgICBtdWx0aXBsZTogIiIsCiAgICAgICAgICBwbGFjZWhvbGRlcjogIlBsZWFzZSBzZWxlY3QgdGFibGUgZm9yIHRyYW5zZm9ybSIKICAgICAgICB9LCB7CiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4LmFsbEN1c3RvbURCVGFibGVzLCAoaXRlbSwgaWR4KSA9PiB7CiAgICAgICAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwgewogICAgICAgICAgICAgIGtleTogaWR4LAogICAgICAgICAgICAgIGxhYmVsOiBpdGVtLAogICAgICAgICAgICAgIHZhbHVlOiBpdGVtCiAgICAgICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibGFiZWwiLCAidmFsdWUiXSk7CiAgICAgICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSldKSwKICAgICAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICAgICAgfSwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pXSksCiAgICAgICAgXzogMSAvKiBTVEFCTEUgKi8KICAgICAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2lucHV0LCB7CiAgICAgICAgY2xhc3M6ICJtYi00IiwKICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmN1c3RvbU11bHRpTGluZUNsYXNzTmFtZSwKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxOF0gfHwgKF9jYWNoZVsxOF0gPSAkZXZlbnQgPT4gX2N0eC5jdXN0b21NdWx0aUxpbmVDbGFzc05hbWUgPSAkZXZlbnQpLAogICAgICAgIHBsYWNlaG9sZGVyOiAiUGxlYXNlIGRlZmluZSBhIGdyb3VwIGZvciB0aGUgbGluZXMgeW91IHNlbGVjdCIsCiAgICAgICAgY2xlYXJhYmxlOiAiIgogICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSksIF9jYWNoZVs0M10gfHwgKF9jYWNoZVs0M10gPSBfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIG51bGwsICJQbGVhc2Ugc2VsZWN0IGEgZGF0ZSBhbmQgdGltZSwgd2hpY2ggd2lsbCBiZSBsaW5lYXJseSBtYXBwZWQgdG8gdCBkdXJpbmcgdmlzdWFsaXphdGlvbiAiLCAtMSAvKiBIT0lTVEVEICovKSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2Zvcm1faXRlbSwgewogICAgICAgIGxhYmVsOiAiRGF0ZSBSYW5nZSIKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9kYXRlX3BpY2tlciwgewogICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5saW5lRGF0ZVJhbmdlLAogICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMTldIHx8IChfY2FjaGVbMTldID0gJGV2ZW50ID0+IF9jdHgubGluZURhdGVSYW5nZSA9ICRldmVudCksCiAgICAgICAgICB0eXBlOiAiZGF0ZXJhbmdlIiwKICAgICAgICAgICJzdGFydC1wbGFjZWhvbGRlciI6ICJTdGFydCBEYXRlIiwKICAgICAgICAgICJlbmQtcGxhY2Vob2xkZXIiOiAiRW5kIERhdGUiLAogICAgICAgICAgImRlZmF1bHQtdmFsdWUiOiBbbmV3IERhdGUoMjAxMCwgOSwgMSksIG5ldyBEYXRlKDIwMTAsIDEwLCAxKV0KICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiLCAiZGVmYXVsdC12YWx1ZSJdKV0pLAogICAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICAgIH0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9mb3JtX2l0ZW0sIHsKICAgICAgICBsYWJlbDogIlRpbWUgUmFuZ2UiCiAgICAgIH0sIHsKICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTAsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90aW1lX3BpY2tlciwgewogICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5saW5lU3RhcnRUaW1lLAogICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMjBdIHx8IChfY2FjaGVbMjBdID0gJGV2ZW50ID0+IF9jdHgubGluZVN0YXJ0VGltZSA9ICRldmVudCksCiAgICAgICAgICAiYXJyb3ctY29udHJvbCI6ICIiLAogICAgICAgICAgcGxhY2Vob2xkZXI6ICJTdGFydCBUaW1lIgogICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGltZV9waWNrZXIsIHsKICAgICAgICAgIG1vZGVsVmFsdWU6IF9jdHgubGluZUVuZFRpbWUsCiAgICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyMV0gfHwgKF9jYWNoZVsyMV0gPSAkZXZlbnQgPT4gX2N0eC5saW5lRW5kVGltZSA9ICRldmVudCksCiAgICAgICAgICAiYXJyb3ctY29udHJvbCI6ICIiLAogICAgICAgICAgcGxhY2Vob2xkZXI6ICJFbmQgVGltZSIKICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSldKV0pLAogICAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICAgIH0pXSksCiAgICAgIF86IDEgLyogU1RBQkxFICovCiAgICB9KV0pLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9LCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiXSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSksIF9jcmVhdGVDb21tZW50Vk5vZGUoIiA8ZGl2IGNsYXNzPVwiY2hvb3NlX2NvbnRhaW5lciBjaG9vc2VfbGluZV90eXBlX2NvbnRhaW5lciBtcy0xXCI+XG4gICAgICA8ZWwtcmFkaW8tZ3JvdXAgdi1tb2RlbD1cImNob29zZUxpbmVUeXBlXCIgc2l6ZT1cIm1lZGl1bVwiIEBjaGFuZ2U9XCJoYW5kbGVMaW5lVHlwZUNoYW5nZVwiPlxuICAgICAgICA8ZWwtcmFkaW8tYnV0dG9uIGxhYmVsPVwiU2luZ2xlXCI+PC9lbC1yYWRpby1idXR0b24+XG4gICAgICAgIDxlbC1yYWRpby1idXR0b24gbGFiZWw9XCJNdWx0aVwiPjwvZWwtcmFkaW8tYnV0dG9uPlxuICAgICAgPC9lbC1yYWRpby1ncm91cD5cbiAgICA8L2Rpdj4gIiksIF9jdHguY2hvb3NlTGluZVR5cGUgPT09ICdTaW5nbGUnID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMTIsIFtfY2FjaGVbNDddIHx8IChfY2FjaGVbNDddID0gX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsICJQcm9ncmVzc2l2ZSIsIC0xIC8qIEhPSVNURUQgKi8pKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc3dpdGNoLCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LnByb2dyZXNzaXZlLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMjRdIHx8IChfY2FjaGVbMjRdID0gJGV2ZW50ID0+IF9jdHgucHJvZ3Jlc3NpdmUgPSAkZXZlbnQpLAogICAgbmFtZTogIlByb2dyZXNzaXZlIiwKICAgIG9uQ2hhbmdlOiBfY3R4LmhhbmRsZVByb2dyZXNzaXZlQ2hhbmdlCiAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIiwgIm9uQ2hhbmdlIl0pXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xMywgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3NlbGVjdCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5jdXJyZW50TXVsdGlDbGFzcywKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzI1XSB8fCAoX2NhY2hlWzI1XSA9ICRldmVudCA9PiBfY3R4LmN1cnJlbnRNdWx0aUNsYXNzID0gJGV2ZW50KSwKICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IiwKICAgIHNpemU6ICJtZWRpdW0iLAogICAgb25DaGFuZ2U6IF9jdHguaGFuZGxlTXVsdGlMaW5lQ2xhc3NDaGFuZ2UsCiAgICBvbkZvY3VzOiBfY3R4Lm9uRm9jdXMKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm11bHRpTGluZUNsYXNzQW5kTGluZXNNYXAuZ2V0KCd0YWJsZXMnKSwgKGl0ZW0sIGlkeCkgPT4gewogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHsKICAgICAgICBrZXk6IGlkeCwKICAgICAgICBsYWJlbDogaXRlbSwKICAgICAgICB2YWx1ZTogaXRlbQogICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbImxhYmVsIiwgInZhbHVlIl0pOwogICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0sIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSIsICJvbkNoYW5nZSIsICJvbkZvY3VzIl0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzE0LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LmN1cnJlbnRNdWx0aUNsYXNzTGluZXMsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyNl0gfHwgKF9jYWNoZVsyNl0gPSAkZXZlbnQgPT4gX2N0eC5jdXJyZW50TXVsdGlDbGFzc0xpbmVzID0gJGV2ZW50KSwKICAgIG11bHRpcGxlOiAiIiwKICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IiwKICAgIHNpemU6ICJtZWRpdW0iLAogICAgb25DaGFuZ2U6IF9jdHguaGFuZGxlQ29sdW1uc0NoYW5nZSwKICAgIG9uRm9jdXM6IF9jdHgub25Gb2N1c0NvbHVtbnMKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm11bHRpTGluZUNsYXNzQW5kTGluZXNNYXAuZ2V0KCdjb2x1bW5zJyksIChpdGVtLCBpZHgpID0+IHsKICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfb3B0aW9uLCB7CiAgICAgICAga2V5OiBpZHgsCiAgICAgICAgbGFiZWw6IGl0ZW0sCiAgICAgICAgdmFsdWU6IGl0ZW0KICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJsYWJlbCIsICJ2YWx1ZSJdKTsKICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKV0pLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9LCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiLCAib25DaGFuZ2UiLCAib25Gb2N1cyJdKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xNSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3NlbGVjdCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5zZWxlY3RlZE9wdGlvbiwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzI3XSB8fCAoX2NhY2hlWzI3XSA9ICRldmVudCA9PiBfY3R4LnNlbGVjdGVkT3B0aW9uID0gJGV2ZW50KSwKICAgIHBsYWNlaG9sZGVyOiAiT3BlcmF0b3IiLAogICAgb25DaGFuZ2U6IF9jdHguaGFuZGxlU2VsZWN0ZWRPcHRpb24sCiAgICBvbkZvY3VzOiBfY3R4Lm9uRm9jdXNGdW5jdGlvbnMKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm11bHRpTGluZUNsYXNzQW5kTGluZXNNYXAuZ2V0KCdmdW5jdGlvbnMnKSwgKGl0ZW0sIGlkeCkgPT4gewogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHsKICAgICAgICBrZXk6IGlkeCwKICAgICAgICBsYWJlbDogaXRlbSwKICAgICAgICB2YWx1ZTogaXRlbQogICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbImxhYmVsIiwgInZhbHVlIl0pOwogICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0sIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSIsICJvbkNoYW5nZSIsICJvbkZvY3VzIl0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzE2LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7CiAgICBtb2RlbFZhbHVlOiBfY3R4LnNlbGVjdGVkQWdncmVnYXRlLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMjhdIHx8IChfY2FjaGVbMjhdID0gJGV2ZW50ID0+IF9jdHguc2VsZWN0ZWRBZ2dyZWdhdGUgPSAkZXZlbnQpLAogICAgcGxhY2Vob2xkZXI6ICJBZ2dyZWdhdGUiLAogICAgb25DaGFuZ2U6IF9jdHguaGFuZGxlU2VsZWN0ZWRBZ2dyZWdhdGUsCiAgICBvbkZvY3VzOiBfY3R4Lm9uRm9jdXNBZ2dyZWdhdGUKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm11bHRpTGluZUNsYXNzQW5kTGluZXNNYXAuZ2V0KCdhZ2dyZWdhdGVzJyksIChpdGVtLCBpZHgpID0+IHsKICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfb3B0aW9uLCB7CiAgICAgICAga2V5OiBpZHgsCiAgICAgICAgbGFiZWw6IGl0ZW0sCiAgICAgICAgdmFsdWU6IGl0ZW0KICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJsYWJlbCIsICJ2YWx1ZSJdKTsKICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKV0pLAogICAgXzogMSAvKiBTVEFCTEUgKi8KICB9LCA4IC8qIFBST1BTICovLCBbIm1vZGVsVmFsdWUiLCAib25DaGFuZ2UiLCAib25Gb2N1cyJdKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xNywgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3NlbGVjdCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5zZWxlY3RlZEV4cGVyaW1lbnQsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyOV0gfHwgKF9jYWNoZVsyOV0gPSAkZXZlbnQgPT4gX2N0eC5zZWxlY3RlZEV4cGVyaW1lbnQgPSAkZXZlbnQpLAogICAgcGxhY2Vob2xkZXI6ICJFeHBlcmltZW50IiwKICAgIG9uQ2hhbmdlOiBfY3R4LmhhbmRsZVNlbGVjdGVkRXhwZXJpbWVudCwKICAgIG9uRm9jdXM6IF9jdHgub25Gb2N1c0V4cGVyaW1lbnQKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm11bHRpTGluZUNsYXNzQW5kTGluZXNNYXAuZ2V0KCdleHBlcmltZW50cycpLCAoaXRlbSwgaWR4KSA9PiB7CiAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwgewogICAgICAgIGtleTogaWR4LAogICAgICAgIGxhYmVsOiBpdGVtLAogICAgICAgIHZhbHVlOiBpdGVtCiAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFsibGFiZWwiLCAidmFsdWUiXSk7CiAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSldKSwKICAgIF86IDEgLyogU1RBQkxFICovCiAgfSwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIiwgIm9uQ2hhbmdlIiwgIm9uRm9jdXMiXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTgsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pbnB1dCwgewogICAgbW9kZWxWYWx1ZTogX2N0eC5lcnJvckJvdW5kLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMzBdIHx8IChfY2FjaGVbMzBdID0gJGV2ZW50ID0+IF9jdHguZXJyb3JCb3VuZCA9ICRldmVudCksCiAgICBwbGFjZWhvbGRlcjogImVycm9yQm91bmQiCiAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgWyJtb2RlbFZhbHVlIl0pXSksIF9jcmVhdGVDb21tZW50Vk5vZGUoIiA8ZGl2IGNsYXNzPVwibXQtMiBtYi0xXCI+XG4gICAgICA8ZWwtc2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZENvbXB1dGVPclNob3dcIiBwbGFjZWhvbGRlcj1cIkNvbXB1dGUvU2hvd1wiIEBjaGFuZ2U9XCJoYW5kbGVTZWxlY3RlZENvbXB1dGVPclNob3dcIj5cbiAgICAgICAgPGVsLW9wdGlvbiBsYWJlbD1cImNvbXB1dGVcIiB2YWx1ZT1cImNvbXB1dGVcIj48L2VsLW9wdGlvbj5cbiAgICAgICAgPGVsLW9wdGlvbiBsYWJlbD1cInNob3dcIiB2YWx1ZT1cInNob3dcIj48L2VsLW9wdGlvbj5cbiAgICAgIDwvZWwtc2VsZWN0PlxuICAgIDwvZGl2PiAiKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTksIFtfY3R4LmNob29zZU1vZGUgPT09ICdDdXN0b20nID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7CiAgICBrZXk6IDAsCiAgICBtb2RlbFZhbHVlOiBfY3R4LmN1cnJlbnRNdWx0aUNsYXNzQUxpbmUsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVszMV0gfHwgKF9jYWNoZVszMV0gPSAkZXZlbnQgPT4gX2N0eC5jdXJyZW50TXVsdGlDbGFzc0FMaW5lID0gJGV2ZW50KSwKICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IiwKICAgIHNpemU6ICJtZWRpdW0iLAogICAgb25DaGFuZ2U6IF9jdHguaGFuZGxlTXVsdGlMaW5lQ2xhc3NBTGluZUNoYW5nZQogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHgubXVsdGlMaW5lQ2xhc3NBbmRMaW5lc01hcC5nZXQoJ21vY2snKSwgKGl0ZW0sIGlkeCkgPT4gewogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHsKICAgICAgICBrZXk6IGlkeCwKICAgICAgICBsYWJlbDogaXRlbSwKICAgICAgICB2YWx1ZTogaXRlbQogICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbImxhYmVsIiwgInZhbHVlIl0pOwogICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXSksCiAgICBfOiAxIC8qIFNUQUJMRSAqLwogIH0sIDggLyogUFJPUFMgKi8sIFsibW9kZWxWYWx1ZSIsICJvbkNoYW5nZSJdKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKSwgX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIDxkaXYgY2xhc3M9XCJ0YWJsZS1jaG9vc2UtY29udGFpbmVyIG10LTIgbXMtMVwiPlxuICAgICAgPGVsLXNlbGVjdCB2LW1vZGVsPVwiY3VycmVudFRhYmxlXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3RcIiBzaXplPVwibWVkaXVtXCIgdi1pZj1cImNob29zZU1vZGUgPT09ICdEZWZhdWx0J1wiXG4gICAgICAgIEBjaGFuZ2U9XCJoYW5kbGVUYWJsZUNoYW5nZVwiPlxuICAgICAgICA8ZWwtb3B0aW9uIHYtZm9yPVwiKGl0ZW0sIGlkeCkgaW4gYWxsRGVmYXVsdFRhYmxlc1wiIDprZXk9XCJpZHhcIiA6bGFiZWw9XCJpdGVtXCIgOnZhbHVlPVwiaXRlbVwiPlxuICAgICAgICA8L2VsLW9wdGlvbj5cbiAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPGVsLXNlbGVjdCB2LW1vZGVsPVwiY3VycmVudFRhYmxlXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3RcIiBzaXplPVwibWVkaXVtXCIgdi1vbjpjbGljaz1cImxvYWRDdXN0b21UYWJsZUFuZEluZm9cIlxuICAgICAgICB2LWlmPVwiY2hvb3NlTW9kZSA9PT0gJ0N1c3RvbSdcIiBAY2hhbmdlPVwiaGFuZGxlVGFibGVDaGFuZ2VcIj5cbiAgICAgICAgPGVsLW9wdGlvbiB2LWZvcj1cIihpdGVtLCBpZHgpIGluIGFsbEN1c3RvbVRhYmxlc1wiIDprZXk9XCJpZHhcIiA6bGFiZWw9XCJpdGVtXCIgOnZhbHVlPVwiaXRlbVwiPlxuICAgICAgICA8L2VsLW9wdGlvbj5cbiAgICAgIDwvZWwtc2VsZWN0PlxuICAgIDwvZGl2PiAiKSwgX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIDxkaXYgY2xhc3M9XCJtdC0yIG1iLTFcIiB2LWlmPVwiY2hvb3NlTGluZVR5cGUgPT0gJ011bHRpJ1wiPlxuICAgICAgICA8ZWwtc3dpdGNoIHYtbW9kZWw9XCJpc1N0b3BFYXJseVwiIG5hbWU9XCJPTTMgU3RvcEVhcmx5XCIgLz5cbiAgICAgICAgPGxhYmVsPnt7IFwiU3RvcCBFYXJseVwiIH19PC9sYWJlbD5cbiAgICA8L2Rpdj4gIiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBpZDogImNyZWF0ZV9wYW5lbF9idG4iLAogICAgdHlwZTogImJ1dHRvbiIsCiAgICBjbGFzczogImJ0biBidG4tc2Vjb25kYXJ5IG1zLTIgbXQtMiBtbC00IiwKICAgIHN0eWxlOiB7CiAgICAgICJ3aWR0aCI6ICIxMDBweCIsCiAgICAgICJoZWlnaHQiOiAiNDBweCIKICAgIH0sCiAgICBvbkNsaWNrOiBfY2FjaGVbMzJdIHx8IChfY2FjaGVbMzJdID0gX3dpdGhNb2RpZmllcnMoKC4uLmFyZ3MpID0+IF9jdHguaGFuZGxlQ29tcHV0ZVBhbmVsICYmIF9jdHguaGFuZGxlQ29tcHV0ZVBhbmVsKC4uLmFyZ3MpLCBbInByZXZlbnQiXSkpCiAgfSwgIiBjcmVhdGUgIildKSwgX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIDxkaXY+XG4gICAgICA8YnV0dG9uIGlkPVwiY3JlYXRlX3BhbmVsX2J0bjJcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBtcy0yIG10LTIgbWwtNFwiIHN0eWxlPVwid2lkdGg6IDEwMHB4OyBoZWlnaHQ6IDQwcHg7XCIgQGNsaWNrLnByZXZlbnQ9XCJoYW5kbGVFeHBlcmltZW50XCI+XG4gICAgICAgIEV4cGVyaW1lbnRcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PiAiKSwgX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIDxkaXY+XG4gICAgICA8YnV0dG9uIGlkPVwiY3JlYXRlX3BhbmVsX2J0bjJcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBtcy0yIG10LTIgbWwtNFwiIHN0eWxlPVwid2lkdGg6IDEwMHB4OyBoZWlnaHQ6IDQwcHg7XCIgQGNsaWNrLnByZXZlbnQ9XCJoYW5kbGVBZGRBdmVyYWdlXCI+XG4gICAgICAgIGFkZCBBdmVcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PiAiKV0pOwp9"},{"version":3,"names":["class","marginTop","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","type","_ctx","widthRef","$event","style","heightRef","_hoisted_3","_createVNode","_component_el_radio_group","chooseMode","size","onChange","handleModeChange","_component_el_radio_button","label","_hoisted_4","_component_el_switch","isOpenDbSetup","name","_toDisplayString","_hoisted_5","_component_el_input","customDBHostName","placeholder","customUserName","customDBPassword","customDBName","_component_el_button","onClick","handleTestConn","testConnectResult","createCustomDBConn","createDBConn","initOM3DBEnv","initOm3DB","_component_el_popconfirm","title","onConfirm","clearOM3DBEnv","reference","_withCtx","clearOm3DB","clearIndexFlag","_cache","_hoisted_6","isOpenTransform","_hoisted_7","chooseLineType","_createBlock","text","dialogFormVisible","_component_el_dialog","footer","_hoisted_9","performTransformForSingeLine","fullscreenLoading","fullscreen","lock","_component_el_form","_component_el_form_item","_component_el_select","singleLineTableName","_Fragment","_renderList","allCustomDBTables","item","idx","_component_el_option","key","value","_component_el_date_picker","lineDateRange","Date","_hoisted_8","_component_el_time_picker","lineStartTime","lineEndTime","multiLineTransformDialogVisible","_hoisted_11","perfromTransformForMulitLine","multiLineTableNames","multiple","customMultiLineClassName","clearable","_hoisted_10","_createCommentVNode","_hoisted_12","progressive","handleProgressiveChange","_hoisted_13","currentMultiClass","handleMultiLineClassChange","onFocus","multiLineClassAndLinesMap","get","_hoisted_14","currentMultiClassLines","handleColumnsChange","onFocusColumns","_hoisted_15","selectedOption","handleSelectedOption","onFocusFunctions","_hoisted_16","selectedAggregate","handleSelectedAggregate","onFocusAggregate","_hoisted_17","selectedExperiment","handleSelectedExperiment","onFocusExperiment","_hoisted_18","errorBound","_hoisted_19","currentMultiClassALine","handleMultiLineClassALineChange","id","_withModifiers","args","handleComputePanel"],"sources":["/Users/bao/Downloads/om3-extend/om3-client/src/components/LeftSideDataControlPanel.vue"],"sourcesContent":["<template>\n  <div class=\"data-control-panel radius\">\n\n    <div class=\"d-flex ms-2\" marginTop=\"10px\">\n        <input type=\"number\" class=\"form-control form-control-sm dim-input\" v-model=\"widthRef\" />\n        <span style=\"line-height: 31px\">×</span>\n        <input type=\"number\" class=\"form-control form-control-sm dim-input\" v-model=\"heightRef\" />\n      </div>  \n    <div class=\"choose_container choose_mode_container ms-1\">\n      <el-radio-group v-model=\"chooseMode\" size=\"medium\" @change=\"handleModeChange\">\n        <el-radio-button label=\"Default\"></el-radio-button>\n        <el-radio-button label=\"Custom\"></el-radio-button>\n      </el-radio-group>\n    </div>\n\n\n    <div class=\"dbsetting-control-container mt-2\" v-if=\"chooseMode === 'Custom'\">\n      <div>\n        <el-switch v-model=\"isOpenDbSetup\" name=\"DB Setup\" />\n        <label>{{ \"DB Setup\" }}</label>\n      </div>\n      <div class=\"mt-2 \" v-if=\"isOpenDbSetup\">\n        <el-input v-model=\"customDBHostName\" type=\"string\" placeholder=\"DB Host Name\" />\n        <el-input v-model=\"customUserName\" type=\"string\" placeholder=\"User Name\" />\n        <el-input v-model=\"customDBPassword\" type=\"password\" placeholder=\"DB Password\" />\n        <el-input v-model=\"customDBName\" type=\"string\" placeholder=\"DB Name\" />\n        <div><el-button class=\"btn mt-2\" v-on:click=\"handleTestConn\" type=\"primary\">{{ testConnectResult }}</el-button>\n        </div>\n        <div><el-button class=\"btn mt-2 \" v-on:click=\"createCustomDBConn\" type=\"primary\">{{ createDBConn }}</el-button>\n        </div>\n        <div><el-button class=\"btn mt-2\" v-on:click=\"initOM3DBEnv\" type=\"primary\">{{ initOm3DB }}</el-button></div>\n        <div>\n          <el-popconfirm title=\"This will clear all om3 table, are you sure you want to do this?\"\n            @confirm=\"clearOM3DBEnv\">\n            <template #reference>\n              <el-button class=\"btn mt-2\" type=\"primary\">{{ clearOm3DB }}</el-button>\n            </template>\n          </el-popconfirm>\n        </div>\n        <div><el-button class=\"btn mt-2\" v-on:click=\"clearIndexFlag\" type=\"primary\">Clear Flag</el-button></div>\n      </div>\n    </div>\n\n    <div class=\"om3-transform-control-container mt-2\" v-if=\"chooseMode === 'Custom'\">\n      <div>\n        <el-switch v-model=\"isOpenTransform\" name=\"OM3 Transform\" />\n        <label>{{ \"Data Transform\" }}</label>\n      </div>\n      <div class=\"mt-2 \" v-if=\"isOpenTransform\">\n\n        <div><el-button class=\"btn mt-2\" text @click=\"dialogFormVisible = true\" type=\"primary\"\n            v-if=\"chooseLineType === 'Single'\">Choose Data</el-button>\n        </div>\n        <el-dialog v-model=\"dialogFormVisible\" title=\"Single Line Transform\">\n          <label>Please choose a table,which inclues two columns(t interger,v double precision)(t should be a positive\n            integer starting from zero)</label>\n          <el-form>\n            <el-form-item label=\"Table\">\n              <el-select v-model=\"singleLineTableName\" placeholder=\"Please select a table for transform\">\n                <el-option v-for=\"(item, idx) in allCustomDBTables\" :key=\"idx\" :label=\"item\" :value=\"item\"></el-option>\n              </el-select>\n            </el-form-item>\n            <label>Please select a date and time, which will be linearly mapped to t during visualization </label>\n            <el-form-item label=\"Date Range\">\n              <el-date-picker v-model=\"lineDateRange\" type=\"daterange\" start-placeholder=\"Start Date\"\n                end-placeholder=\"End Date\" :default-value=\"[new Date(2010, 9, 1), new Date(2010, 10, 1)]\" />\n            </el-form-item>\n            <el-form-item label=\"Time Range\">\n              <div class=\"example-basic\">\n                <el-time-picker v-model=\"lineStartTime\" arrow-control placeholder=\"Start Time\" />\n                <el-time-picker v-model=\"lineEndTime\" arrow-control placeholder=\"End Time\" />\n              </div>\n            </el-form-item>\n          </el-form>\n          <template #footer>\n            <span class=\"dialog-footer\">\n              <el-button @click=\"dialogFormVisible = false\">Cancel</el-button>\n              <el-button type=\"primary\" v-loading.fullscreen.lock=\"fullscreenLoading\"\n                v-on:click=\"performTransformForSingeLine\">\n                Confirm\n              </el-button>\n            </span>\n          </template>\n        </el-dialog>\n\n\n        <div><el-button class=\"btn mt-2\" text @click=\"multiLineTransformDialogVisible = true\" type=\"primary\"\n            v-if=\"chooseLineType === 'Multi'\">Choose Data</el-button>\n        </div>\n        <el-dialog v-model=\"multiLineTransformDialogVisible\" title=\"Multi Line Transform\">\n\n          <label>Please choose tables,which inclues two columns(t interger,v double precision)(t should be a positive\n            integer starting from zero). All the data you choose should be the same length</label>\n          <el-form>\n            <el-form-item label=\"Table\">\n              <el-select class=\"multi-line-select\" v-model=\"multiLineTableNames\" multiple\n                placeholder=\"Please select table for transform\">\n                <el-option v-for=\"(item, idx) in allCustomDBTables\" :key=\"idx\" :label=\"item\" :value=\"item\"></el-option>\n              </el-select>\n            </el-form-item>\n            <el-input class=\"mb-4\" v-model=\"customMultiLineClassName\"\n              placeholder=\"Please define a group for the lines you select\" clearable />\n            <label>Please select a date and time, which will be linearly mapped to t during visualization </label>\n            <el-form-item label=\"Date Range\">\n              <el-date-picker v-model=\"lineDateRange\" type=\"daterange\" start-placeholder=\"Start Date\"\n                end-placeholder=\"End Date\" :default-value=\"[new Date(2010, 9, 1), new Date(2010, 10, 1)]\" />\n            </el-form-item>\n            <el-form-item label=\"Time Range\">\n              <div class=\"example-basic\">\n                <el-time-picker v-model=\"lineStartTime\" arrow-control placeholder=\"Start Time\" />\n                <el-time-picker v-model=\"lineEndTime\" arrow-control placeholder=\"End Time\" />\n              </div>\n            </el-form-item>\n          </el-form>\n          <template #footer>\n            <span class=\"dialog-footer\">\n              <el-button @click=\"multiLineTransformDialogVisible = false\">Cancel</el-button>\n              <el-button type=\"primary\" v-loading.fullscreen.lock=\"fullscreenLoading\"\n                v-on:click=\"perfromTransformForMulitLine\">\n                Confirm\n              </el-button>\n            </span>\n          </template>\n        </el-dialog>\n\n      </div>\n    </div>\n\n    <!-- <div class=\"choose_container choose_line_type_container ms-1\">\n      <el-radio-group v-model=\"chooseLineType\" size=\"medium\" @change=\"handleLineTypeChange\">\n        <el-radio-button label=\"Single\"></el-radio-button>\n        <el-radio-button label=\"Multi\"></el-radio-button>\n      </el-radio-group>\n    </div> -->\n\n    <div class=\"progressive-container ms-1 mt-2\" v-if=\"chooseLineType==='Single'\">\n      <span>Progressive</span>\n        <el-switch v-model=\"progressive\" name=\"Progressive\"  @change=\"handleProgressiveChange\"/>\n    </div>\n\n\n\n    <div class=\"class-choose-container mt-2 ms-1\" >\n      <el-select v-model=\"currentMultiClass\" placeholder=\"Select\" size=\"medium\" @change=\"handleMultiLineClassChange\"\n      @focus=\"onFocus\">\n      <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('tables')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n      </el-option>\n      </el-select>\n    </div>\n\n    <div class=\"class-choose-container2 mt-2 ms-1\">\n      <el-select v-model=\"currentMultiClassLines\" multiple\n      placeholder=\"Select\" size=\"medium\" @change=\"handleColumnsChange\"\n      @focus=\"onFocusColumns\">\n      <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('columns')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n      </el-option>\n      </el-select>   \n    </div>\n\n    <div class=\"compute-line-container mt-2 ms-1\">\n      <el-select v-model=\"selectedOption\" placeholder=\"Operator\" @change=\"handleSelectedOption\" @focus=\"onFocusFunctions\">\n        <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('functions')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>\n    </div>\n\n    <div class=\"compute-line-container mt-2 ms-1\">\n      <el-select v-model=\"selectedAggregate\" placeholder=\"Aggregate\" @change=\"handleSelectedAggregate\" @focus=\"onFocusAggregate\">\n        <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('aggregates')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>\n    </div>\n\n\n    <div class=\"mt-2 mb-1\">\n      <el-select v-model=\"selectedExperiment\" placeholder=\"Experiment\" @change=\"handleSelectedExperiment\" @focus=\"onFocusExperiment\">\n        <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('experiments')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>\n    </div>\n\n\n    <div class=\"mt-2 mb-1\">\n        <el-input v-model=\"errorBound\" placeholder=\"errorBound\" />\n    </div>\n\n\n\n\n    <!-- <div class=\"mt-2 mb-1\">\n      <el-select v-model=\"selectedComputeOrShow\" placeholder=\"Compute/Show\" @change=\"handleSelectedComputeOrShow\">\n        <el-option label=\"compute\" value=\"compute\"></el-option>\n        <el-option label=\"show\" value=\"show\"></el-option>\n      </el-select>\n    </div> -->\n\n\n\n\n\n\n    <div class=\"class-choose-container2 mt-2 ms-1\">\n      <el-select v-model=\"currentMultiClassALine\" placeholder=\"Select\" size=\"medium\" @change=\"handleMultiLineClassALineChange\"\n        v-if=\"chooseMode === 'Custom'\">\n        <el-option v-for=\"(item, idx) in multiLineClassAndLinesMap.get('mock')\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>   \n    </div>\n\n\n    <!-- <div class=\"table-choose-container mt-2 ms-1\">\n      <el-select v-model=\"currentTable\" placeholder=\"Select\" size=\"medium\" v-if=\"chooseMode === 'Default'\"\n        @change=\"handleTableChange\">\n        <el-option v-for=\"(item, idx) in allDefaultTables\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>\n      <el-select v-model=\"currentTable\" placeholder=\"Select\" size=\"medium\" v-on:click=\"loadCustomTableAndInfo\"\n        v-if=\"chooseMode === 'Custom'\" @change=\"handleTableChange\">\n        <el-option v-for=\"(item, idx) in allCustomTables\" :key=\"idx\" :label=\"item\" :value=\"item\">\n        </el-option>\n      </el-select>\n    </div> -->\n\n\n\n\n    <!-- <div class=\"mt-2 mb-1\" v-if=\"chooseLineType == 'Multi'\">\n        <el-switch v-model=\"isStopEarly\" name=\"OM3 StopEarly\" />\n        <label>{{ \"Stop Early\" }}</label>\n    </div> -->\n\n    <div>\n      <button id=\"create_panel_btn\" type=\"button\" class=\"btn btn-secondary ms-2 mt-2 ml-4\" style=\"width: 100px; height: 40px;\" @click.prevent=\"handleComputePanel\">\n        create\n      </button>\n    </div>\n\n    <!-- <div>\n      <button id=\"create_panel_btn2\" type=\"button\" class=\"btn btn-secondary ms-2 mt-2 ml-4\" style=\"width: 100px; height: 40px;\" @click.prevent=\"handleExperiment\">\n        Experiment\n      </button>\n    </div> -->\n\n    <!-- <div>\n      <button id=\"create_panel_btn2\" type=\"button\" class=\"btn btn-secondary ms-2 mt-2 ml-4\" style=\"width: 100px; height: 40px;\" @click.prevent=\"handleAddAverage\">\n        add Ave\n      </button>\n    </div> -->\n\n\n  </div>\n</template>\n<script>\nimport store from \"@/store\";\nimport { defineComponent, ref, computed, watch, reactive } from \"vue\";\nimport { ElLoading } from 'element-plus'\nimport { ElNotification } from 'element-plus'\nimport { clearFlagDB } from \"@/indexdb\";\nimport axios from \"axios\";\n\nasync function get(url) {\n  url = 'postgres' + url;\n  //const loading = openLoading();\n  const { data } = await axios.get(url);\n  //loading.close();\n  return data;\n}\n\nexport default defineComponent({\n  data() {\n    return {\n      testConnectResult: \"Test Connection\",\n      createDBConn: \"Create Connection\",\n      initOm3DB: \"Init OM3 DB\",\n      clearOm3DB: \"Clear OM3 DB\",\n      customDBHostName: \"\",\n      customDBPassword: '',\n      customDBName: '',\n      customUserName: \"\",\n      isOpenDbSetup: false,\n      isOpenTransform: false,\n      isStopEarly: false,\n      lineDateRange: [new Date(2010, 9, 1), new Date(2010, 10, 1)],\n      lineStartTime: new Date(2010, 9, 1),\n      lineEndTime: new Date(2010, 10, 1),\n      fullscreenLoading: false,\n      singleLineTableName: \"\",\n      multiLineTableNames: [],\n      customMultiLineClassName: \"\",\n    }\n\n  },\n  components: {\n\n  },\n  methods: {\n    onFocus(){\n      this.$store.dispatch(\"gettables\");\n    },\n\n    onFocusColumns(){\n      this.$store.dispatch(\"getcolumns\");\n    },\n\n    onFocusFunctions(){\n      this.$store.dispatch(\"getfunctions\");\n    },\n\n    onFocusAggregate(){\n      this.$store.dispatch(\"getaggregates\");\n    },\n\n    onFocusExperiment(){\n      this.$store.dispatch(\"getexperiment\");\n    },\n\n    updateTestConnRes(res) {\n      this.testConnectResult = res\n    },\n    updateDBCreateConn(res) {\n      this.createDBConn = res;\n    },\n    updateInitDB(res) {\n      this.initOm3DB = res\n    },\n    updateClearDB(res) {\n      this.clearOm3DB = res;\n    },\n    openFullScreenLoading() {\n      this.fullscreenLoading = true;\n    },\n    closeFullScreenLoading() {\n      this.fullscreenLoading = false;\n    },\n    openNotification(title, msg, type) {\n      ElNotification({\n        title: title,\n        message: msg,\n        type: type,\n      })\n    },\n    handleTestConn() {\n      store.dispatch(\"testCustomDBConn\", { hostName: this.customDBHostName, possword: this.customDBPassword, dbName: this.customDBName, userName: this.customUserName }).then((res) => {\n        const result = res.data['data']['result'];\n        if (result === 'success') {\n          this.storeDBConfig()\n          this.updateTestConnRes(\"Test Success\")\n          this.openNotification(\"Test Connection\", \"Test Connection Success\", \"success\")\n        } else {\n\n          console.error(res.data['msg'])\n          this.updateTestConnRes(\"Test Fail\")\n          this.openNotification(\"Test Connection\", res.data['msg'], \"error\")\n        }\n      })\n    },\n    storeDBConfig() {\n      localStorage.setItem(\"customDBHostName\", this.customDBHostName)\n      localStorage.setItem(\"customDBPassword\", this.customDBPassword)\n      localStorage.setItem(\"customDBName\", this.customDBName)\n      localStorage.setItem(\"customUserName\", this.customUserName)\n    },\n    restoreDBConfig() {\n      const customDBHostName = localStorage.getItem(\"customDBHostName\")\n      const customDBPassword = localStorage.getItem(\"customDBPassword\");\n      const customDBName = localStorage.getItem(\"customDBName\");\n      const customUserName = localStorage.getItem(\"customUserName\");\n      if (customDBHostName) {\n        this.customDBHostName = customDBHostName;\n      }\n      if (customDBPassword) {\n        this.customDBPassword = customDBPassword;\n      }\n      if (customDBName) {\n        this.customDBName = customDBName;\n      }\n      if (customUserName) {\n        this.customUserName = customUserName;\n      }\n    },\n    createCustomDBConn() {\n      store.dispatch(\"createCustomDBConn\", { hostName: this.customDBHostName, possword: this.customDBPassword, dbName: this.customDBName, userName: this.customUserName }).then((res) => {\n        const result = res.data['data']['result'];\n        if (result === 'success') {\n          this.updateDBCreateConn(\"Create Success\")\n          this.openNotification(\"Create Connection\", \"Create Connection Success\", \"success\")\n        } else {\n\n          console.error(res.data['msg'])\n          this.updateDBCreateConn(\"Create Fail\")\n          this.openNotification(\"Create Connection\", res.data['msg'], \"error\")\n        }\n      })\n    },\n    initOM3DBEnv() {\n      store.dispatch(\"initOM3DB\").then((res) => {\n        console.log(res)\n        const result = res.data['result'];\n        if (result === 'success') {\n          this.updateInitDB(\"Init Success\")\n          this.openNotification(\"Init OM3 ENV\", \"Init OM3 ENV Success\", \"success\")\n        } else {\n\n          console.error(res.data['msg'])\n          this.updateInitDB(\"Init Fail\")\n          this.openNotification(\"Init OM3 ENV\", res.data['msg'], \"error\")\n        }\n      })\n    },\n    clearOM3DBEnv() {\n      console.log(\"clear om3 env\")\n      store.dispatch(\"clearOM3Table\").then((res) => {\n        console.log(res)\n        const result = res.data['result'];\n        if (result === 'success') {\n          this.updateClearDB(\"Clear Success\")\n          this.openNotification(\"Clear OM3 ENV\", \"Clear OM3 ENV Success\", \"success\")\n        } else {\n\n          console.error(res.data['msg'])\n          this.updateClearDB(\"Clear Fail\")\n          this.openNotification(\"Clear OM3 ENV\", res.data['msg'], \"error\")\n        }\n      })\n    },\n    performTransformForSingeLine() {\n      let startDateStr = this.lineDateRange[0].toISOString().split(\"T\")[0];\n      let endDateStr = this.lineDateRange[1].toISOString().split(\"T\")[0];\n      let startTimeStr = this.lineStartTime.toISOString().split(\"T\")[1].split('Z')[0];\n      let endTimeStr = this.lineEndTime.toISOString().split(\"T\")[1].split('Z')[0];\n      const startFullTime = startDateStr + \" \" + startTimeStr;\n      const endFullTime = endDateStr + \" \" + endTimeStr;\n      this.openFullScreenLoading();\n      store.dispatch(\"performTransformForSingeLine\", { startTime: startFullTime, endTime: endFullTime, tableName: this.singleLineTableName }).then((res) => {\n        console.log(\"res:\"+res.data);\n        if (res.data['code'] === 200) {\n          console.log(\"single line transform success\")\n          //  add tishi\n        } else {\n          console.error(res.data['msg'])\n        }\n        this.closeFullScreenLoading()\n        this.dialogFormVisible = false;\n      })\n    },\n    perfromTransformForMulitLine() {\n      let startDateStr = this.lineDateRange[0].toISOString().split(\"T\")[0];\n      let endDateStr = this.lineDateRange[1].toISOString().split(\"T\")[0];\n      let startTimeStr = this.lineStartTime.toISOString().split(\"T\")[1].split('Z')[0];\n      let endTimeStr = this.lineEndTime.toISOString().split(\"T\")[1].split('Z')[0];\n      const startFullTime = startDateStr + \" \" + startTimeStr;\n      const endFullTime = endDateStr + \" \" + endTimeStr;\n      this.openFullScreenLoading()\n      store.dispatch(\"performTransformForMultiLine\", { startTime: startFullTime, endTime: endFullTime, tableNames: Array.from(this.multiLineTableNames.values()), multiLineClassName: this.customMultiLineClassName }).then((res) => {\n        if (res['code'] === 200) {\n          console.log(\"multi line transform success\")\n          //  add tishi\n        } else {\n          console.error(res['msg'])\n        }\n        this.closeFullScreenLoading()\n        this.multiLineTransformDialogVisible = false;\n      });\n      store.commit(\"setAllMultiLineClassAndLinesMap\",{\n        key: this.customMultiLineClassName,\n        value: Array.from(this.multiLineTableNames.values())\n      });\n      // console.log(\"computeAllMultiLineClassAndLinesMap:\", store.state.allMultiLineClassAndLinesMap['bao'])\n      // console.log(\"computeAllMultiLineClassAndLinesMap:\", store.state.allMultiLineClassAndLinesMap['bao'])\n      console.log(startFullTime, endFullTime, this.customMultiLineClassName, Array.from(this.multiLineTableNames.values()))\n    }\n  },\n\n  watch: {\n    isOpenDbSetup(newV, oldV) {\n      if (newV) {\n        this.restoreDBConfig()\n      } else {\n        this.updateDBCreateConn(\"Create Connection\")\n        this.updateTestConnRes(\"Test Connection\")\n      }\n    },\n    isOpenTransform(newV, oldV) {\n      if (newV) {\n        store.dispatch(\"getAllCustomTables\").then((res) => {\n          if (res['code'] === 200) {\n            this.allCustomDBTables = res['data']['result'];\n          } else {\n            console.error(res['msg'])\n          }\n        })\n      }\n    },\n    isStopEarly(newV, oldV){\n      if(oldV === true){\n        store.commit(\"alterNoStopEarly\", false);\n        // console.log(\"store.state.controlParams.StopEarly:\", store.state.controlParams.StopEarly);\n      }\n      else if(newV){\n        // console.log(\"newV:\", newV);\n        store.commit(\"alterStopEarly\", true);\n        // console.log(\"store.state.controlParams.StopEarly:\", store.state.controlParams.StopEarly);\n      }\n      // else{\n      //   store.commit(\"alterStopEarly\", false);\n      // }\n    }\n  },\n  setup() {\n    // let tableArray = store.state.allMultiLineClassAndLinesMap.get('bao');\n    // console.log(\"computeAllMultiLineClassAndLinesMap:\", store.state.allMultiLineClassAndLinesMap);\n    const progressive = ref(store.state.controlParams.progressive);\n    const chooseMode = ref(\"Default\");\n    const chooseLineType = ref(\"Single\");\n    const dialogFormVisible = ref(false);\n\n    const multiLineTransformDialogVisible = ref(false)\n\n    const allAlgoritem = store.state.allAlgoritem;\n\n    const currentSampleAlgorithm = ref(\n      store.state.controlParams.currentSampleMethod\n    );\n\n    const currentTable = ref(store.state.controlParams.currentTable);\n\n    const currentCustomTable = ref(store.state.controlParams.currentCustomTable)\n    const currentMultiClass = ref(store.state.controlParams.currentMultiLineClass);\n    const currentMultiClassALine = ref(store.state.controlParams.currentMultiLineClassALine);\n    const currentMultiClassLines = ref(store.state.controlParams.currentMultiLineClassLines);\n    const selectedOption = ref(store.state.controlParams.transform_symbol);\n    const selectedExperiment = ref(store.state.controlParams.experiment);\n    const selectedAggregate = ref(store.state.controlParams.aggregate);\n    const selectedComputeOrShow = ref(store.state.controlParams.computeOrShow);\n    // const multiLineClassAndLinesMap = ref(store.state.allMultiLineClassAndLinesMap);\n\n    const widthRef = ref(600);\n    const heightRef = ref(600);\n    const errorBound = ref(0.05);\n    const currentDB = computed(() => {\n      return store.state.controlParams.currentDB;\n    });\n\n    const handleExperiment = () => {\n      // console.log(\"currentMultiClassALine:\",currentMultiClassALine.value);\n      // console.log(Array.from(currentMultiClassLines.value));\n      const payload = {\n          width: widthRef.value,\n          height: heightRef.value,\n      };\n      store.dispatch(\"Experiment\", [currentMultiClass.value, Array.from(currentMultiClassLines.value), selectedOption.value, selectedExperiment.value, payload, errorBound, selectedComputeOrShow.value, selectedAggregate.value]);\n    }\n\n    const handleAddAverage = () => {\n      // console.log(\"currentMultiClassALine:\",currentMultiClassALine.value);\n      // console.log(Array.from(currentMultiClassLines.value));\n      const payload = {\n          width: widthRef.value,\n          height: heightRef.value,\n      };\n      store.dispatch(\"computeLineTransform\", [currentMultiClass.value, Array.from(currentMultiClassLines.value), selectedOption.value,selectedExperiment.value, payload, errorBound, 'compute', selectedAggregate.value]);\n    }\n\n\n    const handleComputePanel = () => {\n      // console.log(\"currentMultiClassALine:\",currentMultiClassALine.value);\n      // console.log(Array.from(currentMultiClassLines.value));\n      const payload = {\n          width: widthRef.value,\n          height: heightRef.value,\n      };\n      store.dispatch(\"computeLineTransform\", [currentMultiClass.value, Array.from(currentMultiClassLines.value), selectedOption.value,selectedExperiment.value, payload, errorBound, 'compute', selectedAggregate.value, store.state.controlParams.startTime, store.state.controlParams.endTime]);\n    }\n\n    const allSampleAlgoritem = store.state.controlParams.sampleMethods;\n\n    let allTables = computed(() => {\n      return store.state.allTables;\n    });\n    const allCustomTables = computed(() => {\n      return store.state.allCustomTables;\n    })\n\n    const allDefaultTables = computed(() => {\n      return store.state.allDefaultTables;\n    })\n\n    let allMultLineClass = computed(() => {\n      return store.state.allMultiLineClassInfoMap\n    })\n\n    let allCustomMultiLineClass = computed(() => {\n      return store.state.allCustomMultiLineClassInfoMap\n    })\n\n    let multiLineClassAndLinesMap = computed(() => {\n      // console.log(\"computeAllMultiLineClassAndLinesMap:\", store.state.allMultiLineClassAndLinesMap)\n      // const tableArray = store.state.allMultiLineClassAndLinesMap.get(\"bao\");\n      // console.log(Array.from(tableArray));\n      // return tableArray;\n      return store.state.allMultiLineClassAndLinesMap;\n    })\n\n    const handleSampleMethodChange = () => {\n      store.commit(\"alterSampleMethod\", currentSampleAlgorithm.value);\n    };\n\n    const handleSelectedOption = () => {\n      console.log(\"Current Symbol:\", selectedOption.value);\n      store.commit(\"alterSelectedOption\", selectedOption.value);\n    }\n\n    const handleSelectedExperiment = () => {\n      store.commit(\"alterSelectedExperiment\", selectedExperiment.value);\n    }\n\n    const handleSelectedAggregate = () => {\n      store.commit(\"alterSelectedAggregate\", selectedAggregate.value);\n    }\n\n    const handleSelectedComputeOrShow = () => {\n      store.commit(\"alterSelectedComputeOrShow\", selectedComputeOrShow.value);\n    }\n\n    const handleModeChange = () => {\n      store.commit(\"alterMode\", chooseMode.value);\n      chooseLineType.value = \"Single\"\n      store.commit(\"alterLineType\", chooseLineType.value);\n    }\n    const handleLineTypeChange = () => {\n      store.commit(\"alterLineType\", chooseLineType.value)\n      // store.dispatch(\"getAllMultiLineClassInfo\");\n      // store.dispatch(\"getAllMultiLineClassAndLinesInfo\");\n      // console.log(\"computeAllMultiLineClassInfo:\", store.state.allMultiLineClassInfoMap);\n      // console.log(\"computeAllMultiLineClassAndLinesMap:\", store.state.allMultiLineClassAndLinesMap.get(\"bao\"));\n      // const arr = Array.from(store.state.allMultiLineClassAndLinesMap.get(\"bao\"));\n      // console.log(arr);\n    }\n    const handleMultiLineClassChange = () => {\n      console.log(currentMultiClass.value)\n      store.commit(\"alterCurrentMulitLineClass\", currentMultiClass.value)\n\n      const combinedUrl2 = `/line_chart/getcolumns?table_name=${store.state.controlParams.currentMultiLineClass}`;\n      console.log(\"combinedUrl2\", combinedUrl2);\n      const data2 = get(combinedUrl2);\n      data2.then(res => {\n          console.log(\"getcolumns\", res['columns']);\n          const columns = res['columns'];\n          const array = ref([...columns])\n          console.log(\"columns:\", array);\n          store.commit(\"ColumnsChange\", array);\n          currentMultiClassLines.value = res['columns'];\n      });\n      \n    }\n\n    const handleColumnsChange = () => {\n      console.log(\"handleColumnsChange\",currentMultiClassLines.value)\n      // if(currentMultiClassLines.value == 'all'){\n      //   const newValue = multiLineClassAndLinesMap.get('columns')\n      //   store.commit(\"ColumnsChange\", newValue)\n      // }\n      // else\n      store.commit(\"ColumnsChange\", currentMultiClassLines.value)\n      // if(currentMultiClassLines.value == 'all'){\n      //   store.commit(\"ColumnsChange\", state.allMultiLineClassAndLinesMap);\n      // }\n    }\n\n    const handleMultiLineClassALineChange = () => {\n      store.commit(\"alterCurrentMulitLineClassALine\", currentMultiClassALine.value)\n    }\n    const handleMultiLineClassLinesChange = () => {\n\n      console.log(\"handleMultiLineClassLinesChange\",currentMultiClassLines.value)\n      store.commit(\"alterCurrentMulitLineClassLines\", currentMultiClassLines.value)\n    }\n\n    const handleTableChange = () => {\n      store.commit(\"alterTable\", currentTable);\n    };\n\n    const handleCustomTableChange = () => {\n      store.commit(\"alterCustomTable\", currentCustomTable.value)\n    }\n\n    const loadCustomTableAndInfo = () => {\n      store.dispatch(\"loadCustomTableAndInfo\");\n    }\n\n    const handleProgressiveChange = () => {\n      store.commit(\"alterProgressive\", progressive.value);\n    }\n\n    const clearIndexFlag=()=>{\n      clearFlagDB()\n    }\n\n\n\n    return {\n      allAlgoritem,\n      chooseMode,\n      chooseLineType,\n      handleModeChange,\n      currentSampleAlgorithm,\n      allSampleAlgoritem,\n      handleSampleMethodChange,\n      currentTable,\n      allTables,\n      allDefaultTables,\n      handleTableChange,\n      handleLineTypeChange,\n      allMultLineClass,\n      currentMultiClass,\n      currentMultiClassALine,\n      currentMultiClassLines,\n      handleMultiLineClassChange,\n      handleColumnsChange,\n      handleAddAverage,\n      handleMultiLineClassALineChange,\n      dialogFormVisible,\n      handleCustomTableChange,\n      loadCustomTableAndInfo,\n      allCustomTables,\n      allCustomMultiLineClass,\n      multiLineClassAndLinesMap,\n      multiLineTransformDialogVisible,\n      progressive,\n      handleProgressiveChange,\n      clearIndexFlag,\n      handleComputePanel,\n      handleExperiment,\n      selectedOption,\n      handleSelectedOption,\n      selectedExperiment,\n      handleSelectedExperiment,\n      selectedAggregate,\n      handleSelectedAggregate,\n      selectedComputeOrShow,\n      handleSelectedComputeOrShow,\n      widthRef,\n      heightRef,\n      errorBound\n    };\n  },\n});\n</script>\n<style scoped>\n.data-control-panel {\n  min-width: 200px;\n  max-width: 210px;\n  flex-grow: 0.15;\n}\n\n.choose_container {\n  margin-top: 10px;\n}\n\n.btn {\n  width: 100%;\n  margin-left: 0px;\n}\n\n.multi-line-select {\n  width: 100%;\n}\n\n.device-control-panel {\n  min-height: 25px;\n  background-color: #fff;\n}\n\n.device-dimensions-menu-show {\n  position: absolute;\n  inset: 0px auto auto 0px;\n  margin: 0px;\n  transform: translate(0px, 40px);\n}\n\n.dim-input {\n  max-width: 4rem;\n}\n</style>"],"mappings":"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","ignoreList":[]}]}